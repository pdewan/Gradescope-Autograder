<Events startTimestamp="1597522471057" logVersion="1.0.0.202008151525">
  <Command __id="18616" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:34:19 EDT 2020" starttimestamp="1597522471057" timestamp="433188160" />
  <Command __id="18617" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:34:19 EDT 2020" starttimestamp="1597522471057" timestamp="433188165" />
  <Command __id="18618" _type="ShellCommand" date="Thu Aug 20 16:34:36 EDT 2020" starttimestamp="1597522471057" timestamp="433205477" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18619" _type="ShellCommand" date="Thu Aug 20 16:34:40 EDT 2020" starttimestamp="1597522471057" timestamp="433208967" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18620" _type="ShellCommand" date="Thu Aug 20 16:34:58 EDT 2020" starttimestamp="1597522471057" timestamp="433227586" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18624" _type="ShellCommand" date="Thu Aug 20 16:35:43 EDT 2020" starttimestamp="1597522471057" timestamp="433272444" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18625" _type="EclipseCommand" commandID="org.eclipse.ui.project.properties" date="Thu Aug 20 16:35:43 EDT 2020" starttimestamp="1597522471057" timestamp="433272472" />
  <Command __id="18626" _type="ShellCommand" date="Thu Aug 20 16:35:56 EDT 2020" starttimestamp="1597522471057" timestamp="433285345" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18627" _type="ShellCommand" date="Thu Aug 20 16:37:23 EDT 2020" starttimestamp="1597522471057" timestamp="433372444" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18628" _type="EclipseCommand" commandID="org.eclipse.egit.ui.team.Commit" date="Thu Aug 20 16:37:23 EDT 2020" starttimestamp="1597522471057" timestamp="433372466" />
  <Command __id="18629" _type="ShellCommand" date="Thu Aug 20 16:37:27 EDT 2020" starttimestamp="1597522471057" timestamp="433376054" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18630" _type="ShellCommand" date="Thu Aug 20 16:38:40 EDT 2020" starttimestamp="1597522471057" timestamp="433449322" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18631" _type="ShellCommand" date="Thu Aug 20 16:38:42 EDT 2020" starttimestamp="1597522471057" timestamp="433451009" type="ECLIPSE_MINIMIZED" />
  <Command __id="18632" _type="ShellCommand" date="Thu Aug 20 16:38:42 EDT 2020" starttimestamp="1597522471057" timestamp="433451018" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18633" _type="ShellCommand" date="Thu Aug 20 16:38:56 EDT 2020" starttimestamp="1597522471057" timestamp="433465679" type="ECLIPSE_MAXIMIZED" />
  <Command __id="18634" _type="ShellCommand" date="Thu Aug 20 16:38:56 EDT 2020" starttimestamp="1597522471057" timestamp="433465730" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18635" _type="ShellCommand" date="Thu Aug 20 16:39:02 EDT 2020" starttimestamp="1597522471057" timestamp="433471337" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18636" _type="ShellCommand" date="Thu Aug 20 16:39:25 EDT 2020" starttimestamp="1597522471057" timestamp="433494580" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18637" _type="EclipseCommand" commandID="org.eclipse.egit.ui.team.Commit" date="Thu Aug 20 16:39:25 EDT 2020" starttimestamp="1597522471057" timestamp="433494599" />
  <Command __id="18638" _type="ShellCommand" date="Thu Aug 20 16:39:25 EDT 2020" starttimestamp="1597522471057" timestamp="433494744" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18639" _type="ShellCommand" date="Thu Aug 20 16:39:34 EDT 2020" starttimestamp="1597522471057" timestamp="433503456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18640" _type="ShellCommand" date="Thu Aug 20 16:39:36 EDT 2020" starttimestamp="1597522471057" timestamp="433505663" type="ECLIPSE_MINIMIZED" />
  <Command __id="18641" _type="ShellCommand" date="Thu Aug 20 16:39:36 EDT 2020" starttimestamp="1597522471057" timestamp="433505673" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18642" _type="ShellCommand" date="Thu Aug 20 16:39:42 EDT 2020" starttimestamp="1597522471057" timestamp="433511608" type="ECLIPSE_MAXIMIZED" />
  <Command __id="18643" _type="ShellCommand" date="Thu Aug 20 16:39:42 EDT 2020" starttimestamp="1597522471057" timestamp="433511743" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18644" _type="ShellCommand" date="Thu Aug 20 16:39:50 EDT 2020" starttimestamp="1597522471057" timestamp="433519792" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18645" _type="ShellCommand" date="Thu Aug 20 16:40:36 EDT 2020" starttimestamp="1597522471057" timestamp="433565227" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18646" _type="ShellCommand" date="Thu Aug 20 16:40:41 EDT 2020" starttimestamp="1597522471057" timestamp="433570331" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18647" _type="ShellCommand" date="Thu Aug 20 16:41:07 EDT 2020" starttimestamp="1597522471057" timestamp="433596362" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18648" _type="EclipseCommand" commandID="org.eclipse.egit.ui.team.Commit" date="Thu Aug 20 16:41:07 EDT 2020" starttimestamp="1597522471057" timestamp="433596385" />
  <Command __id="18649" _type="ShellCommand" date="Thu Aug 20 16:41:11 EDT 2020" starttimestamp="1597522471057" timestamp="433600811" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18650" _type="ShellCommand" date="Thu Aug 20 16:41:14 EDT 2020" starttimestamp="1597522471057" timestamp="433603655" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18651" _type="ShellCommand" date="Thu Aug 20 16:41:18 EDT 2020" starttimestamp="1597522471057" timestamp="433607463" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18652" _type="ShellCommand" date="Thu Aug 20 16:41:32 EDT 2020" starttimestamp="1597522471057" timestamp="433621137" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18653" _type="ShellCommand" date="Thu Aug 20 16:41:56 EDT 2020" starttimestamp="1597522471057" timestamp="433645756" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18659" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:42:16 EDT 2020" starttimestamp="1597522471057" timestamp="433665010" />
  <Command __id="18660" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:42:16 EDT 2020" starttimestamp="1597522471057" timestamp="433665081" />
  <Command __id="18661" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:42:16 EDT 2020" starttimestamp="1597522471057" timestamp="433665102" />
  <Command __id="18662" _type="EclipseCommand" commandID="" date="Thu Aug 20 16:42:16 EDT 2020" starttimestamp="1597522471057" timestamp="433665104" />
  <Command __id="18663" _type="ShellCommand" date="Thu Aug 20 16:42:20 EDT 2020" starttimestamp="1597522471057" timestamp="433669667" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18664" _type="ShellCommand" date="Thu Aug 20 16:44:01 EDT 2020" starttimestamp="1597522471057" timestamp="433770466" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18665" _type="ShellCommand" date="Thu Aug 20 16:44:09 EDT 2020" starttimestamp="1597522471057" timestamp="433778753" type="ECLIPSE_MINIMIZED" />
  <Command __id="18666" _type="ShellCommand" date="Thu Aug 20 16:44:09 EDT 2020" starttimestamp="1597522471057" timestamp="433778760" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="18667" _type="ShellCommand" date="Fri Aug 21 03:24:50 EDT 2020" starttimestamp="1597522471057" timestamp="472219642" type="ECLIPSE_MINIMIZED" />
  <Command __id="18668" _type="ShellCommand" date="Fri Aug 21 16:03:26 EDT 2020" starttimestamp="1597522471057" timestamp="517735271" type="ECLIPSE_MAXIMIZED" />
  <Command __id="81036" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:29:10 EDT 2020" docASTNodeCount="529" docActiveCodeLength="4478" docExpressionCount="332" docLength="7746" projectName="GraderBasics" starttimestamp="1597522471057" timestamp="861279642">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\BasicLanguageDependencyManager.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader.basics;¶¶import java.util.HashMap;¶import java.util.Map;¶¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.ExecutableFinderSelector;¶import grader.basics.execution.JavaMainClassFinderSelector;¶//import grader.checkStyle.CheckStyleInvoker;¶//import grader.checkStyle.JavaCheckStyleInvokerFactory;¶//import grader.compilation.ClassFilesCompiler;¶//import grader.compilation.JavaClassFilesCompilerSelector;¶//import grader.compilation.c.CFilesCompilerSelector;¶//import grader.config.ConfigurationManager;¶//import grader.config.StaticConfigurationUtils;¶//import grader.execution.ExecutableFinderSelector;¶import grader.basics.execution.CommandGenerator;¶//import grader.permissions.Permissible;¶//import grader.permissions.PermissionsGenerator;¶//import grader.permissions.java.DefaultJavaPermissible;¶//import grader.permissions.java.JavaPermissionsGenerator;¶import grader.basics.execution.lisp.CLispCommandGenerator;¶import grader.basics.execution.lisp.LispCommandGeneratorSelector;¶import grader.basics.execution.prolog.PrologCommandGeneratorSelector;¶import grader.basics.execution.sml.SMLCommandGeneratorSelector;¶¶public class BasicLanguageDependencyManager {¶	static  String sourceFileSuffix;¶¶	 static Map<String, String> languageToSourceFileSuffix = new HashMap<>();¶	 protected static Map<String, String> languageToBinaryFileSuffix = new HashMap<>();¶	 protected static Map<String, CommandGenerator> languageToMainClassFinder = new HashMap();¶¶		¶		public static String JAVA_LANGUAGE = "Java";¶		public static String C_LANGUAGE = "C";¶		public static String LISP_LANGUAGE = "Lisp";¶		public static String PROLOG_LANGUAGE = "Prolog";¶		public static String SML_LANGUAGE = "SML";¶¶		public static String CPlusPlus_LANGUAGE = "C++";¶¶		public static String PYTHON_LANGUAGE = "Python";¶		 static String DEFAULT_LANGUAGE =JAVA_LANGUAGE ;¶¶¶¶¶	¶//	public static  String binaryFileSuffix = ".class";¶¶¶	public static void setSourceFileSuffix(String sourceFileSuffix) {¶		BasicLanguageDependencyManager.sourceFileSuffix = sourceFileSuffix;¶	}¶¶¶	public static void setLanguageToSourceFileSuffix(¶			Map<String, String> languageToSourceFileSuffix) {¶		BasicLanguageDependencyManager.languageToSourceFileSuffix = languageToSourceFileSuffix;¶	}¶¶¶	¶¶¶¶	public static void setLanguage(String language) {¶//		BasicLanguageDependencyManager.language = language;¶//	sourceFileSuffix = languageToSourceFileSuffix.get(language);¶//	binaryFileSuffix = languageToBinaryFileSuffix.get(language);¶	}¶¶¶	¶¶¶	public static void setBinaryFileSuffix(String binaryFileSuffix) {¶//		BasicLanguageDependencyManager.binaryFileSuffix = binaryFileSuffix;¶	}¶¶¶	public static String getSourceFileSuffix() {¶		String aLanguage = getLanguage();¶		return languageToSourceFileSuffix.get(aLanguage);¶//		if (sourceFileSuffix == null) {¶//			getLanguage(); // has side effect of setting source file suffix¶//		}¶//		return sourceFileSuffix;¶	}¶¶//	public static boolean isJava() {¶//		String aLanguage = getLanguage();¶//		return JAVA_LANGUAGE.equals(JAVA_LANGUAGE);¶//	}¶	// do not cache value as different pro¶	public static String getLanguage() {¶//		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getLanguage();¶//		if (language ==  null) {¶//			language = 	BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getStringProperty(BasicStaticConfigurationUtils.LANGUAGE, JAVA_LANGUAGE);¶			String language = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getLanguage();¶			setLanguage (language);¶¶//¶//			if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//				language = BasicStaticConfigurationUtils.getLanguage();¶//			}¶//		}¶//¶		return language;¶	}¶¶¶	public static String getBinaryFileSuffix() {¶		String aLanguage = getLanguage();¶		return languageToBinaryFileSuffix.get(aLanguage);¶//		return binaryFileSuffix;¶	}¶	public static CommandGenerator getMainClassFinder() {¶		return languageToMainClassFinder.get(getLanguage());¶	}¶	¶//	public static ClassFilesCompiler getSourceFilesCompiler() {¶//		return languageToCompiler.get(getLanguage());¶//	}¶//	public static CheckStyleInvoker getCheckStyleInvoker() {¶//		return languageToCheckStyleInvoker.get(getLanguage());¶//	}¶//	public static Permissible getDefaultPermissible() {¶//		return languageToDefaultPermissible.get(getLanguage());¶//	}¶//	public static PermissionsGenerator getPermissionGenerator() {¶//		return languageToPermissionGenerator.get(getLanguage());¶//	}¶	public static boolean isJava() {¶		return JAVA_LANGUAGE. equals(getLanguage());¶	}¶	public static void setCOBj(String aCObj) {¶		if (aCObj != null)¶	¶		languageToBinaryFileSuffix.put(C_LANGUAGE, "." + aCObj);¶		languageToBinaryFileSuffix.put(CPlusPlus_LANGUAGE, "." + aCObj);¶¶¶	¶}¶	public static boolean hasBinaryFolder() {¶		return languageToMainClassFinder.get(getLanguage()).hasBinaryFolder();¶	}¶//	public static void setCOBj(ConfigurationManager aConfigurationManager) {¶//		String cObj = aConfigurationManager.getCourseConfiguration().getString(StaticConfigurationUtils.C_OBJ);¶//		if (cObj == null)¶//			cObj = aConfigurationManager.getStaticConfiguration().getString(StaticConfigurationUtils.C_OBJ);¶//		if (cObj != null)¶//			languageToBinaryFileSuffix.put(C_LANGUAGE, "." + cObj);¶//¶//		¶//	}¶//	public static void setCOBj(String aCObj) {¶//			if (aCObj != null)¶//		¶//			languageToBinaryFileSuffix.put(C_LANGUAGE, "." + aCObj);¶//¶//		¶//	}¶	static {¶		languageToSourceFileSuffix.put(JAVA_LANGUAGE, ".java");¶		languageToBinaryFileSuffix.put(JAVA_LANGUAGE, ".class");¶		languageToSourceFileSuffix.put(C_LANGUAGE, ".c");¶		languageToSourceFileSuffix.put(CPlusPlus_LANGUAGE, ".cpp");¶		languageToBinaryFileSuffix.put(C_LANGUAGE, ".o");¶		languageToBinaryFileSuffix.put(CPlusPlus_LANGUAGE, ".o");¶		languageToSourceFileSuffix.put(PYTHON_LANGUAGE, ".py");¶		languageToBinaryFileSuffix.put(PYTHON_LANGUAGE, ".py"); // does it have a compiled class¶		¶		languageToSourceFileSuffix.put(LISP_LANGUAGE, ".lisp");¶		languageToBinaryFileSuffix.put(LISP_LANGUAGE, ".lisp"); // does it have a compiled class¶		¶		languageToSourceFileSuffix.put(PROLOG_LANGUAGE, ".pl");¶		languageToBinaryFileSuffix.put(PROLOG_LANGUAGE, ".pl"); // does it have a compiled class¶		¶		languageToSourceFileSuffix.put(SML_LANGUAGE, ".sml");¶		languageToBinaryFileSuffix.put(SML_LANGUAGE, ".sml"); // does it have a compiled class¶		¶		languageToMainClassFinder.put(JAVA_LANGUAGE, JavaMainClassFinderSelector.getMainClassFinder());¶		languageToMainClassFinder.put(C_LANGUAGE, ExecutableFinderSelector.getMainClassFinder());¶		languageToMainClassFinder.put(CPlusPlus_LANGUAGE, ExecutableFinderSelector.getMainClassFinder());¶		languageToMainClassFinder.put(LISP_LANGUAGE, LispCommandGeneratorSelector.getCommandGenerator());¶		languageToMainClassFinder.put(PROLOG_LANGUAGE, PrologCommandGeneratorSelector.getCommandGenerator());¶		languageToMainClassFinder.put(SML_LANGUAGE, SMLCommandGeneratorSelector.getCommandGenerator());¶¶¶		¶//		¶//		languageToCompiler.put(JAVA_LANGUAGE, JavaClassFilesCompilerSelector.getClassFilesCompiler() );¶//		languageToCompiler.put(C_LANGUAGE, CFilesCompilerSelector.getClassFilesCompiler());¶//		languageToCheckStyleInvoker.put(JAVA_LANGUAGE, JavaCheckStyleInvokerFactory.getSingleton());¶//		¶//		languageToDefaultPermissible.put(JAVA_LANGUAGE, new DefaultJavaPermissible());¶//¶//		languageToPermissionGenerator.put(JAVA_LANGUAGE, new JavaPermissionsGenerator());¶¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="81115" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:38:10 EDT 2020" docASTNodeCount="2917" docActiveCodeLength="25909" docExpressionCount="1875" docLength="35379" projectName="GraderBasics" starttimestamp="1597522471057" timestamp="861819810">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader.basics.config;¶¶import static grader.basics.config.BasicStaticConfigurationUtils.ARGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.CHECK_ALL_SPECIFIED_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.CONSTRUCTOR_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_CHECK_ALL_SPECIFIED_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_CONSTRUCTOR_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_FORK_MAIN;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_METHOD_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_PROCESS_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_REQUIREMENTS_LOCATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_RESOURCE_RELEASE_TIME;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_USE_PROJECT_CONFIGURATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_POINT;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_TAG;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.FORK_MAIN;¶import static grader.basics.config.BasicStaticConfigurationUtils.METHOD_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.PROCESS_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.RESOURCE_RELEASE_TIME;¶import static grader.basics.config.BasicStaticConfigurationUtils.START_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_METHOD_CONSTRUCTOR_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_PROCESS_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES;¶import static grader.basics.config.BasicStaticConfigurationUtils.toCompoundProperty;¶¶import java.io.File;¶import java.io.FileNotFoundException;¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶¶import grader.basics.BasicLanguageDependencyManager;¶import grader.basics.execution.BasicRunningProject;¶import util.trace.Tracer;¶/*¶ * We are duplicating code in BasicStaticConfigiration and keeping the same kind of state.¶ * So we do not really need BasicStaticConfigiration¶ * Let us keep them consistent¶ * ¶ * Actually we need all of this so we can override instance methods, which you cannot in¶ * BasicStaticSpecification.¶ */¶public class ABasicExecutionSpecification implements BasicExecutionSpecification {¶	protected List<String> emptyList = new ArrayList();¶¶¶	protected Map<String, String> runtimeGraderStringProperties = new HashMap<>();¶	protected Map<String, String> runtimeStudentStringProperties = new HashMap<>();¶	protected Map<String, Integer> runtimeGraderIntegerProperties = new HashMap<>();¶	protected Map<String, Integer> runtimeStudentIntegerProperties = new HashMap<>();¶	protected Map<String, Boolean> runtimeGraderBooleanProperties = new HashMap<>();¶	protected Map<String, Boolean> runtimeStudentBooleanProperties = new HashMap<>();¶	protected Map<String, List> runtimeGraderListProperties = new HashMap<>();¶	protected Map<String, List> runtimeStudentListProperties = new HashMap<>();¶	¶	@Override¶    public Integer getIntegerProperty(String aProperty, Integer aDefault) {¶    	Integer retVal = getInheritedIntegerModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentIntegerProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderIntegerProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public Boolean getBooleanProperty(String aProperty, Boolean aDefault) {¶    	Boolean retVal = getInheritedBooleanModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentBooleanProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderBooleanProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    ¶    @Override¶    public String getStringProperty(String aProperty, String aDefault) {¶    	String retVal = getInheritedStringModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    protected String getConfigurationDirectString(String aProperty, String aDefault) {¶    	return BasicStaticConfigurationUtils.getConfigurationBasicDirectString(aProperty, aDefault);¶    }¶    protected List getConfigurationDirectList(String aProperty, List aDefault) {¶    	return BasicStaticConfigurationUtils.getConfigurationBasicDirectList(aProperty, aDefault);¶    }¶    public String getDirectStringProperty(String aProperty, String aDefault) {¶    	String retVal = getConfigurationDirectString(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    public List<String> getDirectListProperty(String aProperty, List<String> aDefault) {¶    	List<String> retVal = getConfigurationDirectList(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public List getListProperty(String aProperty, List aDefault) {¶    	List retVal = getInheritedListModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	retVal = runtimeStudentListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public void setStudentStringProperty(String aProperty, String aValue) {¶    	runtimeStudentStringProperties.put(aProperty, aValue);¶    }¶   ¶    @Override¶    public void setGraderStringProperty(String aProperty, String aValue) {¶    	runtimeGraderStringProperties.put(aProperty, aValue);¶    }¶    public  Integer getInheritedIntegerModuleProblemProperty(¶			¶			String aProperty, Integer defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedIntegerModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  List getInheritedListModuleProblemProperty(¶			¶			String aProperty, List<String> defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedListModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  String getInheritedStringModuleProblemProperty(¶			¶			String aProperty, String defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedStringModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  Boolean getInheritedBooleanModuleProblemProperty(¶			¶			String aProperty, Boolean defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedBooleanModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getProcessTeams()¶	 */¶	@Override¶	public List<String> getProcessTeams() {¶		¶		return getListProperty(BasicStaticConfigurationUtils.PROCESS_TEAMS, emptyList);¶//		return processTeams;¶	}¶	@Override¶	public void resetProcessTeams() {¶		Tracer.info(this, "resetting process team: " );¶		runtimeGraderListProperties.put(BasicStaticConfigurationUtils.PROCESS_TEAMS, emptyList);¶//		processTeams = new ArrayList<>();¶//		BasicStaticConfigurationUtils.setProcessTeams(processTeams);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcessTeams(java.util.List)¶	 */¶	@Override¶	public void setProcessTeams(List<String> aProcessTeamNames) {¶		Tracer.info(this, "Setting process team: " + aProcessTeamNames);¶		runtimeGraderListProperties.put(BasicStaticConfigurationUtils.PROCESS_TEAMS, aProcessTeamNames);¶//		processTeams = aProcessTeamNames;¶//		BasicStaticConfigurationUtils.setProcessTeams(processTeams);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getProcesses(java.lang.String)¶	 */¶	@Override¶	public List<String> getProcesses(String aProcessTeam) {¶		return getListProperty(aProcessTeam, emptyList);¶//		return graderProcessTeamToProcesses.get(aProcessTeam);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcesses(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setProcesses(String aProcessTeam, List<String> aProcesses) {¶		Tracer.info(this, "Setting processes: " + aProcessTeam + " = " + aProcesses);¶		runtimeGraderListProperties.put(aProcessTeam, aProcesses);¶//		graderProcessTeamToProcesses.put(aProcessTeam, aProcesses);¶	}¶	¶	@Override¶	public List<String> getTerminatingProcesses(String aProcessTeam) {¶		return getListProperty(¶				BasicStaticConfigurationUtils.toCompoundProperty(¶						aProcessTeam, BasicStaticConfigurationUtils.TERMINATING), emptyList);¶//		return graderProcessTeamToTerminatingProcesses.get(aProcessTeam);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcesses(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setTerminatingProcesses(String aProcessTeam, List<String> aProcesses) {¶		Tracer.info(this, "Setting terminating processes: " + aProcessTeam + " - " + aProcesses);¶		runtimeGraderListProperties.put(¶				BasicStaticConfigurationUtils.toCompoundProperty(aProcessTeam, BasicStaticConfigurationUtils.TERMINATING),¶				aProcesses);¶		¶//		graderProcessTeamToTerminatingProcesses.put(aProcessTeam, aProcesses);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getSleepTime(java.lang.String)¶	 */¶	@Override¶	public Integer getResourceReleaseTime(String aProcess) {¶		Integer aRetVal = getIntegerProperty(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				null);¶		if (aRetVal != null)¶			return aRetVal;¶		return getResourceReleaseTime();¶				¶//		return graderProcessToSleepTime.get(aProcess);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setSleepTime(java.lang.String, int)¶	 */¶	@Override¶	public void setGraderResourceReleaseTime(String aProcess, int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time for process " + aProcess + " to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeGraderIntegerProperties.put(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				aSleepTime);¶	}¶	@Override¶	public void setStudentResourceReleaseTime(String aProcess, int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time for process " + aProcess + " to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeStudentIntegerProperties.put(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				aSleepTime);¶	}¶	@Override¶	public Integer getResourceReleaseTime() {¶		return getIntegerProperty(¶				RESOURCE_RELEASE_TIME, ¶				DEFAULT_RESOURCE_RELEASE_TIME);¶				¶//		return graderProcessToSleepTime.get(aProcess);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setSleepTime(java.lang.String, int)¶	 */¶	@Override¶	public void setGraderResourceReleaseTime(int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeGraderIntegerProperties.put(¶				RESOURCE_RELEASE_TIME, ¶				aSleepTime);¶	}¶	@Override¶	public void setStudentResourceReleaseTime (int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeStudentIntegerProperties.put(¶				RESOURCE_RELEASE_TIME, ¶				aSleepTime);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getEntrytag(java.lang.String)¶	 */¶	@Override¶	public String getEntryTag(String aProcess) {¶		return getStringProperty(¶				toCompoundProperty(aProcess, ENTRY_TAG), null);¶		¶//		return graderProcessToEntryTag.get(aProcess);¶		¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setEntryTag(java.lang.String, java.lang.String)¶	 */¶	@Override¶	public void setEntryTag(String aProcess, String anEntryTag) {¶		Tracer.info(this, "Setting entry tag processes: " + aProcess + " - " + anEntryTag);¶		runtimeGraderStringProperties.put(toCompoundProperty(aProcess, ENTRY_TAG), anEntryTag);¶//		 graderProcessToEntryTag.put(aProcess, anEntryTag);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getArgs(java.lang.String)¶	 */¶	@Override¶	public List<String> getArgs(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, ARGS), emptyList);¶//		return graderProcessToArgs.get(aProcess);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setArgs(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setArgs(String aProcess, List<String> anArgs) {¶		Tracer.info(this, "Setting processes args: " + aProcess + " - " + anArgs);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, ARGS), anArgs);¶//		 graderProcessToArgs.put(aProcess, anEntryArgs);¶	}¶	¶	@Override¶	public List<String> getStartTags(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, START_TAGS), emptyList);¶¶//		return graderProcessToStartTags.get(aProcess);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setArgs(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setStartTags(String aProcess, List<String> newVal) {¶		Tracer.info(this, "Setting start tag processes: " + aProcess + " - " + newVal);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, START_TAGS), newVal);¶//		graderProcessToStartTags.put(aProcess, aStartTags);¶	}¶	@Override¶	public String getEntryPoint() {¶		return getStringProperty(ENTRY_POINT, null);¶¶//		return graderProcessToEntryPoint.get(aProcess);¶	}¶	@Override¶	public void setEntryPoint(String anEntryPoint) {¶		runtimeGraderStringProperties.put(ENTRY_POINT, anEntryPoint);¶//		graderProcessToEntryPoint.put(aProcess, anEntryPoint);¶	}¶¶	@Override¶	public String getEntryPoint(String aProcess) {¶		return getStringProperty(toCompoundProperty(aProcess, ENTRY_POINT), null);¶¶//		return graderProcessToEntryPoint.get(aProcess);¶	}¶¶	@Override¶	public void setEntryPoint(String aProcess, String anEntryPoint) {¶		Tracer.info(this, "Setting entry point processes: " + aProcess + " - " + anEntryPoint);¶		runtimeGraderStringProperties.put(toCompoundProperty(aProcess, ENTRY_POINT), anEntryPoint);¶//		graderProcessToEntryPoint.put(aProcess, anEntryPoint);¶	}¶¶	@Override¶	public List<String> getEntryTags(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, ENTRY_TAGS), emptyList);¶//		return graderProcessToEntryTags.get(aProcess);¶	}¶¶	@Override¶	public void setEntryTags(String aProcess, List<String> anEntryTags) {¶		Tracer.info(this, "Setting entry tags processes: " + aProcess + " - " + anEntryTags);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, ENTRY_TAGS), anEntryTags);¶//		graderProcessToEntryTags.put(aProcess, anEntryTags);¶		¶	}¶	¶	public static int RESORT_TIME = 100;¶	public static boolean WAIT_FOR_RESORT = true;¶¶//	protected  long resortTime = RESORT_TIME;¶//    protected  boolean waitForResort = true;¶    @Override¶    public   void setGraderResortTime(Integer aResortTime) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.RESORT_TIME, aResortTime);¶    	¶    }¶    @Override¶    public void setGraderProcessOutputWaitTime(Integer newVal) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.OUTPUT_WAIT_TIME, newVal);¶    	¶    }¶    @Override¶    public void setGraderProcessTeamOutputWaitTime(Integer newVal) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.TEAM_OUTPUT_WAIT_TIME, newVal);¶    	¶    }¶    @Override¶    public  long getResortTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.RESORT_TIME, RESORT_TIME);¶    }¶    @Override¶    public  Integer getProcessOutputSleepTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.OUTPUT_WAIT_TIME, BasicRunningProject.PROCESS_OUTPUT_SLEEP_TIME);¶    }¶    @Override¶	public  Integer getProcessTeamOutputSleepTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.TEAM_OUTPUT_WAIT_TIME, BasicRunningProject.PROCESS_TEAM_OUTPUT_OUTPUT_SLEEP_TIME);¶¶	}¶    @Override¶    public  boolean isWaitForResort() {¶//    	return BasicStaticConfigurationUtils.isTeamProcess() && waitForResort;¶    	return BasicStaticConfigurationUtils.isTeamProcess() && getWaitForResortProperty();¶¶    }¶    @Override¶    public  void setGraderWaitForResort(boolean newVal) {¶//    	waitForResort = newVal;¶    	runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.WAIT_FOR_RESORT, newVal);¶¶    }¶    @Override¶    public boolean getWaitForResortProperty() {¶    	return getBooleanProperty(BasicStaticConfigurationUtils.WAIT_FOR_RESORT, WAIT_FOR_RESORT);¶    }¶    protected String language = null;¶    @Override¶    public String getLanguage() {¶    	if (language == null) {¶    		language = getStringProperty(BasicStaticConfigurationUtils.LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);¶    	}¶    	return language;¶//    	return getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    }¶    @Override¶    public void setLanguage(String aValue) {¶    	runtimeStudentStringProperties.put(BasicStaticConfigurationUtils.LANGUAGE, aValue);¶    }¶ ¶    protected String gradableProjectLocation = null;¶    @Override¶    public String getGradableProjectLocation() {¶    	if (gradableProjectLocation == null) {¶    		gradableProjectLocation = getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    	}¶    	return gradableProjectLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    }¶    @Override¶    public void setStudentGradableProjectLocation(String aValue) {¶    	File aFile = new File(aValue);¶    	if (!aFile.exists() || !aFile.isDirectory()) {¶    		FileNotFoundException anException = new FileNotFoundException("Did not find project directory:" + aValue);¶    		anException.printStackTrace();¶    	}¶    	¶    	runtimeStudentStringProperties.put(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, aValue);¶    }¶protected String requirementsLocation = null;¶    ¶    @Override¶    // the default value is null, so this caching will not really help¶    public String getRequirementsLocation() {¶    	if (requirementsLocation == null) {¶    		requirementsLocation = getStringProperty(BasicStaticConfigurationUtils.REQUIREMENTS_LOCATION, DEFAULT_REQUIREMENTS_LOCATION);¶    	}¶    	return sourceFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    }¶    ¶    protected String sourceFolderLocation = null;¶    ¶    @Override¶    // the default value is null, so this caching will not really help¶    public String getSourceFolderLocation() {¶    	if (sourceFolderLocation == null) {¶    		sourceFolderLocation = getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    	}¶    	return sourceFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    }¶    protected String binaryFolderLocation = null;¶¶    @Override¶    public String getBinaryFolderLocation() {¶    	if (binaryFolderLocation == null) {¶    		binaryFolderLocation = getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    	}¶    	return binaryFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    }¶    protected String objectFolderLocation = null;¶¶    @Override¶    public String getObjectFolderLocation() {¶    	if (objectFolderLocation == null) {¶    		objectFolderLocation = getStringProperty(BasicStaticConfigurationUtils.OBJECT_LOCATION, null);¶    	}¶    	return objectFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    }¶    // should we cache these values?¶//    protected String language;¶//    @Override¶    // no caching as each project can have different language¶//    public String getLanguage() {¶//    	return getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶////    	if (language == null) {¶////    		language = getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶////    	}¶////    	return language;¶////    	return getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶//    }¶//    // no caching as ¶//    @Override¶//    public List<String> getBasicCommand() {¶//    	List<String> aCommand = getInheritedListModuleProblemProperty(BasicStaticConfigurationUtils.EXECUTION_COMMAND, null);¶//    	if (aCommand != null && !aCommand.isEmpty()) {¶//    		return aCommand;¶//    	}¶////    	String aLangugage = getLanguage();¶//    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶//    	¶//    }¶    @Override¶    public List<String> getBasicCommand(String aProcess) {¶    	String aProperty = toCompoundProperty(aProcess, BasicStaticConfigurationUtils.EXECUTION_COMMAND);¶    	List<String> aCommand = getListProperty(aProperty, null);¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶    	aCommand = getBasicCommand(); // more inheritance¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶//    	String aLangugage = getLanguage();¶    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶    	¶    }¶    @Override¶    public void setGraderBasicCommand(String aProcess, List<String> aCommand) {¶    	String aProperty = toCompoundProperty(aProcess, BasicStaticConfigurationUtils.EXECUTION_COMMAND);¶    	runtimeGraderListProperties.put(aProperty, aCommand);¶    }¶    // no caching as ¶    @Override¶    public List<String> getBasicCommand() {¶    	List<String> aCommand = getListProperty(BasicStaticConfigurationUtils.EXECUTION_COMMAND, null);¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶//    	String aLangugage = getLanguage();¶    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶    	¶    }¶    @Override¶    public void setGraderBasicCommand(List<String> aCommand) {¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.EXECUTION_COMMAND, aCommand);¶    }¶    @Override¶    public  Integer getConstructorTimeOut() {¶		return getIntegerProperty(CONSTRUCTOR_TIMEOUT, DEFAULT_CONSTRUCTOR_TIME_OUT);¶	}¶    @Override¶	public  void setConstructorTimeOut(int constructorTimeOut) {¶		runtimeGraderIntegerProperties.put(CONSTRUCTOR_TIMEOUT, constructorTimeOut);¶//		BasicProjectExecution.constructorTimeOut = constructorTimeOut;¶	}¶    @Override¶	public  int getMethodTimeOut() {¶		return getIntegerProperty(METHOD_TIMEOUT, DEFAULT_METHOD_TIME_OUT);¶	}¶	@Override¶	public  void setMethodTimeOut(int methodTimeOut) {¶		runtimeGraderIntegerProperties.put(METHOD_TIMEOUT, methodTimeOut);¶¶	}¶	@Override¶	public  int getProcessTimeOut() {¶		 return getIntegerProperty(PROCESS_TIMEOUT, DEFAULT_PROCESS_TIME_OUT);¶	}	¶	¶	@Override¶	public  void setGraderProcessTimeOut(int newVal) {¶		runtimeGraderIntegerProperties.put(PROCESS_TIMEOUT, newVal);¶¶	}¶	@Override¶	public  void setStudentProcessTimeOut(int newVal) {¶		runtimeStudentIntegerProperties.put(PROCESS_TIMEOUT, newVal);¶¶	}¶	@Override¶	public  boolean isUseExecutor() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.USE_EXECEUTOR, BasicStaticConfigurationUtils.DEFAULT_USE_EXECUTOR);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public  boolean isUseMethodAndConstructorTimeOut() {¶		return getBooleanProperty(USE_METHOD_CONSTRUCTOR_TIMEOUT, true);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setGraderUseMethodAndConstructorTimeOut(¶			boolean useMethodAndConstructorTimeOut) {¶		runtimeGraderBooleanProperties.put(USE_METHOD_CONSTRUCTOR_TIMEOUT, useMethodAndConstructorTimeOut);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶	public void setStudentUseMethodAndConstructorTimeOut(¶			boolean useMethodAndConstructorTimeOut) {¶		runtimeStudentBooleanProperties.put(USE_METHOD_CONSTRUCTOR_TIMEOUT, useMethodAndConstructorTimeOut);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public  boolean isCheckAllSpecifiedTags() {¶		return getBooleanProperty(CHECK_ALL_SPECIFIED_TAGS, DEFAULT_CHECK_ALL_SPECIFIED_TAGS);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setGraderCheckAllSpecifiedTags(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(CHECK_ALL_SPECIFIED_TAGS, newVal);¶	}¶//		BasicProjectEx¶	@Override¶	public  boolean isUseProcessTimeOut() {¶		return getBooleanProperty(USE_PROCESS_TIMEOUT, true);¶	}¶	@Override¶	public  void setGraderUseProcessTimeOut(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(USE_PROCESS_TIMEOUT, newVal);¶	}¶	@Override¶	public  boolean isForkMain() {¶		return getBooleanProperty(FORK_MAIN, DEFAULT_FORK_MAIN);¶	}¶	@Override¶	public  void setGraderForkMain(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(FORK_MAIN, newVal);¶	}¶	@Override¶	public  boolean isUseProjectConfiguration() {¶		return getBooleanProperty(USE_PROJECT_CONFIGURATION, DEFAULT_USE_PROJECT_CONFIGURATION);¶	}¶	@Override¶	public  void setUseProjectConfiguration(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(USE_PROJECT_CONFIGURATION, newVal);¶	}¶	@Override¶	public  void setStudentForkMain(¶			boolean newVal) {¶		runtimeStudentBooleanProperties.put(FORK_MAIN, newVal);¶	}¶	@Override¶	public  boolean isWaitForMethodConstructorAndProcesses() {¶		return getBooleanProperty(WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES, true);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setWaitForMethodConstructorAndProcesses(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES, newVal);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶//	@Override¶//	public String getDynamicExecutionFileName() {¶////		return StaticConfigurationUtils.getInheritedStringModuleProblemProperty(AConfigurationManager.DYNAMIC_CONFIG_PROPERTY, AConfigurationManager.DYNAMIC_CONFIGURATION_FILE_NAME);¶//		return StaticConfigurationUtils.getDynamicExecutionFileName();¶//	}¶	 ¶¶	@Override¶	public String getCObjSuffix() {¶		return getDirectStringProperty(BasicStaticConfigurationUtils.C_OBJ, BasicStaticConfigurationUtils.DEFAULT_C_OBJ);¶//		return  StaticConfigurationUtils.getInheritedStringModuleProblemProperty(StaticConfigurationUtils.C_OBJ, StaticConfigurationUtils.DEFAULT_C_OBJ);¶	}¶¶	@Override¶	public String getExecutorDirectory() {¶		return getDirectStringProperty(BasicStaticConfigurationUtils.EXECUTOR, BasicStaticConfigurationUtils.DEFAULT_EXECUTOR);¶	}¶	¶	¶	¶	@Override¶    public   void setGraderModules(List<String> aModules) {¶//    	resortTime = aResortTime;¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.MODULES, aModules);¶    	¶    }¶	@Override¶    public   void setGraderModule(String aModule) {¶		List<String> aModules = new ArrayList();¶		aModules.add(aModule);¶//    	resortTime = aResortTime;¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.MODULES, aModules);¶    	¶    }¶//	@Override¶//	public String getCObjSuffix() {¶//		return getDirectStringProperty(BasicStaticConfigurationUtils.C_OBJ, BasicStaticConfigurationUtils.DEFAULT_C_OBJ);¶//¶////		return  StaticConfigurationUtils.getInheritedStringModuleProblemProperty(StaticConfigurationUtils.C_OBJ, StaticConfigurationUtils.DEFAULT_C_OBJ);¶//	}¶	@Override¶	public List<String> getModules() {¶		return getDirectListProperty(BasicStaticConfigurationUtils.MODULES, null);¶	}¶¶	@Override¶	public  boolean isReRunTests() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.RE_RUN_TESTS, BasicStaticConfigurationUtils.DEFAULT_RE_RUN_TESTS);¶	}¶	@Override¶	public  boolean isSubDocuments() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.SUB_DOCUMENTS, BasicStaticConfigurationUtils.DEFAULT_SUB_DOCUMENTS);¶	}¶	@Override¶	public  void setSubDocuments(Boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.SUB_DOCUMENTS, newVal);¶	}¶	@Override¶	public  void setReRunTests(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.RE_RUN_TESTS, newVal);¶	}¶	@Override¶	public void setUserPath(String newValue) {¶		System.setProperty(BasicStaticConfigurationUtils.USER_PATH, newValue);¶		¶	}¶	@Override¶	public String getUserPath() {¶		return System.getProperty(BasicStaticConfigurationUtils.USER_PATH);¶		¶	}¶	@Override¶	public boolean isCheckStyle() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.CHECK_STYLE, BasicStaticConfigurationUtils.DEFAULT_CHECK_STYLE);¶	}¶	@Override¶	public void setCheckStyle(boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE, newVal);¶	}¶	@Override¶	public String getCheckStyleConfiguration() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_FILE, BasicStaticConfigurationUtils.DEFAULT_CONFIGURATION_FILE);¶¶	}¶	@Override¶	public void setCheckStyleConfiguration(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_FILE, newVal);¶	}¶	@Override¶	public String getCheckStyleConfigurationDirectory() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_CONFIGURATION_DIRECTORY, BasicStaticConfigurationUtils.DEFAULT_CONFIGURATION_DIRECTORY);¶¶	}¶	@Override¶	public void setCheckStyleConfigurationDirectory(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_CONFIGURATION_DIRECTORY, newVal);¶¶		¶	}¶	@Override¶	public String getCheckStyleOutputDirectory() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_OUTPUT_DIRECTORY, BasicStaticConfigurationUtils.DEFAULT_CHECKSTYLE_OUTPUT_DIRECTORY);¶¶	}¶	@Override¶	public void setCheckStyleOutputDirectory(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_OUTPUT_DIRECTORY, newVal);¶¶		¶	}¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="81122" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:38:16 EDT 2020" docASTNodeCount="414" docActiveCodeLength="2806" docExpressionCount="347" docLength="3155" projectName="Comp524LocalChecks" starttimestamp="1597522471057" timestamp="861825645">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f20\assignment0_2\testcases\PrologGreetingLoadAndRun.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.comp524f20.assignment0_2.testcases;¶¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶import java.util.regex.Pattern;¶¶import grader.basics.BasicLanguageDependencyManager;¶import grader.basics.config.BasicExecutionSpecificationSelector;¶import grader.basics.execution.NotRunnableException;¶import grader.basics.execution.RunningProject;¶import grader.basics.junit.JUnitTestsEnvironment;¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.project.source.ABasicTextManager;¶import grader.basics.testcase.PassFailJUnitTestCase;¶import gradingTools.comp524f20.assignment0_1.testcases.AGreetingChecker;¶import gradingTools.comp524f20.assignment0_1.testcases.GreetingMainProvided;¶import gradingTools.comp524f20.assignment0_1.testcases.GreetingRun;¶import gradingTools.comp524f20.assignment4.lisp.testcases.ASequentialSumChecker;¶import gradingTools.shared.testcases.SubstringSequenceChecker;¶import gradingTools.shared.testcases.openmp.OpenMPPragma;¶import gradingTools.shared.testcases.openmp.OpenMPUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.AssignmentSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ExternalMethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.ForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.MethodSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPForSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPParallelSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.OMPSNodeUtils;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfFileSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.RootOfProgramSNode;¶import gradingTools.shared.testcases.openmp.scannedTree.SNode;¶import gradingTools.shared.testcases.utils.LinesMatchKind;¶import gradingTools.shared.testcases.utils.LinesMatcher;¶import gradingTools.utils.RunningProjectUtils;¶import util.annotations.MaxValue;¶@MaxValue(10)¶public class PrologGreetingLoadAndRun extends GreetingRun {¶	public static final int TIME_OUT_SECS = 1; // secs¶	protected SubstringSequenceChecker checker = new AGreetingChecker();	¶¶	public PrologGreetingLoadAndRun() {¶	}¶	protected RunningProject createRunningProject (Project aProject) {¶		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setLanguage(BasicLanguageDependencyManager.PROLOG_LANGUAGE);¶¶//		String aSourceFolder = aProject.getSourceFolder().getAbsolutePath();¶//		String aTestFile = aSourceFolder + "\\Greeting.pl";¶//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryPoint(aTestFile);¶//		RunningProject aRunningProject = RunningProjectUtils.runProject(aProject, TIME_OUT_SECS, "greeting().", "halt.");¶		RunningProject aRunningProject = RunningProjectUtils.runProjectandWithMainFile(aProject, "Greeting.pl", TIME_OUT_SECS, "greeting().", "halt.");¶¶		return aRunningProject;¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="81126" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:38:18 EDT 2020" docASTNodeCount="2917" docActiveCodeLength="25909" docExpressionCount="1875" docLength="35379" projectName="GraderBasics" starttimestamp="1597522471057" timestamp="861827751">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader.basics.config;¶¶import static grader.basics.config.BasicStaticConfigurationUtils.ARGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.CHECK_ALL_SPECIFIED_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.CONSTRUCTOR_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_CHECK_ALL_SPECIFIED_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_CONSTRUCTOR_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_FORK_MAIN;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_METHOD_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_PROCESS_TIME_OUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_REQUIREMENTS_LOCATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_RESOURCE_RELEASE_TIME;¶import static grader.basics.config.BasicStaticConfigurationUtils.DEFAULT_USE_PROJECT_CONFIGURATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_POINT;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_TAG;¶import static grader.basics.config.BasicStaticConfigurationUtils.ENTRY_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.FORK_MAIN;¶import static grader.basics.config.BasicStaticConfigurationUtils.METHOD_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.PROCESS_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.RESOURCE_RELEASE_TIME;¶import static grader.basics.config.BasicStaticConfigurationUtils.START_TAGS;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_METHOD_CONSTRUCTOR_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_PROCESS_TIMEOUT;¶import static grader.basics.config.BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION;¶import static grader.basics.config.BasicStaticConfigurationUtils.WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES;¶import static grader.basics.config.BasicStaticConfigurationUtils.toCompoundProperty;¶¶import java.io.File;¶import java.io.FileNotFoundException;¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶¶import grader.basics.BasicLanguageDependencyManager;¶import grader.basics.execution.BasicRunningProject;¶import util.trace.Tracer;¶/*¶ * We are duplicating code in BasicStaticConfigiration and keeping the same kind of state.¶ * So we do not really need BasicStaticConfigiration¶ * Let us keep them consistent¶ * ¶ * Actually we need all of this so we can override instance methods, which you cannot in¶ * BasicStaticSpecification.¶ */¶public class ABasicExecutionSpecification implements BasicExecutionSpecification {¶	protected List<String> emptyList = new ArrayList();¶¶¶	protected Map<String, String> runtimeGraderStringProperties = new HashMap<>();¶	protected Map<String, String> runtimeStudentStringProperties = new HashMap<>();¶	protected Map<String, Integer> runtimeGraderIntegerProperties = new HashMap<>();¶	protected Map<String, Integer> runtimeStudentIntegerProperties = new HashMap<>();¶	protected Map<String, Boolean> runtimeGraderBooleanProperties = new HashMap<>();¶	protected Map<String, Boolean> runtimeStudentBooleanProperties = new HashMap<>();¶	protected Map<String, List> runtimeGraderListProperties = new HashMap<>();¶	protected Map<String, List> runtimeStudentListProperties = new HashMap<>();¶	¶	@Override¶    public Integer getIntegerProperty(String aProperty, Integer aDefault) {¶    	Integer retVal = getInheritedIntegerModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentIntegerProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderIntegerProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public Boolean getBooleanProperty(String aProperty, Boolean aDefault) {¶    	Boolean retVal = getInheritedBooleanModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentBooleanProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderBooleanProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    ¶    @Override¶    public String getStringProperty(String aProperty, String aDefault) {¶    	String retVal = getInheritedStringModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    protected String getConfigurationDirectString(String aProperty, String aDefault) {¶    	return BasicStaticConfigurationUtils.getConfigurationBasicDirectString(aProperty, aDefault);¶    }¶    protected List getConfigurationDirectList(String aProperty, List aDefault) {¶    	return BasicStaticConfigurationUtils.getConfigurationBasicDirectList(aProperty, aDefault);¶    }¶    public String getDirectStringProperty(String aProperty, String aDefault) {¶    	String retVal = getConfigurationDirectString(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderStringProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    public List<String> getDirectListProperty(String aProperty, List<String> aDefault) {¶    	List<String> retVal = getConfigurationDirectList(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	 retVal = runtimeStudentListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public List getListProperty(String aProperty, List aDefault) {¶    	List retVal = getInheritedListModuleProblemProperty(aProperty, null);¶//		retVal = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration().getString(aProperty);  ¶		if (retVal != null) {¶			return retVal;¶		}¶    	retVal = runtimeStudentListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶//    	if (BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶    		    ¶//    	}¶    	retVal = runtimeGraderListProperties.get(aProperty);¶    	if (retVal != null) {¶    		return retVal;¶    	}¶    	return aDefault;¶    }¶    @Override¶    public void setStudentStringProperty(String aProperty, String aValue) {¶    	runtimeStudentStringProperties.put(aProperty, aValue);¶    }¶   ¶    @Override¶    public void setGraderStringProperty(String aProperty, String aValue) {¶    	runtimeGraderStringProperties.put(aProperty, aValue);¶    }¶    public  Integer getInheritedIntegerModuleProblemProperty(¶			¶			String aProperty, Integer defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedIntegerModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  List getInheritedListModuleProblemProperty(¶			¶			String aProperty, List<String> defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedListModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  String getInheritedStringModuleProblemProperty(¶			¶			String aProperty, String defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedStringModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶    public  Boolean getInheritedBooleanModuleProblemProperty(¶			¶			String aProperty, Boolean defaultValue) {¶    	return BasicStaticConfigurationUtils.getBasicInheritedBooleanModuleProblemProperty(aProperty, defaultValue);¶//    	if (!BasicStaticConfigurationUtils.isUseProjectConfiguration()) {¶//    		return defaultValue;¶//    	}¶//		return BasicStaticConfigurationUtils.getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), BasicStaticConfigurationUtils.getModule(), BasicStaticConfigurationUtils.getProblem(), aProperty, defaultValue);¶¶		¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getProcessTeams()¶	 */¶	@Override¶	public List<String> getProcessTeams() {¶		¶		return getListProperty(BasicStaticConfigurationUtils.PROCESS_TEAMS, emptyList);¶//		return processTeams;¶	}¶	@Override¶	public void resetProcessTeams() {¶		Tracer.info(this, "resetting process team: " );¶		runtimeGraderListProperties.put(BasicStaticConfigurationUtils.PROCESS_TEAMS, emptyList);¶//		processTeams = new ArrayList<>();¶//		BasicStaticConfigurationUtils.setProcessTeams(processTeams);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcessTeams(java.util.List)¶	 */¶	@Override¶	public void setProcessTeams(List<String> aProcessTeamNames) {¶		Tracer.info(this, "Setting process team: " + aProcessTeamNames);¶		runtimeGraderListProperties.put(BasicStaticConfigurationUtils.PROCESS_TEAMS, aProcessTeamNames);¶//		processTeams = aProcessTeamNames;¶//		BasicStaticConfigurationUtils.setProcessTeams(processTeams);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getProcesses(java.lang.String)¶	 */¶	@Override¶	public List<String> getProcesses(String aProcessTeam) {¶		return getListProperty(aProcessTeam, emptyList);¶//		return graderProcessTeamToProcesses.get(aProcessTeam);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcesses(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setProcesses(String aProcessTeam, List<String> aProcesses) {¶		Tracer.info(this, "Setting processes: " + aProcessTeam + " = " + aProcesses);¶		runtimeGraderListProperties.put(aProcessTeam, aProcesses);¶//		graderProcessTeamToProcesses.put(aProcessTeam, aProcesses);¶	}¶	¶	@Override¶	public List<String> getTerminatingProcesses(String aProcessTeam) {¶		return getListProperty(¶				BasicStaticConfigurationUtils.toCompoundProperty(¶						aProcessTeam, BasicStaticConfigurationUtils.TERMINATING), emptyList);¶//		return graderProcessTeamToTerminatingProcesses.get(aProcessTeam);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setProcesses(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setTerminatingProcesses(String aProcessTeam, List<String> aProcesses) {¶		Tracer.info(this, "Setting terminating processes: " + aProcessTeam + " - " + aProcesses);¶		runtimeGraderListProperties.put(¶				BasicStaticConfigurationUtils.toCompoundProperty(aProcessTeam, BasicStaticConfigurationUtils.TERMINATING),¶				aProcesses);¶		¶//		graderProcessTeamToTerminatingProcesses.put(aProcessTeam, aProcesses);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getSleepTime(java.lang.String)¶	 */¶	@Override¶	public Integer getResourceReleaseTime(String aProcess) {¶		Integer aRetVal = getIntegerProperty(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				null);¶		if (aRetVal != null)¶			return aRetVal;¶		return getResourceReleaseTime();¶				¶//		return graderProcessToSleepTime.get(aProcess);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setSleepTime(java.lang.String, int)¶	 */¶	@Override¶	public void setGraderResourceReleaseTime(String aProcess, int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time for process " + aProcess + " to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeGraderIntegerProperties.put(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				aSleepTime);¶	}¶	@Override¶	public void setStudentResourceReleaseTime(String aProcess, int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time for process " + aProcess + " to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeStudentIntegerProperties.put(¶				toCompoundProperty(aProcess, RESOURCE_RELEASE_TIME), ¶				aSleepTime);¶	}¶	@Override¶	public Integer getResourceReleaseTime() {¶		return getIntegerProperty(¶				RESOURCE_RELEASE_TIME, ¶				DEFAULT_RESOURCE_RELEASE_TIME);¶				¶//		return graderProcessToSleepTime.get(aProcess);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setSleepTime(java.lang.String, int)¶	 */¶	@Override¶	public void setGraderResourceReleaseTime(int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeGraderIntegerProperties.put(¶				RESOURCE_RELEASE_TIME, ¶				aSleepTime);¶	}¶	@Override¶	public void setStudentResourceReleaseTime (int aSleepTime) {¶		Tracer.info(this, "Setting grader resource release time to " + aSleepTime);¶//		 graderProcessToSleepTime.put(aProcess, aSleepTime);¶		runtimeStudentIntegerProperties.put(¶				RESOURCE_RELEASE_TIME, ¶				aSleepTime);¶	}¶	¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getEntrytag(java.lang.String)¶	 */¶	@Override¶	public String getEntryTag(String aProcess) {¶		return getStringProperty(¶				toCompoundProperty(aProcess, ENTRY_TAG), null);¶		¶//		return graderProcessToEntryTag.get(aProcess);¶		¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setEntryTag(java.lang.String, java.lang.String)¶	 */¶	@Override¶	public void setEntryTag(String aProcess, String anEntryTag) {¶		Tracer.info(this, "Setting entry tag processes: " + aProcess + " - " + anEntryTag);¶		runtimeGraderStringProperties.put(toCompoundProperty(aProcess, ENTRY_TAG), anEntryTag);¶//		 graderProcessToEntryTag.put(aProcess, anEntryTag);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#getArgs(java.lang.String)¶	 */¶	@Override¶	public List<String> getArgs(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, ARGS), emptyList);¶//		return graderProcessToArgs.get(aProcess);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setArgs(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setArgs(String aProcess, List<String> anArgs) {¶		Tracer.info(this, "Setting processes args: " + aProcess + " - " + anArgs);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, ARGS), anArgs);¶//		 graderProcessToArgs.put(aProcess, anEntryArgs);¶	}¶	¶	@Override¶	public List<String> getStartTags(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, START_TAGS), emptyList);¶¶//		return graderProcessToStartTags.get(aProcess);¶	}¶	/* (non-Javadoc)¶	 * @see grader.execution.ExecutionSpecification#setArgs(java.lang.String, java.util.List)¶	 */¶	@Override¶	public void setStartTags(String aProcess, List<String> newVal) {¶		Tracer.info(this, "Setting start tag processes: " + aProcess + " - " + newVal);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, START_TAGS), newVal);¶//		graderProcessToStartTags.put(aProcess, aStartTags);¶	}¶	@Override¶	public String getEntryPoint() {¶		return getStringProperty(ENTRY_POINT, null);¶¶//		return graderProcessToEntryPoint.get(aProcess);¶	}¶	@Override¶	public void setEntryPoint(String anEntryPoint) {¶		runtimeGraderStringProperties.put(ENTRY_POINT, anEntryPoint);¶//		graderProcessToEntryPoint.put(aProcess, anEntryPoint);¶	}¶¶	@Override¶	public String getEntryPoint(String aProcess) {¶		return getStringProperty(toCompoundProperty(aProcess, ENTRY_POINT), null);¶¶//		return graderProcessToEntryPoint.get(aProcess);¶	}¶¶	@Override¶	public void setEntryPoint(String aProcess, String anEntryPoint) {¶		Tracer.info(this, "Setting entry point processes: " + aProcess + " - " + anEntryPoint);¶		runtimeGraderStringProperties.put(toCompoundProperty(aProcess, ENTRY_POINT), anEntryPoint);¶//		graderProcessToEntryPoint.put(aProcess, anEntryPoint);¶	}¶¶	@Override¶	public List<String> getEntryTags(String aProcess) {¶		return getListProperty(toCompoundProperty(aProcess, ENTRY_TAGS), emptyList);¶//		return graderProcessToEntryTags.get(aProcess);¶	}¶¶	@Override¶	public void setEntryTags(String aProcess, List<String> anEntryTags) {¶		Tracer.info(this, "Setting entry tags processes: " + aProcess + " - " + anEntryTags);¶		runtimeGraderListProperties.put(toCompoundProperty(aProcess, ENTRY_TAGS), anEntryTags);¶//		graderProcessToEntryTags.put(aProcess, anEntryTags);¶		¶	}¶	¶	public static int RESORT_TIME = 100;¶	public static boolean WAIT_FOR_RESORT = true;¶¶//	protected  long resortTime = RESORT_TIME;¶//    protected  boolean waitForResort = true;¶    @Override¶    public   void setGraderResortTime(Integer aResortTime) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.RESORT_TIME, aResortTime);¶    	¶    }¶    @Override¶    public void setGraderProcessOutputWaitTime(Integer newVal) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.OUTPUT_WAIT_TIME, newVal);¶    	¶    }¶    @Override¶    public void setGraderProcessTeamOutputWaitTime(Integer newVal) {¶//    	resortTime = aResortTime;¶    	runtimeGraderIntegerProperties.put(BasicStaticConfigurationUtils.TEAM_OUTPUT_WAIT_TIME, newVal);¶    	¶    }¶    @Override¶    public  long getResortTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.RESORT_TIME, RESORT_TIME);¶    }¶    @Override¶    public  Integer getProcessOutputSleepTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.OUTPUT_WAIT_TIME, BasicRunningProject.PROCESS_OUTPUT_SLEEP_TIME);¶    }¶    @Override¶	public  Integer getProcessTeamOutputSleepTime() {¶    	return getIntegerProperty(BasicStaticConfigurationUtils.TEAM_OUTPUT_WAIT_TIME, BasicRunningProject.PROCESS_TEAM_OUTPUT_OUTPUT_SLEEP_TIME);¶¶	}¶    @Override¶    public  boolean isWaitForResort() {¶//    	return BasicStaticConfigurationUtils.isTeamProcess() && waitForResort;¶    	return BasicStaticConfigurationUtils.isTeamProcess() && getWaitForResortProperty();¶¶    }¶    @Override¶    public  void setGraderWaitForResort(boolean newVal) {¶//    	waitForResort = newVal;¶    	runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.WAIT_FOR_RESORT, newVal);¶¶    }¶    @Override¶    public boolean getWaitForResortProperty() {¶    	return getBooleanProperty(BasicStaticConfigurationUtils.WAIT_FOR_RESORT, WAIT_FOR_RESORT);¶    }¶    protected String language = null;¶    @Override¶    public String getLanguage() {¶    	if (language == null) {¶    		language = getStringProperty(BasicStaticConfigurationUtils.LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);¶    	}¶    	return language;¶//    	return getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    }¶    @Override¶    public void setLanguage(String aValue) {¶    	runtimeStudentStringProperties.put(BasicStaticConfigurationUtils.LANGUAGE, aValue);¶    }¶ ¶    protected String gradableProjectLocation = null;¶    @Override¶    public String getGradableProjectLocation() {¶    	if (gradableProjectLocation == null) {¶    		gradableProjectLocation = getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    	}¶    	return gradableProjectLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, ".");¶    }¶    @Override¶    public void setStudentGradableProjectLocation(String aValue) {¶    	File aFile = new File(aValue);¶    	if (!aFile.exists() || !aFile.isDirectory()) {¶    		FileNotFoundException anException = new FileNotFoundException("Did not find project directory:" + aValue);¶    		anException.printStackTrace();¶    	}¶    	¶    	runtimeStudentStringProperties.put(BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION, aValue);¶    }¶protected String requirementsLocation = null;¶    ¶    @Override¶    // the default value is null, so this caching will not really help¶    public String getRequirementsLocation() {¶    	if (requirementsLocation == null) {¶    		requirementsLocation = getStringProperty(BasicStaticConfigurationUtils.REQUIREMENTS_LOCATION, DEFAULT_REQUIREMENTS_LOCATION);¶    	}¶    	return sourceFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    }¶    ¶    protected String sourceFolderLocation = null;¶    ¶    @Override¶    // the default value is null, so this caching will not really help¶    public String getSourceFolderLocation() {¶    	if (sourceFolderLocation == null) {¶    		sourceFolderLocation = getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    	}¶    	return sourceFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.SOURCE_LOCATION, null);¶    }¶    protected String binaryFolderLocation = null;¶¶    @Override¶    public String getBinaryFolderLocation() {¶    	if (binaryFolderLocation == null) {¶    		binaryFolderLocation = getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    	}¶    	return binaryFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    }¶    protected String objectFolderLocation = null;¶¶    @Override¶    public String getObjectFolderLocation() {¶    	if (objectFolderLocation == null) {¶    		objectFolderLocation = getStringProperty(BasicStaticConfigurationUtils.OBJECT_LOCATION, null);¶    	}¶    	return objectFolderLocation;¶//    	return getStringProperty(BasicStaticConfigurationUtils.BINARY_LOCATION, null);¶    }¶    // should we cache these values?¶//    protected String language;¶//    @Override¶    // no caching as each project can have different language¶//    public String getLanguage() {¶//    	return getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶////    	if (language == null) {¶////    		language = getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶////    	}¶////    	return language;¶////    	return getStringProperty(BasicStaticConfigurationUtils.LANGUAGE,BasicLanguageDependencyManager.JAVA_LANGUAGE);¶//    }¶//    // no caching as ¶//    @Override¶//    public List<String> getBasicCommand() {¶//    	List<String> aCommand = getInheritedListModuleProblemProperty(BasicStaticConfigurationUtils.EXECUTION_COMMAND, null);¶//    	if (aCommand != null && !aCommand.isEmpty()) {¶//    		return aCommand;¶//    	}¶////    	String aLangugage = getLanguage();¶//    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶//    	¶//    }¶    @Override¶    public List<String> getBasicCommand(String aProcess) {¶    	String aProperty = toCompoundProperty(aProcess, BasicStaticConfigurationUtils.EXECUTION_COMMAND);¶    	List<String> aCommand = getListProperty(aProperty, null);¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶    	aCommand = getBasicCommand(); // more inheritance¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶//    	String aLangugage = getLanguage();¶    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶    	¶    }¶    @Override¶    public void setGraderBasicCommand(String aProcess, List<String> aCommand) {¶    	String aProperty = toCompoundProperty(aProcess, BasicStaticConfigurationUtils.EXECUTION_COMMAND);¶    	runtimeGraderListProperties.put(aProperty, aCommand);¶    }¶    // no caching as ¶    @Override¶    public List<String> getBasicCommand() {¶    	List<String> aCommand = getListProperty(BasicStaticConfigurationUtils.EXECUTION_COMMAND, null);¶    	if (aCommand != null && !aCommand.isEmpty()) {¶    		return aCommand;¶    	}¶//    	String aLangugage = getLanguage();¶    	return BasicLanguageDependencyManager.getMainClassFinder().getDefaultCommand();¶    	¶    }¶    @Override¶    public void setGraderBasicCommand(List<String> aCommand) {¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.EXECUTION_COMMAND, aCommand);¶    }¶    @Override¶    public  Integer getConstructorTimeOut() {¶		return getIntegerProperty(CONSTRUCTOR_TIMEOUT, DEFAULT_CONSTRUCTOR_TIME_OUT);¶	}¶    @Override¶	public  void setConstructorTimeOut(int constructorTimeOut) {¶		runtimeGraderIntegerProperties.put(CONSTRUCTOR_TIMEOUT, constructorTimeOut);¶//		BasicProjectExecution.constructorTimeOut = constructorTimeOut;¶	}¶    @Override¶	public  int getMethodTimeOut() {¶		return getIntegerProperty(METHOD_TIMEOUT, DEFAULT_METHOD_TIME_OUT);¶	}¶	@Override¶	public  void setMethodTimeOut(int methodTimeOut) {¶		runtimeGraderIntegerProperties.put(METHOD_TIMEOUT, methodTimeOut);¶¶	}¶	@Override¶	public  int getProcessTimeOut() {¶		 return getIntegerProperty(PROCESS_TIMEOUT, DEFAULT_PROCESS_TIME_OUT);¶	}	¶	¶	@Override¶	public  void setGraderProcessTimeOut(int newVal) {¶		runtimeGraderIntegerProperties.put(PROCESS_TIMEOUT, newVal);¶¶	}¶	@Override¶	public  void setStudentProcessTimeOut(int newVal) {¶		runtimeStudentIntegerProperties.put(PROCESS_TIMEOUT, newVal);¶¶	}¶	@Override¶	public  boolean isUseExecutor() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.USE_EXECEUTOR, BasicStaticConfigurationUtils.DEFAULT_USE_EXECUTOR);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public  boolean isUseMethodAndConstructorTimeOut() {¶		return getBooleanProperty(USE_METHOD_CONSTRUCTOR_TIMEOUT, true);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setGraderUseMethodAndConstructorTimeOut(¶			boolean useMethodAndConstructorTimeOut) {¶		runtimeGraderBooleanProperties.put(USE_METHOD_CONSTRUCTOR_TIMEOUT, useMethodAndConstructorTimeOut);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶	public void setStudentUseMethodAndConstructorTimeOut(¶			boolean useMethodAndConstructorTimeOut) {¶		runtimeStudentBooleanProperties.put(USE_METHOD_CONSTRUCTOR_TIMEOUT, useMethodAndConstructorTimeOut);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public  boolean isCheckAllSpecifiedTags() {¶		return getBooleanProperty(CHECK_ALL_SPECIFIED_TAGS, DEFAULT_CHECK_ALL_SPECIFIED_TAGS);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setGraderCheckAllSpecifiedTags(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(CHECK_ALL_SPECIFIED_TAGS, newVal);¶	}¶//		BasicProjectEx¶	@Override¶	public  boolean isUseProcessTimeOut() {¶		return getBooleanProperty(USE_PROCESS_TIMEOUT, true);¶	}¶	@Override¶	public  void setGraderUseProcessTimeOut(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(USE_PROCESS_TIMEOUT, newVal);¶	}¶	@Override¶	public  boolean isForkMain() {¶		return getBooleanProperty(FORK_MAIN, DEFAULT_FORK_MAIN);¶	}¶	@Override¶	public  void setGraderForkMain(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(FORK_MAIN, newVal);¶	}¶	@Override¶	public  boolean isUseProjectConfiguration() {¶		return getBooleanProperty(USE_PROJECT_CONFIGURATION, DEFAULT_USE_PROJECT_CONFIGURATION);¶	}¶	@Override¶	public  void setUseProjectConfiguration(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(USE_PROJECT_CONFIGURATION, newVal);¶	}¶	@Override¶	public  void setStudentForkMain(¶			boolean newVal) {¶		runtimeStudentBooleanProperties.put(FORK_MAIN, newVal);¶	}¶	@Override¶	public  boolean isWaitForMethodConstructorAndProcesses() {¶		return getBooleanProperty(WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES, true);¶//		return useMethodAndConstructorTimeOut;¶	}¶	@Override¶	public void setWaitForMethodConstructorAndProcesses(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES, newVal);¶//		BasicProjectExecution.useMethodAndConstructorTimeOut = useMethodAndConstructorTimeOut;¶	}¶//	@Override¶//	public String getDynamicExecutionFileName() {¶////		return StaticConfigurationUtils.getInheritedStringModuleProblemProperty(AConfigurationManager.DYNAMIC_CONFIG_PROPERTY, AConfigurationManager.DYNAMIC_CONFIGURATION_FILE_NAME);¶//		return StaticConfigurationUtils.getDynamicExecutionFileName();¶//	}¶	 ¶¶	@Override¶	public String getCObjSuffix() {¶		return getDirectStringProperty(BasicStaticConfigurationUtils.C_OBJ, BasicStaticConfigurationUtils.DEFAULT_C_OBJ);¶//		return  StaticConfigurationUtils.getInheritedStringModuleProblemProperty(StaticConfigurationUtils.C_OBJ, StaticConfigurationUtils.DEFAULT_C_OBJ);¶	}¶¶	@Override¶	public String getExecutorDirectory() {¶		return getDirectStringProperty(BasicStaticConfigurationUtils.EXECUTOR, BasicStaticConfigurationUtils.DEFAULT_EXECUTOR);¶	}¶	¶	¶	¶	@Override¶    public   void setGraderModules(List<String> aModules) {¶//    	resortTime = aResortTime;¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.MODULES, aModules);¶    	¶    }¶	@Override¶    public   void setGraderModule(String aModule) {¶		List<String> aModules = new ArrayList();¶		aModules.add(aModule);¶//    	resortTime = aResortTime;¶    	runtimeGraderListProperties.put(BasicStaticConfigurationUtils.MODULES, aModules);¶    	¶    }¶//	@Override¶//	public String getCObjSuffix() {¶//		return getDirectStringProperty(BasicStaticConfigurationUtils.C_OBJ, BasicStaticConfigurationUtils.DEFAULT_C_OBJ);¶//¶////		return  StaticConfigurationUtils.getInheritedStringModuleProblemProperty(StaticConfigurationUtils.C_OBJ, StaticConfigurationUtils.DEFAULT_C_OBJ);¶//	}¶	@Override¶	public List<String> getModules() {¶		return getDirectListProperty(BasicStaticConfigurationUtils.MODULES, null);¶	}¶¶	@Override¶	public  boolean isReRunTests() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.RE_RUN_TESTS, BasicStaticConfigurationUtils.DEFAULT_RE_RUN_TESTS);¶	}¶	@Override¶	public  boolean isSubDocuments() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.SUB_DOCUMENTS, BasicStaticConfigurationUtils.DEFAULT_SUB_DOCUMENTS);¶	}¶	@Override¶	public  void setSubDocuments(Boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.SUB_DOCUMENTS, newVal);¶	}¶	@Override¶	public  void setReRunTests(¶			boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.RE_RUN_TESTS, newVal);¶	}¶	@Override¶	public void setUserPath(String newValue) {¶		System.setProperty(BasicStaticConfigurationUtils.USER_PATH, newValue);¶		¶	}¶	@Override¶	public String getUserPath() {¶		return System.getProperty(BasicStaticConfigurationUtils.USER_PATH);¶		¶	}¶	@Override¶	public boolean isCheckStyle() {¶		return getBooleanProperty(BasicStaticConfigurationUtils.CHECK_STYLE, BasicStaticConfigurationUtils.DEFAULT_CHECK_STYLE);¶	}¶	@Override¶	public void setCheckStyle(boolean newVal) {¶		runtimeGraderBooleanProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE, newVal);¶	}¶	@Override¶	public String getCheckStyleConfiguration() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_FILE, BasicStaticConfigurationUtils.DEFAULT_CONFIGURATION_FILE);¶¶	}¶	@Override¶	public void setCheckStyleConfiguration(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_FILE, newVal);¶	}¶	@Override¶	public String getCheckStyleConfigurationDirectory() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_CONFIGURATION_DIRECTORY, BasicStaticConfigurationUtils.DEFAULT_CONFIGURATION_DIRECTORY);¶¶	}¶	@Override¶	public void setCheckStyleConfigurationDirectory(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_CONFIGURATION_DIRECTORY, newVal);¶¶		¶	}¶	@Override¶	public String getCheckStyleOutputDirectory() {¶		return getStringProperty(BasicStaticConfigurationUtils.CHECK_STYLE_OUTPUT_DIRECTORY, BasicStaticConfigurationUtils.DEFAULT_CHECKSTYLE_OUTPUT_DIRECTORY);¶¶	}¶	@Override¶	public void setCheckStyleOutputDirectory(String newVal) {¶		runtimeGraderStringProperties.put(BasicStaticConfigurationUtils.CHECK_STYLE_OUTPUT_DIRECTORY, newVal);¶¶		¶	}¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="81157" _type="EHExceptionCommand" date="Tue Aug 25 15:39:36 EDT 2020" starttimestamp="1597522471057" timestamp="861904991" type="Exception">
    <outputString><![CDATA[Writing to logger:framework.logging.loggers.CsvLogger@7d6c604a
Writing to logger:framework.logging.loggers.FeedbackTextSummaryLogger@16554f99
Writing to logger:framework.logging.loggers.FeedbackJsonLogger@43357f61
]]></outputString>
  </Command>
  <Command __id="81158" _type="ShellCommand" date="Tue Aug 25 15:39:36 EDT 2020" starttimestamp="1597522471057" timestamp="861905200" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81159" _type="EHExceptionCommand" date="Tue Aug 25 15:39:36 EDT 2020" starttimestamp="1597522471057" timestamp="861905218" type="Exception">
    <outputString><![CDATA[Auto Grading Time: Total: 0:10:48 Average: 0:0:16
Manual Grading Time: Total: 68:37:29 Average: 1:42:56
Number of Feature Notes: Total: 2 Average: 0.05
Number of Source Notes: Total: 40 Average: 1.0

]]></outputString>
  </Command>
  <Command __id="81160" _type="RunCommand" date="Tue Aug 25 15:39:36 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="861905382" type="Debug" />
  <Command __id="81161" _type="RunCommand" date="Tue Aug 25 15:39:36 EDT 2020" kind="HitBreakPoint" projectName="Comp524AllChecks" starttimestamp="1597522471057" timestamp="861905383" type="Run" />
  <Command __id="81162" _type="RunCommand" date="Tue Aug 25 15:39:36 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="861905383" type="Debug" />
  <Command __id="81163" _type="RunCommand" date="Tue Aug 25 15:39:36 EDT 2020" kind="HitBreakPoint" projectName="Comp524AllChecks" starttimestamp="1597522471057" timestamp="861905383" type="Run" />
  <Command __id="81166" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:40:21 EDT 2020" starttimestamp="1597522471057" timestamp="861950496" />
  <Command __id="81167" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:40:21 EDT 2020" starttimestamp="1597522471057" timestamp="861950509" />
  <Command __id="81168" _type="MoveCaretCommand" caretOffset="150" date="Tue Aug 25 15:40:24 EDT 2020" docOffset="597" starttimestamp="1597522471057" timestamp="861953218" />
  <Command __id="81169" _type="MoveCaretCommand" caretOffset="151" date="Tue Aug 25 15:40:44 EDT 2020" docOffset="598" starttimestamp="1597522471057" timestamp="861973906" />
  <Command __id="81170" _type="SelectTextCommand" caretOffset="153" date="Tue Aug 25 15:40:45 EDT 2020" end="153" start="143" starttimestamp="1597522471057" timestamp="861974078" />
  <Command __id="81171" _type="SelectTextCommand" caretOffset="157" date="Tue Aug 25 15:40:45 EDT 2020" end="157" start="88" starttimestamp="1597522471057" timestamp="861974270" />
  <Command __id="81172" _type="CopyCommand" date="Tue Aug 25 15:40:46 EDT 2020" starttimestamp="1597522471057" timestamp="861975199" />
  <Command __id="81173" _type="MoveCaretCommand" caretOffset="155" date="Tue Aug 25 15:40:47 EDT 2020" docOffset="602" starttimestamp="1597522471057" timestamp="861976309" />
  <Command __id="81175" _type="InsertStringCommand" date="Tue Aug 25 15:40:47 EDT 2020" starttimestamp="1597522471057" timestamp="861976773" timestamp2="861976773">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81177" _type="PasteCommand" date="Tue Aug 25 15:40:48 EDT 2020" starttimestamp="1597522471057" timestamp="861977472" />
  <Command __id="81178" _type="MoveCaretCommand" caretOffset="91" date="Tue Aug 25 15:40:50 EDT 2020" docOffset="538" starttimestamp="1597522471057" timestamp="861979665" />
  <Command __id="81180" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 15:40:51 EDT 2020" starttimestamp="1597522471057" timestamp="861980316" />
  <Command __id="81164" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:40:19 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12204" docExpressionCount="1013" docLength="12637" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="861948171">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();

    private static final String GRADER_SOURCE_DIRECTORY = "source";

    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
                int assignmentNum = Integer.parseInt(args[1]);
                setAssignment(args[0], assignmentNum);
            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="81174" _type="Insert" date="Tue Aug 25 15:40:47 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12210" docExpressionCount="1013" docLength="12643" length="6" offset="602" starttimestamp="1597522471057" timestamp="861976766">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="81176" _type="Replace" date="Tue Aug 25 15:40:48 EDT 2020" docASTNodeCount="1592" docActiveCodeLength="12275" docExpressionCount="1016" docLength="12708" endLine="21" insertionLength="69" int_docASTNodeCount="1583" int_docActiveCodeLength="12206" int_docExpressionCount="1013" int_docLength="12639" length="4" offset="604" startLine="21" starttimestamp="1597522471057" timestamp="861977448">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81179" _type="Insert" date="Tue Aug 25 15:40:51 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12208" docExpressionCount="1013" docLength="12710" length="2" offset="535" starttimestamp="1597522471057" timestamp="861980295">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="81182" _type="Delete" date="Tue Aug 25 15:40:55 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12207" docExpressionCount="1013" docLength="12709" endLine="21" length="1" offset="667" startLine="21" starttimestamp="1597522471057" timestamp="861984344">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="81184" _type="Delete" date="Tue Aug 25 15:40:55 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12206" docExpressionCount="1013" docLength="12708" endLine="21" length="1" offset="666" startLine="21" starttimestamp="1597522471057" timestamp="861984501">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="81186" _type="Delete" date="Tue Aug 25 15:40:55 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12205" docExpressionCount="1013" docLength="12707" endLine="21" length="1" offset="665" startLine="21" starttimestamp="1597522471057" timestamp="861984656">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <Command __id="81181" _type="MoveCaretCommand" caretOffset="221" date="Tue Aug 25 15:40:54 EDT 2020" docOffset="668" starttimestamp="1597522471057" timestamp="861983641" />
  <Command __id="81183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:40:55 EDT 2020" starttimestamp="1597522471057" timestamp="861984346" />
  <Command __id="81185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:40:55 EDT 2020" starttimestamp="1597522471057" timestamp="861984504" />
  <Command __id="81187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:40:55 EDT 2020" starttimestamp="1597522471057" timestamp="861984658" />
  <Command __id="81189" _type="InsertStringCommand" date="Tue Aug 25 15:40:56 EDT 2020" starttimestamp="1597522471057" timestamp="861985684" timestamp2="861985684">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="81191" _type="InsertStringCommand" date="Tue Aug 25 15:40:56 EDT 2020" starttimestamp="1597522471057" timestamp="861985934" timestamp2="861985934">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="81193" _type="InsertStringCommand" date="Tue Aug 25 15:40:57 EDT 2020" starttimestamp="1597522471057" timestamp="861986229" timestamp2="861986229">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="81194" _type="MoveCaretCommand" caretOffset="224" date="Tue Aug 25 15:40:59 EDT 2020" docOffset="671" starttimestamp="1597522471057" timestamp="861987995" />
  <Command __id="81196" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:40:59 EDT 2020" starttimestamp="1597522471057" timestamp="861988492" />
  <Command __id="81198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:40:59 EDT 2020" starttimestamp="1597522471057" timestamp="861988628" />
  <Command __id="81200" _type="InsertStringCommand" date="Tue Aug 25 15:41:00 EDT 2020" starttimestamp="1597522471057" timestamp="861989391" timestamp2="861989391">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="81202" _type="InsertStringCommand" date="Tue Aug 25 15:41:00 EDT 2020" starttimestamp="1597522471057" timestamp="861989624" timestamp2="861989624">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="81206" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:41:03 EDT 2020" starttimestamp="1597522471057" timestamp="861992106" />
  <Command __id="81207" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:41:03 EDT 2020" starttimestamp="1597522471057" timestamp="861992111" />
  <Command __id="81208" _type="MoveCaretCommand" caretOffset="280" date="Tue Aug 25 15:41:05 EDT 2020" docOffset="727" starttimestamp="1597522471057" timestamp="861994172" />
  <Command __id="81209" _type="SelectTextCommand" caretOffset="284" date="Tue Aug 25 15:41:05 EDT 2020" end="284" start="259" starttimestamp="1597522471057" timestamp="861994200" />
  <Command __id="81210" _type="SelectTextCommand" caretOffset="291" date="Tue Aug 25 15:41:05 EDT 2020" end="291" start="230" starttimestamp="1597522471057" timestamp="861994407" />
  <Command __id="81211" _type="CopyCommand" date="Tue Aug 25 15:41:07 EDT 2020" starttimestamp="1597522471057" timestamp="861996392" />
  <Command __id="81212" _type="MoveCaretCommand" caretOffset="228" date="Tue Aug 25 15:41:09 EDT 2020" docOffset="675" starttimestamp="1597522471057" timestamp="861998226" />
  <Command __id="81215" _type="ShellCommand" date="Tue Aug 25 15:42:18 EDT 2020" starttimestamp="1597522471057" timestamp="862067045" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81216" _type="ShellCommand" date="Tue Aug 25 15:43:33 EDT 2020" starttimestamp="1597522471057" timestamp="862142554" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81217" _type="MoveCaretCommand" caretOffset="636" date="Tue Aug 25 15:43:33 EDT 2020" docOffset="1083" starttimestamp="1597522471057" timestamp="862142697" />
  <Command __id="81218" _type="ShellCommand" date="Tue Aug 25 15:43:39 EDT 2020" starttimestamp="1597522471057" timestamp="862148298" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81219" _type="ShellCommand" date="Tue Aug 25 15:46:44 EDT 2020" starttimestamp="1597522471057" timestamp="862333245" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81220" _type="MoveCaretCommand" caretOffset="636" date="Tue Aug 25 15:46:44 EDT 2020" docOffset="1083" starttimestamp="1597522471057" timestamp="862333301" />
  <Command __id="81221" _type="MoveCaretCommand" caretOffset="12238" date="Tue Aug 25 15:47:19 EDT 2020" docOffset="12685" starttimestamp="1597522471057" timestamp="862368617" />
  <Command __id="81223" _type="ShellCommand" date="Tue Aug 25 15:47:20 EDT 2020" starttimestamp="1597522471057" timestamp="862369732" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81224" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 15:47:23 EDT 2020" forward="true" matchWord="false" offset="12685" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="862372582" wrapSearch="true">
    <searchString><![CDATA[main]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81225" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 15:47:24 EDT 2020" forward="true" matchWord="false" offset="1199" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="862373692" wrapSearch="true">
    <searchString><![CDATA[main]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81226" _type="ShellCommand" date="Tue Aug 25 15:47:31 EDT 2020" starttimestamp="1597522471057" timestamp="862380681" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81227" _type="MoveCaretCommand" caretOffset="3848" date="Tue Aug 25 15:47:35 EDT 2020" docOffset="4295" starttimestamp="1597522471057" timestamp="862384663" />
  <Command __id="81228" _type="MoveCaretCommand" caretOffset="3783" date="Tue Aug 25 15:47:39 EDT 2020" docOffset="4230" starttimestamp="1597522471057" timestamp="862388934" />
  <Command __id="81229" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Tue Aug 25 15:47:41 EDT 2020" starttimestamp="1597522471057" timestamp="862390002" />
  <Command __id="81230" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Tue Aug 25 15:47:43 EDT 2020" starttimestamp="1597522471057" timestamp="862392699" />
  <Command __id="81231" _type="MoveCaretCommand" caretOffset="3905" date="Tue Aug 25 15:47:53 EDT 2020" docOffset="4352" starttimestamp="1597522471057" timestamp="862402673" />
  <Command __id="81232" _type="MoveCaretCommand" caretOffset="3906" date="Tue Aug 25 15:47:54 EDT 2020" docOffset="4353" starttimestamp="1597522471057" timestamp="862403485" />
  <Command __id="81233" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Tue Aug 25 15:47:55 EDT 2020" starttimestamp="1597522471057" timestamp="862404264" />
  <Command __id="81234" _type="SelectTextCommand" caretOffset="4727" date="Tue Aug 25 15:48:02 EDT 2020" end="4934" start="4727" starttimestamp="1597522471057" timestamp="862411815" />
  <Command __id="81235" _type="CopyCommand" date="Tue Aug 25 15:48:03 EDT 2020" starttimestamp="1597522471057" timestamp="862412505" />
  <Command __id="81236" _type="MoveCaretCommand" caretOffset="4934" date="Tue Aug 25 15:48:04 EDT 2020" docOffset="5381" starttimestamp="1597522471057" timestamp="862413443" />
  <Command __id="81238" _type="InsertStringCommand" date="Tue Aug 25 15:48:04 EDT 2020" starttimestamp="1597522471057" timestamp="862413880" timestamp2="862413880">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81240" _type="PasteCommand" date="Tue Aug 25 15:48:05 EDT 2020" starttimestamp="1597522471057" timestamp="862414550" />
  <Command __id="81241" _type="MoveCaretCommand" caretOffset="4987" date="Tue Aug 25 15:48:07 EDT 2020" docOffset="5434" starttimestamp="1597522471057" timestamp="862416203" />
  <Command __id="81242" _type="SelectTextCommand" caretOffset="4990" date="Tue Aug 25 15:48:07 EDT 2020" end="4990" start="4987" starttimestamp="1597522471057" timestamp="862416434" />
  <Command __id="81244" _type="InsertStringCommand" date="Tue Aug 25 15:48:07 EDT 2020" starttimestamp="1597522471057" timestamp="862416889" timestamp2="862416889">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81246" _type="InsertStringCommand" date="Tue Aug 25 15:48:08 EDT 2020" starttimestamp="1597522471057" timestamp="862417442" timestamp2="862417442">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81248" _type="InsertStringCommand" date="Tue Aug 25 15:48:08 EDT 2020" starttimestamp="1597522471057" timestamp="862417460" timestamp2="862417460">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81250" _type="InsertStringCommand" date="Tue Aug 25 15:48:08 EDT 2020" starttimestamp="1597522471057" timestamp="862417481" timestamp2="862417481">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81252" _type="InsertStringCommand" date="Tue Aug 25 15:48:08 EDT 2020" starttimestamp="1597522471057" timestamp="862417501" timestamp2="862417501">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81254" _type="InsertStringCommand" date="Tue Aug 25 15:48:08 EDT 2020" starttimestamp="1597522471057" timestamp="862417712" timestamp2="862417712">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81255" _type="MoveCaretCommand" caretOffset="5075" date="Tue Aug 25 15:48:11 EDT 2020" docOffset="5522" starttimestamp="1597522471057" timestamp="862420012" />
  <Command __id="81256" _type="SelectTextCommand" caretOffset="5077" date="Tue Aug 25 15:48:11 EDT 2020" end="5077" start="5071" starttimestamp="1597522471057" timestamp="862420219" />
  <Command __id="81257" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:48:18 EDT 2020" starttimestamp="1597522471057" timestamp="862427425" />
  <Command __id="81258" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:48:18 EDT 2020" starttimestamp="1597522471057" timestamp="862427541" />
  <Command __id="81259" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:48:18 EDT 2020" starttimestamp="1597522471057" timestamp="862427636" />
  <Command __id="81261" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Tue Aug 25 15:48:24 EDT 2020" starttimestamp="1597522471057" timestamp="862433411" />
  <Command __id="81262" _type="MoveCaretCommand" caretOffset="3437" date="Tue Aug 25 15:48:34 EDT 2020" docOffset="3884" starttimestamp="1597522471057" timestamp="862443412" />
  <Command __id="81263" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Tue Aug 25 15:48:35 EDT 2020" starttimestamp="1597522471057" timestamp="862444090" />
  <Command __id="81264" _type="MoveCaretCommand" caretOffset="271" date="Tue Aug 25 15:48:35 EDT 2020" docOffset="718" starttimestamp="1597522471057" timestamp="862444882" />
  <Command __id="81265" _type="SelectTextCommand" caretOffset="284" date="Tue Aug 25 15:48:36 EDT 2020" end="284" start="259" starttimestamp="1597522471057" timestamp="862445037" />
  <Command __id="81266" _type="SelectTextCommand" caretOffset="291" date="Tue Aug 25 15:48:36 EDT 2020" end="291" start="230" starttimestamp="1597522471057" timestamp="862445223" />
  <Command __id="81267" _type="CopyCommand" date="Tue Aug 25 15:48:36 EDT 2020" starttimestamp="1597522471057" timestamp="862445787" />
  <Command __id="81268" _type="MoveCaretCommand" caretOffset="289" date="Tue Aug 25 15:48:38 EDT 2020" docOffset="736" starttimestamp="1597522471057" timestamp="862447104" />
  <Command __id="81270" _type="InsertStringCommand" date="Tue Aug 25 15:48:38 EDT 2020" starttimestamp="1597522471057" timestamp="862447500" timestamp2="862447500">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81272" _type="PasteCommand" date="Tue Aug 25 15:48:39 EDT 2020" starttimestamp="1597522471057" timestamp="862448159" />
  <DocumentChange __id="81188" _type="Insert" date="Tue Aug 25 15:40:56 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12206" docExpressionCount="1013" docLength="12708" length="1" offset="665" starttimestamp="1597522471057" timestamp="861985681">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="81190" _type="Insert" date="Tue Aug 25 15:40:56 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12207" docExpressionCount="1013" docLength="12709" length="1" offset="666" starttimestamp="1597522471057" timestamp="861985931">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="81192" _type="Insert" date="Tue Aug 25 15:40:57 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12208" docExpressionCount="1013" docLength="12710" length="1" offset="667" starttimestamp="1597522471057" timestamp="861986226">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <DocumentChange __id="81195" _type="Delete" date="Tue Aug 25 15:40:59 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12207" docExpressionCount="1013" docLength="12709" endLine="21" length="1" offset="670" startLine="21" starttimestamp="1597522471057" timestamp="861988490">
    <text><![CDATA[8]]></text>
  </DocumentChange>
  <DocumentChange __id="81197" _type="Delete" date="Tue Aug 25 15:40:59 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12206" docExpressionCount="1013" docLength="12708" endLine="21" length="1" offset="669" startLine="21" starttimestamp="1597522471057" timestamp="861988627">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="81199" _type="Insert" date="Tue Aug 25 15:41:00 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12207" docExpressionCount="1013" docLength="12709" length="1" offset="669" starttimestamp="1597522471057" timestamp="861989389">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="81201" _type="Insert" date="Tue Aug 25 15:41:00 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12208" docExpressionCount="1013" docLength="12710" length="1" offset="670" starttimestamp="1597522471057" timestamp="861989622">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="81237" _type="Insert" date="Tue Aug 25 15:48:04 EDT 2020" docASTNodeCount="1583" docActiveCodeLength="12214" docExpressionCount="1013" docLength="12716" length="6" offset="5381" starttimestamp="1597522471057" timestamp="862413863">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="81239" _type="Replace" date="Tue Aug 25 15:48:05 EDT 2020" docASTNodeCount="1614" docActiveCodeLength="12419" docExpressionCount="1032" docLength="12921" endLine="117" insertionLength="209" int_docASTNodeCount="1583" int_docActiveCodeLength="12210" int_docExpressionCount="1013" int_docLength="12712" length="4" offset="5383" startLine="117" starttimestamp="1597522471057" timestamp="862414513">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81243" _type="Replace" date="Tue Aug 25 15:48:07 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12417" docExpressionCount="1033" docLength="12919" endLine="117" insertionLength="1" int_docASTNodeCount="1593" int_docActiveCodeLength="12416" int_docExpressionCount="1016" int_docLength="12918" length="3" offset="5434" startLine="117" starttimestamp="1597522471057" timestamp="862416871">
    <deletedText><![CDATA[int]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81245" _type="Insert" date="Tue Aug 25 15:48:08 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12418" docExpressionCount="1033" docLength="12920" length="1" offset="5435" starttimestamp="1597522471057" timestamp="862417432">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81247" _type="Insert" date="Tue Aug 25 15:48:08 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12419" docExpressionCount="1033" docLength="12921" length="1" offset="5436" starttimestamp="1597522471057" timestamp="862417450">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81249" _type="Insert" date="Tue Aug 25 15:48:08 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12420" docExpressionCount="1033" docLength="12922" length="1" offset="5437" starttimestamp="1597522471057" timestamp="862417470">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81251" _type="Insert" date="Tue Aug 25 15:48:08 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12421" docExpressionCount="1033" docLength="12923" length="1" offset="5438" starttimestamp="1597522471057" timestamp="862417493">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81253" _type="Insert" date="Tue Aug 25 15:48:08 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12422" docExpressionCount="1033" docLength="12924" length="1" offset="5439" starttimestamp="1597522471057" timestamp="862417702">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81269" _type="Insert" date="Tue Aug 25 15:48:38 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12428" docExpressionCount="1033" docLength="12930" length="6" offset="736" starttimestamp="1597522471057" timestamp="862447489">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="81271" _type="Replace" date="Tue Aug 25 15:48:39 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12485" docExpressionCount="1035" docLength="12987" endLine="24" insertionLength="61" int_docASTNodeCount="1615" int_docActiveCodeLength="12424" int_docExpressionCount="1033" int_docLength="12926" length="4" offset="738" startLine="24" starttimestamp="1597522471057" timestamp="862448140">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81275" _type="Replace" date="Tue Aug 25 15:48:41 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12483" docExpressionCount="1036" docLength="12985" endLine="24" insertionLength="1" int_docASTNodeCount="1615" int_docActiveCodeLength="12482" int_docExpressionCount="1033" int_docLength="12984" length="3" offset="763" startLine="24" starttimestamp="1597522471057" timestamp="862450521">
    <deletedText><![CDATA[int]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81277" _type="Insert" date="Tue Aug 25 15:48:41 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12484" docExpressionCount="1036" docLength="12986" length="1" offset="764" starttimestamp="1597522471057" timestamp="862450625">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81279" _type="Insert" date="Tue Aug 25 15:48:42 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12485" docExpressionCount="1036" docLength="12987" length="1" offset="765" starttimestamp="1597522471057" timestamp="862451084">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81281" _type="Delete" date="Tue Aug 25 15:48:42 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12484" docExpressionCount="1036" docLength="12986" endLine="24" length="1" offset="765" startLine="24" starttimestamp="1597522471057" timestamp="862451476">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81283" _type="Delete" date="Tue Aug 25 15:48:42 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12483" docExpressionCount="1036" docLength="12985" endLine="24" length="1" offset="764" startLine="24" starttimestamp="1597522471057" timestamp="862451607">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81285" _type="Delete" date="Tue Aug 25 15:48:42 EDT 2020" docASTNodeCount="1615" docActiveCodeLength="12482" docExpressionCount="1033" docLength="12984" endLine="24" length="1" offset="763" startLine="24" starttimestamp="1597522471057" timestamp="862451762">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81287" _type="Insert" date="Tue Aug 25 15:48:43 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12483" docExpressionCount="1036" docLength="12985" length="1" offset="763" starttimestamp="1597522471057" timestamp="862452114">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="81273" _type="MoveCaretCommand" caretOffset="317" date="Tue Aug 25 15:48:40 EDT 2020" docOffset="764" starttimestamp="1597522471057" timestamp="862449927" />
  <Command __id="81274" _type="SelectTextCommand" caretOffset="319" date="Tue Aug 25 15:48:41 EDT 2020" end="319" start="316" starttimestamp="1597522471057" timestamp="862450121" />
  <Command __id="81276" _type="InsertStringCommand" date="Tue Aug 25 15:48:41 EDT 2020" starttimestamp="1597522471057" timestamp="862450529" timestamp2="862450529">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81278" _type="InsertStringCommand" date="Tue Aug 25 15:48:41 EDT 2020" starttimestamp="1597522471057" timestamp="862450630" timestamp2="862450630">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81280" _type="InsertStringCommand" date="Tue Aug 25 15:48:42 EDT 2020" starttimestamp="1597522471057" timestamp="862451089" timestamp2="862451089">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81282" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:42 EDT 2020" starttimestamp="1597522471057" timestamp="862451481" />
  <Command __id="81284" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:42 EDT 2020" starttimestamp="1597522471057" timestamp="862451609" />
  <Command __id="81286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:42 EDT 2020" starttimestamp="1597522471057" timestamp="862451766" />
  <Command __id="81288" _type="InsertStringCommand" date="Tue Aug 25 15:48:43 EDT 2020" starttimestamp="1597522471057" timestamp="862452119" timestamp2="862452119">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81290" _type="InsertStringCommand" date="Tue Aug 25 15:48:43 EDT 2020" starttimestamp="1597522471057" timestamp="862452399" timestamp2="862452399">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81292" _type="InsertStringCommand" date="Tue Aug 25 15:48:43 EDT 2020" starttimestamp="1597522471057" timestamp="862452451" timestamp2="862452451">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81294" _type="InsertStringCommand" date="Tue Aug 25 15:48:43 EDT 2020" starttimestamp="1597522471057" timestamp="862452566" timestamp2="862452566">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81296" _type="InsertStringCommand" date="Tue Aug 25 15:48:43 EDT 2020" starttimestamp="1597522471057" timestamp="862452757" timestamp2="862452757">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81298" _type="InsertStringCommand" date="Tue Aug 25 15:48:44 EDT 2020" starttimestamp="1597522471057" timestamp="862452983" timestamp2="862452983">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81299" _type="MoveCaretCommand" caretOffset="348" date="Tue Aug 25 15:48:45 EDT 2020" docOffset="795" starttimestamp="1597522471057" timestamp="862454920" />
  <Command __id="81301" _type="InsertStringCommand" date="Tue Aug 25 15:48:46 EDT 2020" starttimestamp="1597522471057" timestamp="862455424" timestamp2="862455424">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="81303" _type="InsertStringCommand" date="Tue Aug 25 15:48:46 EDT 2020" starttimestamp="1597522471057" timestamp="862455711" timestamp2="862455711">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81305" _type="InsertStringCommand" date="Tue Aug 25 15:48:46 EDT 2020" starttimestamp="1597522471057" timestamp="862455914" timestamp2="862455914">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="81307" _type="InsertStringCommand" date="Tue Aug 25 15:48:47 EDT 2020" starttimestamp="1597522471057" timestamp="862456089" timestamp2="862456089">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:47 EDT 2020" starttimestamp="1597522471057" timestamp="862456828" />
  <Command __id="81311" _type="InsertStringCommand" date="Tue Aug 25 15:48:48 EDT 2020" starttimestamp="1597522471057" timestamp="862457387" timestamp2="862457387">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="81313" _type="InsertStringCommand" date="Tue Aug 25 15:48:48 EDT 2020" starttimestamp="1597522471057" timestamp="862457614" timestamp2="862457614">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="81315" _type="InsertStringCommand" date="Tue Aug 25 15:48:48 EDT 2020" starttimestamp="1597522471057" timestamp="862457845" timestamp2="862457845">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="81317" _type="InsertStringCommand" date="Tue Aug 25 15:48:49 EDT 2020" starttimestamp="1597522471057" timestamp="862458080" timestamp2="862458080">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="81318" _type="SelectTextCommand" caretOffset="358" date="Tue Aug 25 15:48:50 EDT 2020" end="359" start="358" starttimestamp="1597522471057" timestamp="862459913" />
  <Command __id="81319" _type="MoveCaretCommand" caretOffset="358" date="Tue Aug 25 15:48:51 EDT 2020" docOffset="805" starttimestamp="1597522471057" timestamp="862460455" />
  <Command __id="81321" _type="InsertStringCommand" date="Tue Aug 25 15:48:52 EDT 2020" starttimestamp="1597522471057" timestamp="862461451" timestamp2="862461451">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="81289" _type="Insert" date="Tue Aug 25 15:48:43 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12484" docExpressionCount="1036" docLength="12986" length="1" offset="764" starttimestamp="1597522471057" timestamp="862452389">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81291" _type="Insert" date="Tue Aug 25 15:48:43 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12485" docExpressionCount="1036" docLength="12987" length="1" offset="765" starttimestamp="1597522471057" timestamp="862452446">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81293" _type="Insert" date="Tue Aug 25 15:48:43 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12486" docExpressionCount="1036" docLength="12988" length="1" offset="766" starttimestamp="1597522471057" timestamp="862452563">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81295" _type="Insert" date="Tue Aug 25 15:48:43 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12487" docExpressionCount="1036" docLength="12989" length="1" offset="767" starttimestamp="1597522471057" timestamp="862452751">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81297" _type="Insert" date="Tue Aug 25 15:48:44 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12488" docExpressionCount="1036" docLength="12990" length="1" offset="768" starttimestamp="1597522471057" timestamp="862452977">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81300" _type="Insert" date="Tue Aug 25 15:48:46 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12489" docExpressionCount="1036" docLength="12991" length="1" offset="795" starttimestamp="1597522471057" timestamp="862455422">
    <text><![CDATA[_]]></text>
  </DocumentChange>
  <DocumentChange __id="81302" _type="Insert" date="Tue Aug 25 15:48:46 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12490" docExpressionCount="1036" docLength="12992" length="1" offset="796" starttimestamp="1597522471057" timestamp="862455707">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="81304" _type="Insert" date="Tue Aug 25 15:48:46 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12491" docExpressionCount="1036" docLength="12993" length="1" offset="797" starttimestamp="1597522471057" timestamp="862455909">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="81306" _type="Insert" date="Tue Aug 25 15:48:47 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12492" docExpressionCount="1036" docLength="12994" length="1" offset="798" starttimestamp="1597522471057" timestamp="862456084">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81308" _type="Delete" date="Tue Aug 25 15:48:47 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12491" docExpressionCount="1036" docLength="12993" endLine="24" length="1" offset="798" startLine="24" starttimestamp="1597522471057" timestamp="862456826">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81310" _type="Insert" date="Tue Aug 25 15:48:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12492" docExpressionCount="1036" docLength="12994" length="1" offset="798" starttimestamp="1597522471057" timestamp="862457383">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="81312" _type="Insert" date="Tue Aug 25 15:48:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12493" docExpressionCount="1036" docLength="12995" length="1" offset="799" starttimestamp="1597522471057" timestamp="862457611">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="81314" _type="Insert" date="Tue Aug 25 15:48:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12494" docExpressionCount="1036" docLength="12996" length="1" offset="800" starttimestamp="1597522471057" timestamp="862457841">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <DocumentChange __id="81316" _type="Insert" date="Tue Aug 25 15:48:49 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12495" docExpressionCount="1036" docLength="12997" length="1" offset="801" starttimestamp="1597522471057" timestamp="862458075">
    <text><![CDATA[G]]></text>
  </DocumentChange>
  <DocumentChange __id="81320" _type="Insert" date="Tue Aug 25 15:48:52 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12496" docExpressionCount="1035" docLength="12998" length="1" offset="805" starttimestamp="1597522471057" timestamp="862461445">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="81323" _type="Insert" date="Tue Aug 25 15:48:54 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12508" docExpressionCount="1035" docLength="13010" length="12" offset="808" starttimestamp="1597522471057" timestamp="862463313">
    <text><![CDATA["
    		+ "]]></text>
  </DocumentChange>
  <DocumentChange __id="81325" _type="Delete" date="Tue Aug 25 15:48:55 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12507" docExpressionCount="1035" docLength="13009" endLine="25" length="1" offset="819" startLine="25" starttimestamp="1597522471057" timestamp="862464048">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="81327" _type="Delete" date="Tue Aug 25 15:48:55 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12506" docExpressionCount="1035" docLength="13008" endLine="25" length="1" offset="818" startLine="25" starttimestamp="1597522471057" timestamp="862464419">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81329" _type="Delete" date="Tue Aug 25 15:48:56 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12505" docExpressionCount="1036" docLength="13007" endLine="25" length="1" offset="817" startLine="25" starttimestamp="1597522471057" timestamp="862465329">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="81331" _type="Delete" date="Tue Aug 25 15:48:56 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12504" docExpressionCount="1036" docLength="13006" endLine="25" length="1" offset="816" startLine="25" starttimestamp="1597522471057" timestamp="862465540">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="81333" _type="Delete" date="Tue Aug 25 15:48:56 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12503" docExpressionCount="1036" docLength="13005" endLine="25" length="1" offset="815" startLine="25" starttimestamp="1597522471057" timestamp="862465738">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="81335" _type="Delete" date="Tue Aug 25 15:48:57 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12502" docExpressionCount="1036" docLength="13004" endLine="25" length="1" offset="814" startLine="25" starttimestamp="1597522471057" timestamp="862466159">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81337" _type="Delete" date="Tue Aug 25 15:48:57 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12501" docExpressionCount="1036" docLength="13003" endLine="25" length="1" offset="813" startLine="25" starttimestamp="1597522471057" timestamp="862466504">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81339" _type="Delete" date="Tue Aug 25 15:48:57 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12500" docExpressionCount="1036" docLength="13002" endLine="25" length="1" offset="812" startLine="25" starttimestamp="1597522471057" timestamp="862466829">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81341" _type="Delete" date="Tue Aug 25 15:48:58 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12499" docExpressionCount="1036" docLength="13001" endLine="25" length="1" offset="811" startLine="25" starttimestamp="1597522471057" timestamp="862467084">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81343" _type="Delete" date="Tue Aug 25 15:48:58 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12497" docExpressionCount="1036" docLength="12999" endLine="25" length="2" offset="809" startLine="24" starttimestamp="1597522471057" timestamp="862467296">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="81345" _type="Delete" date="Tue Aug 25 15:48:59 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12496" docExpressionCount="1035" docLength="12998" endLine="24" length="1" offset="808" startLine="24" starttimestamp="1597522471057" timestamp="862467968">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="81347" _type="Delete" date="Tue Aug 25 15:48:59 EDT 2020" docASTNodeCount="1623" docActiveCodeLength="12495" docExpressionCount="1035" docLength="12997" endLine="24" length="1" offset="807" startLine="24" starttimestamp="1597522471057" timestamp="862468115">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="81322" _type="MoveCaretCommand" caretOffset="360" date="Tue Aug 25 15:48:53 EDT 2020" docOffset="807" starttimestamp="1597522471057" timestamp="862462682" />
  <Command __id="81324" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.smartEnter" date="Tue Aug 25 15:48:54 EDT 2020" starttimestamp="1597522471057" timestamp="862463317" />
  <Command __id="81326" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:55 EDT 2020" starttimestamp="1597522471057" timestamp="862464052" />
  <Command __id="81328" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:55 EDT 2020" starttimestamp="1597522471057" timestamp="862464421" />
  <Command __id="81330" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:56 EDT 2020" starttimestamp="1597522471057" timestamp="862465331" />
  <Command __id="81332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:56 EDT 2020" starttimestamp="1597522471057" timestamp="862465542" />
  <Command __id="81334" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:56 EDT 2020" starttimestamp="1597522471057" timestamp="862465741" />
  <Command __id="81336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:57 EDT 2020" starttimestamp="1597522471057" timestamp="862466161" />
  <Command __id="81338" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:57 EDT 2020" starttimestamp="1597522471057" timestamp="862466506" />
  <Command __id="81340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:57 EDT 2020" starttimestamp="1597522471057" timestamp="862466832" />
  <Command __id="81342" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:58 EDT 2020" starttimestamp="1597522471057" timestamp="862467088" />
  <Command __id="81344" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:58 EDT 2020" starttimestamp="1597522471057" timestamp="862467308" />
  <Command __id="81346" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:59 EDT 2020" starttimestamp="1597522471057" timestamp="862467972" />
  <Command __id="81348" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:48:59 EDT 2020" starttimestamp="1597522471057" timestamp="862468118" />
  <Command __id="81350" _type="InsertStringCommand" date="Tue Aug 25 15:49:00 EDT 2020" starttimestamp="1597522471057" timestamp="862469437" timestamp2="862469437">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="81352" _type="InsertStringCommand" date="Tue Aug 25 15:49:00 EDT 2020" starttimestamp="1597522471057" timestamp="862469815" timestamp2="862469815">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="81353" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:49:02 EDT 2020" starttimestamp="1597522471057" timestamp="862471361" />
  <Command __id="81354" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:02 EDT 2020" starttimestamp="1597522471057" timestamp="862471443" />
  <Command __id="81355" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:02 EDT 2020" starttimestamp="1597522471057" timestamp="862471501" />
  <Command __id="81356" _type="MoveCaretCommand" caretOffset="3484" date="Tue Aug 25 15:49:07 EDT 2020" docOffset="3931" starttimestamp="1597522471057" timestamp="862476431" />
  <Command __id="81357" _type="SelectTextCommand" caretOffset="3490" date="Tue Aug 25 15:49:07 EDT 2020" end="3490" start="3477" starttimestamp="1597522471057" timestamp="862476495" />
  <Command __id="81358" _type="MoveCaretCommand" caretOffset="3484" date="Tue Aug 25 15:49:08 EDT 2020" docOffset="3931" starttimestamp="1597522471057" timestamp="862477120" />
  <Command __id="81359" _type="SelectTextCommand" caretOffset="3490" date="Tue Aug 25 15:49:08 EDT 2020" end="3490" start="3477" starttimestamp="1597522471057" timestamp="862477360" />
  <Command __id="81360" _type="MoveCaretCommand" caretOffset="3484" date="Tue Aug 25 15:49:08 EDT 2020" docOffset="3931" starttimestamp="1597522471057" timestamp="862477891" />
  <Command __id="81361" _type="SelectTextCommand" caretOffset="3490" date="Tue Aug 25 15:49:09 EDT 2020" end="3490" start="3477" starttimestamp="1597522471057" timestamp="862478194" />
  <Command __id="81362" _type="MoveCaretCommand" caretOffset="3484" date="Tue Aug 25 15:49:10 EDT 2020" docOffset="3931" starttimestamp="1597522471057" timestamp="862478943" />
  <Command __id="81363" _type="SelectTextCommand" caretOffset="3490" date="Tue Aug 25 15:49:10 EDT 2020" end="3490" start="3477" starttimestamp="1597522471057" timestamp="862479101" />
  <Command __id="81364" _type="SelectTextCommand" caretOffset="3541" date="Tue Aug 25 15:49:10 EDT 2020" end="3541" start="3469" starttimestamp="1597522471057" timestamp="862479323" />
  <Command __id="81365" _type="CopyCommand" date="Tue Aug 25 15:49:11 EDT 2020" starttimestamp="1597522471057" timestamp="862480024" />
  <Command __id="81366" _type="MoveCaretCommand" caretOffset="3539" date="Tue Aug 25 15:49:12 EDT 2020" docOffset="3986" starttimestamp="1597522471057" timestamp="862481723" />
  <Command __id="81368" _type="InsertStringCommand" date="Tue Aug 25 15:49:13 EDT 2020" starttimestamp="1597522471057" timestamp="862482120" timestamp2="862482120">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81370" _type="PasteCommand" date="Tue Aug 25 15:49:13 EDT 2020" starttimestamp="1597522471057" timestamp="862482780" />
  <DocumentChange __id="81349" _type="Insert" date="Tue Aug 25 15:49:00 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12496" docExpressionCount="1036" docLength="12998" length="1" offset="807" starttimestamp="1597522471057" timestamp="862469430">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="81351" _type="Insert" date="Tue Aug 25 15:49:00 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12497" docExpressionCount="1036" docLength="12999" length="1" offset="808" starttimestamp="1597522471057" timestamp="862469809">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="81367" _type="Insert" date="Tue Aug 25 15:49:13 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12507" docExpressionCount="1036" docLength="13009" length="10" offset="3986" starttimestamp="1597522471057" timestamp="862482109">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <DocumentChange __id="81369" _type="Replace" date="Tue Aug 25 15:49:13 EDT 2020" docASTNodeCount="1629" docActiveCodeLength="12571" docExpressionCount="1040" docLength="13073" endLine="85" insertionLength="72" int_docASTNodeCount="1624" int_docActiveCodeLength="12499" int_docExpressionCount="1036" int_docLength="13001" length="8" offset="3988" startLine="85" starttimestamp="1597522471057" timestamp="862482750">
    <deletedText><![CDATA[        ]]></deletedText>
    <insertedText><![CDATA[        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
]]></insertedText>
  </DocumentChange>
  <Command __id="81371" _type="MoveCaretCommand" caretOffset="3476" date="Tue Aug 25 15:49:16 EDT 2020" docOffset="3923" starttimestamp="1597522471057" timestamp="862484943" />
  <Command __id="81372" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.next" date="Tue Aug 25 15:49:16 EDT 2020" starttimestamp="1597522471057" timestamp="862485607" />
  <Command __id="81374" _type="UndoCommand" date="Tue Aug 25 15:49:17 EDT 2020" starttimestamp="1597522471057" timestamp="862486692" />
  <Command __id="81375" _type="MoveCaretCommand" caretOffset="3477" date="Tue Aug 25 15:49:19 EDT 2020" docOffset="3924" starttimestamp="1597522471057" timestamp="862488121" />
  <Command __id="81376" _type="MoveCaretCommand" caretOffset="3549" date="Tue Aug 25 15:49:20 EDT 2020" docOffset="3996" starttimestamp="1597522471057" timestamp="862489008" />
  <Command __id="81378" _type="PasteCommand" date="Tue Aug 25 15:49:20 EDT 2020" starttimestamp="1597522471057" timestamp="862489793" />
  <Command __id="81379" _type="MoveCaretCommand" caretOffset="3476" date="Tue Aug 25 15:49:22 EDT 2020" docOffset="3923" starttimestamp="1597522471057" timestamp="862491041" />
  <Command __id="81381" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 15:49:22 EDT 2020" starttimestamp="1597522471057" timestamp="862491816" />
  <Command __id="81382" _type="MoveCaretCommand" caretOffset="3611" date="Tue Aug 25 15:49:25 EDT 2020" docOffset="4058" starttimestamp="1597522471057" timestamp="862494522" />
  <Command __id="81384" _type="InsertStringCommand" date="Tue Aug 25 15:49:26 EDT 2020" starttimestamp="1597522471057" timestamp="862495169" timestamp2="862495169">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="81386" _type="InsertStringCommand" date="Tue Aug 25 15:49:26 EDT 2020" starttimestamp="1597522471057" timestamp="862495438" timestamp2="862495438">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81388" _type="InsertStringCommand" date="Tue Aug 25 15:49:26 EDT 2020" starttimestamp="1597522471057" timestamp="862495640" timestamp2="862495640">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="81390" _type="InsertStringCommand" date="Tue Aug 25 15:49:26 EDT 2020" starttimestamp="1597522471057" timestamp="862495859" timestamp2="862495859">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="81392" _type="InsertStringCommand" date="Tue Aug 25 15:49:27 EDT 2020" starttimestamp="1597522471057" timestamp="862496130" timestamp2="862496130">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="81394" _type="InsertStringCommand" date="Tue Aug 25 15:49:27 EDT 2020" starttimestamp="1597522471057" timestamp="862496325" timestamp2="862496325">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="81396" _type="InsertStringCommand" date="Tue Aug 25 15:49:27 EDT 2020" starttimestamp="1597522471057" timestamp="862496547" timestamp2="862496547">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="81397" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:49:28 EDT 2020" starttimestamp="1597522471057" timestamp="862497316" />
  <Command __id="81398" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:28 EDT 2020" starttimestamp="1597522471057" timestamp="862497480" />
  <Command __id="81399" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:28 EDT 2020" starttimestamp="1597522471057" timestamp="862497647" />
  <Command __id="81400" _type="MoveCaretCommand" caretOffset="4096" date="Tue Aug 25 15:49:38 EDT 2020" docOffset="4543" starttimestamp="1597522471057" timestamp="862507243" />
  <Command __id="81401" _type="SelectTextCommand" caretOffset="4100" date="Tue Aug 25 15:49:38 EDT 2020" end="4100" start="4087" starttimestamp="1597522471057" timestamp="862507412" />
  <Command __id="81402" _type="SelectTextCommand" caretOffset="4104" date="Tue Aug 25 15:49:38 EDT 2020" end="4104" start="4048" starttimestamp="1597522471057" timestamp="862507600" />
  <Command __id="81403" _type="CopyCommand" date="Tue Aug 25 15:49:39 EDT 2020" starttimestamp="1597522471057" timestamp="862508768" />
  <Command __id="81404" _type="MoveCaretCommand" caretOffset="4102" date="Tue Aug 25 15:49:41 EDT 2020" docOffset="4549" starttimestamp="1597522471057" timestamp="862510271" />
  <Command __id="81406" _type="InsertStringCommand" date="Tue Aug 25 15:49:41 EDT 2020" starttimestamp="1597522471057" timestamp="862510649" timestamp2="862510649">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81408" _type="PasteCommand" date="Tue Aug 25 15:49:42 EDT 2020" starttimestamp="1597522471057" timestamp="862511347" />
  <Command __id="81409" _type="MoveCaretCommand" caretOffset="4063" date="Tue Aug 25 15:49:44 EDT 2020" docOffset="4510" starttimestamp="1597522471057" timestamp="862513262" />
  <Command __id="81411" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 15:49:44 EDT 2020" starttimestamp="1597522471057" timestamp="862513879" />
  <Command __id="81412" _type="SelectTextCommand" caretOffset="4158" date="Tue Aug 25 15:49:48 EDT 2020" end="4158" start="4145" starttimestamp="1597522471057" timestamp="862517022" />
  <Command __id="81414" _type="InsertStringCommand" date="Tue Aug 25 15:49:48 EDT 2020" starttimestamp="1597522471057" timestamp="862517258" timestamp2="862517258">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81416" _type="InsertStringCommand" date="Tue Aug 25 15:49:48 EDT 2020" starttimestamp="1597522471057" timestamp="862517694" timestamp2="862517694">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81418" _type="InsertStringCommand" date="Tue Aug 25 15:49:48 EDT 2020" starttimestamp="1597522471057" timestamp="862517915" timestamp2="862517915">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81420" _type="InsertStringCommand" date="Tue Aug 25 15:49:49 EDT 2020" starttimestamp="1597522471057" timestamp="862518029" timestamp2="862518029">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81422" _type="InsertStringCommand" date="Tue Aug 25 15:49:49 EDT 2020" starttimestamp="1597522471057" timestamp="862518811" timestamp2="862518811">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="81424" _type="InsertStringCommand" date="Tue Aug 25 15:49:50 EDT 2020" starttimestamp="1597522471057" timestamp="862519071" timestamp2="862519071">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="81425" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:49:51 EDT 2020" starttimestamp="1597522471057" timestamp="862520808" />
  <Command __id="81426" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:51 EDT 2020" starttimestamp="1597522471057" timestamp="862520890" />
  <Command __id="81427" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:49:52 EDT 2020" starttimestamp="1597522471057" timestamp="862520948" />
  <DocumentChange __id="81373" _type="Replace" date="Tue Aug 25 15:49:17 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12507" docExpressionCount="1036" docLength="13009" endLine="86" insertionLength="8" int_docASTNodeCount="1624" int_docActiveCodeLength="12499" int_docExpressionCount="1036" int_docLength="13001" length="72" offset="3988" startLine="85" starttimestamp="1597522471057" timestamp="862486618">
    <deletedText><![CDATA[        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
]]></deletedText>
    <insertedText><![CDATA[        ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81377" _type="Replace" date="Tue Aug 25 15:49:20 EDT 2020" docASTNodeCount="1629" docActiveCodeLength="12571" docExpressionCount="1040" docLength="13073" endLine="85" insertionLength="72" int_docASTNodeCount="1624" int_docActiveCodeLength="12499" int_docExpressionCount="1036" int_docLength="13001" length="8" offset="3988" startLine="85" starttimestamp="1597522471057" timestamp="862489724">
    <deletedText><![CDATA[        ]]></deletedText>
    <insertedText><![CDATA[        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81380" _type="Insert" date="Tue Aug 25 15:49:22 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12501" docExpressionCount="1036" docLength="13075" length="2" offset="3916" starttimestamp="1597522471057" timestamp="862491708">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="81383" _type="Insert" date="Tue Aug 25 15:49:26 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12502" docExpressionCount="1036" docLength="13076" length="1" offset="4058" starttimestamp="1597522471057" timestamp="862495159">
    <text><![CDATA[_]]></text>
  </DocumentChange>
  <DocumentChange __id="81385" _type="Insert" date="Tue Aug 25 15:49:26 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12503" docExpressionCount="1036" docLength="13077" length="1" offset="4059" starttimestamp="1597522471057" timestamp="862495427">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="81387" _type="Insert" date="Tue Aug 25 15:49:26 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12504" docExpressionCount="1036" docLength="13078" length="1" offset="4060" starttimestamp="1597522471057" timestamp="862495633">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="81389" _type="Insert" date="Tue Aug 25 15:49:26 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12505" docExpressionCount="1036" docLength="13079" length="1" offset="4061" starttimestamp="1597522471057" timestamp="862495852">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="81391" _type="Insert" date="Tue Aug 25 15:49:27 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12506" docExpressionCount="1036" docLength="13080" length="1" offset="4062" starttimestamp="1597522471057" timestamp="862496121">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="81393" _type="Insert" date="Tue Aug 25 15:49:27 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12507" docExpressionCount="1036" docLength="13081" length="1" offset="4063" starttimestamp="1597522471057" timestamp="862496317">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <DocumentChange __id="81395" _type="Insert" date="Tue Aug 25 15:49:27 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12508" docExpressionCount="1036" docLength="13082" length="1" offset="4064" starttimestamp="1597522471057" timestamp="862496540">
    <text><![CDATA[G]]></text>
  </DocumentChange>
  <DocumentChange __id="81405" _type="Insert" date="Tue Aug 25 15:49:41 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12526" docExpressionCount="1036" docLength="13100" length="18" offset="4549" starttimestamp="1597522471057" timestamp="862510641">
    <text><![CDATA[
                ]]></text>
  </DocumentChange>
  <DocumentChange __id="81407" _type="Replace" date="Tue Aug 25 15:49:42 EDT 2020" docASTNodeCount="1631" docActiveCodeLength="12566" docExpressionCount="1042" docLength="13140" endLine="97" insertionLength="56" int_docASTNodeCount="1624" int_docActiveCodeLength="12510" int_docExpressionCount="1036" int_docLength="13084" length="16" offset="4551" startLine="97" starttimestamp="1597522471057" timestamp="862511323">
    <deletedText><![CDATA[                ]]></deletedText>
    <insertedText><![CDATA[                setAssignment(args[0], assignmentNum);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81410" _type="Insert" date="Tue Aug 25 15:49:44 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12512" docExpressionCount="1036" docLength="13142" length="2" offset="4495" starttimestamp="1597522471057" timestamp="862513854">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="81413" _type="Replace" date="Tue Aug 25 15:49:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12500" docExpressionCount="1036" docLength="13130" endLine="97" insertionLength="1" int_docASTNodeCount="1624" int_docActiveCodeLength="12499" int_docExpressionCount="1036" int_docLength="13129" length="13" offset="4592" startLine="97" starttimestamp="1597522471057" timestamp="862517245">
    <deletedText><![CDATA[assignmentNum]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81415" _type="Insert" date="Tue Aug 25 15:49:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12501" docExpressionCount="1036" docLength="13131" length="1" offset="4593" starttimestamp="1597522471057" timestamp="862517689">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81417" _type="Insert" date="Tue Aug 25 15:49:48 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12502" docExpressionCount="1036" docLength="13132" length="1" offset="4594" starttimestamp="1597522471057" timestamp="862517911">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81419" _type="Insert" date="Tue Aug 25 15:49:49 EDT 2020" docASTNodeCount="1624" docActiveCodeLength="12503" docExpressionCount="1036" docLength="13133" length="1" offset="4595" starttimestamp="1597522471057" timestamp="862518023">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81421" _type="Insert" date="Tue Aug 25 15:49:49 EDT 2020" docASTNodeCount="1627" docActiveCodeLength="12505" docExpressionCount="1037" docLength="13135" length="2" offset="4596" starttimestamp="1597522471057" timestamp="862518792">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="81423" _type="Insert" date="Tue Aug 25 15:49:50 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13136" length="1" offset="4597" starttimestamp="1597522471057" timestamp="862519066">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="81429" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:50:20 EDT 2020" starttimestamp="1597522471057" timestamp="862549511" />
  <Command __id="81430" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:50:20 EDT 2020" starttimestamp="1597522471057" timestamp="862549562" />
  <Command __id="81431" _type="ShellCommand" date="Tue Aug 25 15:50:20 EDT 2020" starttimestamp="1597522471057" timestamp="862549855" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81432" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:50:23 EDT 2020" docASTNodeCount="10" docActiveCodeLength="67" docExpressionCount="6" docLength="67" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="862552012">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

public class Comp524AssignmentSetup {

}
]]></snapshot>
  </Command>
  <Command __id="81433" _type="MoveCaretCommand" caretOffset="62" date="Tue Aug 25 15:50:26 EDT 2020" docOffset="62" starttimestamp="1597522471057" timestamp="862555548" />
  <DocumentChange __id="81434" _type="Insert" date="Tue Aug 25 15:50:29 EDT 2020" docASTNodeCount="10" docActiveCodeLength="68" docExpressionCount="6" docLength="68" length="1" offset="62" starttimestamp="1597522471057" timestamp="862558249">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="81435" _type="InsertStringCommand" date="Tue Aug 25 15:50:29 EDT 2020" starttimestamp="1597522471057" timestamp="862558268" timestamp2="862558268">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="81436" _type="Insert" date="Tue Aug 25 15:50:30 EDT 2020" docASTNodeCount="10" docActiveCodeLength="69" docExpressionCount="6" docLength="69" length="1" offset="63" starttimestamp="1597522471057" timestamp="862559109">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="81437" _type="InsertStringCommand" date="Tue Aug 25 15:50:30 EDT 2020" starttimestamp="1597522471057" timestamp="862559113" timestamp2="862559113">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="81438" _type="Insert" date="Tue Aug 25 15:50:30 EDT 2020" docASTNodeCount="10" docActiveCodeLength="70" docExpressionCount="6" docLength="70" length="1" offset="64" starttimestamp="1597522471057" timestamp="862559119">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="81439" _type="InsertStringCommand" date="Tue Aug 25 15:50:30 EDT 2020" starttimestamp="1597522471057" timestamp="862559122" timestamp2="862559122">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="81440" _type="Insert" date="Tue Aug 25 15:50:30 EDT 2020" docASTNodeCount="10" docActiveCodeLength="71" docExpressionCount="6" docLength="71" length="1" offset="65" starttimestamp="1597522471057" timestamp="862559129">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="81441" _type="InsertStringCommand" date="Tue Aug 25 15:50:30 EDT 2020" starttimestamp="1597522471057" timestamp="862559132" timestamp2="862559132">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="81442" _type="Insert" date="Tue Aug 25 15:50:30 EDT 2020" docASTNodeCount="10" docActiveCodeLength="72" docExpressionCount="6" docLength="72" length="1" offset="66" starttimestamp="1597522471057" timestamp="862559809">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="81443" _type="InsertStringCommand" date="Tue Aug 25 15:50:30 EDT 2020" starttimestamp="1597522471057" timestamp="862559812" timestamp2="862559812">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="81444" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="73" docExpressionCount="6" docLength="73" length="1" offset="67" starttimestamp="1597522471057" timestamp="862560028">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81445" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560031" timestamp2="862560031">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81446" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="74" docExpressionCount="6" docLength="74" length="1" offset="68" starttimestamp="1597522471057" timestamp="862560106">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="81447" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560109" timestamp2="862560109">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="81448" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="75" docExpressionCount="6" docLength="75" length="1" offset="69" starttimestamp="1597522471057" timestamp="862560292">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="81449" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560295" timestamp2="862560295">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="81450" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="76" docExpressionCount="6" docLength="76" length="1" offset="70" starttimestamp="1597522471057" timestamp="862560423">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="81451" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560425" timestamp2="862560425">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="81452" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="77" docExpressionCount="6" docLength="77" length="1" offset="71" starttimestamp="1597522471057" timestamp="862560575">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81453" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560578" timestamp2="862560578">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81454" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="78" docExpressionCount="6" docLength="78" length="1" offset="72" starttimestamp="1597522471057" timestamp="862560646">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81455" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560649" timestamp2="862560649">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81456" _type="Insert" date="Tue Aug 25 15:50:31 EDT 2020" docASTNodeCount="10" docActiveCodeLength="79" docExpressionCount="6" docLength="79" length="1" offset="73" starttimestamp="1597522471057" timestamp="862560688">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81457" _type="InsertStringCommand" date="Tue Aug 25 15:50:31 EDT 2020" starttimestamp="1597522471057" timestamp="862560692" timestamp2="862560692">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81458" _type="Insert" date="Tue Aug 25 15:50:32 EDT 2020" docASTNodeCount="10" docActiveCodeLength="80" docExpressionCount="6" docLength="80" length="1" offset="74" starttimestamp="1597522471057" timestamp="862560955">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81459" _type="InsertStringCommand" date="Tue Aug 25 15:50:32 EDT 2020" starttimestamp="1597522471057" timestamp="862560963" timestamp2="862560963">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81460" _type="Insert" date="Tue Aug 25 15:50:32 EDT 2020" docASTNodeCount="10" docActiveCodeLength="81" docExpressionCount="6" docLength="81" length="1" offset="75" starttimestamp="1597522471057" timestamp="862561032">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="81461" _type="InsertStringCommand" date="Tue Aug 25 15:50:32 EDT 2020" starttimestamp="1597522471057" timestamp="862561034" timestamp2="862561034">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="81462" _type="Insert" date="Tue Aug 25 15:50:32 EDT 2020" docASTNodeCount="10" docActiveCodeLength="82" docExpressionCount="6" docLength="82" length="1" offset="76" starttimestamp="1597522471057" timestamp="862561152">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="81463" _type="InsertStringCommand" date="Tue Aug 25 15:50:32 EDT 2020" starttimestamp="1597522471057" timestamp="862561154" timestamp2="862561154">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="81464" _type="Insert" date="Tue Aug 25 15:50:32 EDT 2020" docASTNodeCount="10" docActiveCodeLength="83" docExpressionCount="6" docLength="83" length="1" offset="77" starttimestamp="1597522471057" timestamp="862561752">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="81465" _type="InsertStringCommand" date="Tue Aug 25 15:50:32 EDT 2020" starttimestamp="1597522471057" timestamp="862561755" timestamp2="862561755">
    <data><![CDATA[v]]></data>
  </Command>
  <DocumentChange __id="81466" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="10" docActiveCodeLength="84" docExpressionCount="6" docLength="84" length="1" offset="78" starttimestamp="1597522471057" timestamp="862561947">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="81467" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862561950" timestamp2="862561950">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="81468" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="10" docActiveCodeLength="85" docExpressionCount="6" docLength="85" length="1" offset="79" starttimestamp="1597522471057" timestamp="862562110">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81469" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562112" timestamp2="862562112">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81470" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="10" docActiveCodeLength="86" docExpressionCount="6" docLength="86" length="1" offset="80" starttimestamp="1597522471057" timestamp="862562232">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="81471" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562234" timestamp2="862562234">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="81472" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="10" docActiveCodeLength="87" docExpressionCount="6" docLength="87" length="1" offset="81" starttimestamp="1597522471057" timestamp="862562263">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="81473" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562264" timestamp2="862562264">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="81474" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="16" docActiveCodeLength="88" docExpressionCount="7" docLength="88" length="1" offset="82" starttimestamp="1597522471057" timestamp="862562422">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81475" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562425" timestamp2="862562425">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="81476" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="16" docActiveCodeLength="89" docExpressionCount="7" docLength="89" length="1" offset="83" starttimestamp="1597522471057" timestamp="862562544">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81477" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562547" timestamp2="862562547">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81478" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="16" docActiveCodeLength="90" docExpressionCount="7" docLength="90" length="1" offset="84" starttimestamp="1597522471057" timestamp="862562652">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81479" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562655" timestamp2="862562655">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81480" _type="Insert" date="Tue Aug 25 15:50:33 EDT 2020" docASTNodeCount="16" docActiveCodeLength="91" docExpressionCount="7" docLength="91" length="1" offset="85" starttimestamp="1597522471057" timestamp="862562832">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="81481" _type="InsertStringCommand" date="Tue Aug 25 15:50:33 EDT 2020" starttimestamp="1597522471057" timestamp="862562835" timestamp2="862562835">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="81482" _type="Insert" date="Tue Aug 25 15:50:34 EDT 2020" docASTNodeCount="16" docActiveCodeLength="92" docExpressionCount="7" docLength="92" length="1" offset="86" starttimestamp="1597522471057" timestamp="862563018">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="81483" _type="InsertStringCommand" date="Tue Aug 25 15:50:34 EDT 2020" starttimestamp="1597522471057" timestamp="862563020" timestamp2="862563020">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="81484" _type="Insert" date="Tue Aug 25 15:50:34 EDT 2020" docASTNodeCount="16" docActiveCodeLength="94" docExpressionCount="7" docLength="94" length="2" offset="87" starttimestamp="1597522471057" timestamp="862563410">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="81485" _type="InsertStringCommand" date="Tue Aug 25 15:50:34 EDT 2020" starttimestamp="1597522471057" timestamp="862563431" timestamp2="862563431">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="81486" _type="Insert" date="Tue Aug 25 15:50:34 EDT 2020" docASTNodeCount="16" docActiveCodeLength="95" docExpressionCount="7" docLength="95" length="1" offset="88" starttimestamp="1597522471057" timestamp="862563635">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="81487" _type="InsertStringCommand" date="Tue Aug 25 15:50:34 EDT 2020" starttimestamp="1597522471057" timestamp="862563642" timestamp2="862563642">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="81488" _type="Insert" date="Tue Aug 25 15:50:34 EDT 2020" docASTNodeCount="16" docActiveCodeLength="96" docExpressionCount="7" docLength="96" length="1" offset="89" starttimestamp="1597522471057" timestamp="862563795">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81489" _type="InsertStringCommand" date="Tue Aug 25 15:50:34 EDT 2020" starttimestamp="1597522471057" timestamp="862563798" timestamp2="862563798">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81490" _type="Insert" date="Tue Aug 25 15:50:34 EDT 2020" docASTNodeCount="16" docActiveCodeLength="97" docExpressionCount="7" docLength="97" length="1" offset="90" starttimestamp="1597522471057" timestamp="862563905">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="81491" _type="InsertStringCommand" date="Tue Aug 25 15:50:34 EDT 2020" starttimestamp="1597522471057" timestamp="862563908" timestamp2="862563908">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="81492" _type="Insert" date="Tue Aug 25 15:50:35 EDT 2020" docASTNodeCount="16" docActiveCodeLength="98" docExpressionCount="7" docLength="98" length="1" offset="91" starttimestamp="1597522471057" timestamp="862564018">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81493" _type="InsertStringCommand" date="Tue Aug 25 15:50:35 EDT 2020" starttimestamp="1597522471057" timestamp="862564021" timestamp2="862564021">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81494" _type="Insert" date="Tue Aug 25 15:50:35 EDT 2020" docASTNodeCount="16" docActiveCodeLength="99" docExpressionCount="7" docLength="99" length="1" offset="92" starttimestamp="1597522471057" timestamp="862564189">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="81495" _type="InsertStringCommand" date="Tue Aug 25 15:50:35 EDT 2020" starttimestamp="1597522471057" timestamp="862564192" timestamp2="862564192">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="81496" _type="Insert" date="Tue Aug 25 15:50:35 EDT 2020" docASTNodeCount="16" docActiveCodeLength="100" docExpressionCount="7" docLength="100" length="1" offset="93" starttimestamp="1597522471057" timestamp="862564395">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="81497" _type="InsertStringCommand" date="Tue Aug 25 15:50:35 EDT 2020" starttimestamp="1597522471057" timestamp="862564398" timestamp2="862564398">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="81498" _type="Insert" date="Tue Aug 25 15:50:36 EDT 2020" docASTNodeCount="16" docActiveCodeLength="102" docExpressionCount="7" docLength="102" length="2" offset="94" starttimestamp="1597522471057" timestamp="862565137">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <Command __id="81499" _type="InsertStringCommand" date="Tue Aug 25 15:50:36 EDT 2020" starttimestamp="1597522471057" timestamp="862565144" timestamp2="862565144">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="81500" _type="InsertStringCommand" date="Tue Aug 25 15:50:36 EDT 2020" starttimestamp="1597522471057" timestamp="862565311" timestamp2="862565311">
    <data><![CDATA[]]]></data>
  </Command>
  <DocumentChange __id="81501" _type="Insert" date="Tue Aug 25 15:50:36 EDT 2020" docASTNodeCount="16" docActiveCodeLength="103" docExpressionCount="7" docLength="103" length="1" offset="96" starttimestamp="1597522471057" timestamp="862565615">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="81502" _type="InsertStringCommand" date="Tue Aug 25 15:50:36 EDT 2020" starttimestamp="1597522471057" timestamp="862565617" timestamp2="862565617">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="81503" _type="Insert" date="Tue Aug 25 15:50:36 EDT 2020" docASTNodeCount="21" docActiveCodeLength="104" docExpressionCount="9" docLength="104" length="1" offset="97" starttimestamp="1597522471057" timestamp="862565731">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81504" _type="InsertStringCommand" date="Tue Aug 25 15:50:36 EDT 2020" starttimestamp="1597522471057" timestamp="862565734" timestamp2="862565734">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81505" _type="Insert" date="Tue Aug 25 15:50:36 EDT 2020" docASTNodeCount="21" docActiveCodeLength="105" docExpressionCount="9" docLength="105" length="1" offset="98" starttimestamp="1597522471057" timestamp="862565918">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="81506" _type="InsertStringCommand" date="Tue Aug 25 15:50:36 EDT 2020" starttimestamp="1597522471057" timestamp="862565920" timestamp2="862565920">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="81507" _type="Insert" date="Tue Aug 25 15:50:37 EDT 2020" docASTNodeCount="21" docActiveCodeLength="106" docExpressionCount="9" docLength="106" length="1" offset="99" starttimestamp="1597522471057" timestamp="862566081">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="81508" _type="InsertStringCommand" date="Tue Aug 25 15:50:37 EDT 2020" starttimestamp="1597522471057" timestamp="862566083" timestamp2="862566083">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81510" _type="InsertStringCommand" date="Tue Aug 25 15:50:37 EDT 2020" starttimestamp="1597522471057" timestamp="862566202" timestamp2="862566202">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="81509" _type="Insert" date="Tue Aug 25 15:50:37 EDT 2020" docASTNodeCount="21" docActiveCodeLength="107" docExpressionCount="9" docLength="107" length="1" offset="100" starttimestamp="1597522471057" timestamp="862566200">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81512" _type="Insert" date="Tue Aug 25 15:50:39 EDT 2020" docASTNodeCount="21" docActiveCodeLength="108" docExpressionCount="9" docLength="108" length="1" offset="102" starttimestamp="1597522471057" timestamp="862568061">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81514" _type="Insert" date="Tue Aug 25 15:50:39 EDT 2020" docASTNodeCount="21" docActiveCodeLength="109" docExpressionCount="9" docLength="109" length="1" offset="103" starttimestamp="1597522471057" timestamp="862568467">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="81516" _type="Insert" date="Tue Aug 25 15:50:39 EDT 2020" docASTNodeCount="21" docActiveCodeLength="117" docExpressionCount="9" docLength="117" length="8" offset="104" starttimestamp="1597522471057" timestamp="862568707">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <Command __id="81511" _type="MoveCaretCommand" caretOffset="102" date="Tue Aug 25 15:50:38 EDT 2020" docOffset="102" starttimestamp="1597522471057" timestamp="862567803" />
  <Command __id="81513" _type="InsertStringCommand" date="Tue Aug 25 15:50:39 EDT 2020" starttimestamp="1597522471057" timestamp="862568064" timestamp2="862568064">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81515" _type="InsertStringCommand" date="Tue Aug 25 15:50:39 EDT 2020" starttimestamp="1597522471057" timestamp="862568482" timestamp2="862568482">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="81517" _type="InsertStringCommand" date="Tue Aug 25 15:50:39 EDT 2020" starttimestamp="1597522471057" timestamp="862568713" timestamp2="862568713">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81519" _type="InsertStringCommand" date="Tue Aug 25 15:50:41 EDT 2020" starttimestamp="1597522471057" timestamp="862570453" timestamp2="862570453">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81521" _type="InsertStringCommand" date="Tue Aug 25 15:50:41 EDT 2020" starttimestamp="1597522471057" timestamp="862570672" timestamp2="862570672">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81523" _type="InsertStringCommand" date="Tue Aug 25 15:50:41 EDT 2020" starttimestamp="1597522471057" timestamp="862570821" timestamp2="862570821">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81525" _type="InsertStringCommand" date="Tue Aug 25 15:50:41 EDT 2020" starttimestamp="1597522471057" timestamp="862570904" timestamp2="862570904">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81527" _type="InsertStringCommand" date="Tue Aug 25 15:50:42 EDT 2020" starttimestamp="1597522471057" timestamp="862571118" timestamp2="862571118">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81529" _type="InsertStringCommand" date="Tue Aug 25 15:50:42 EDT 2020" starttimestamp="1597522471057" timestamp="862571316" timestamp2="862571316">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81531" _type="InsertStringCommand" date="Tue Aug 25 15:50:42 EDT 2020" starttimestamp="1597522471057" timestamp="862571564" timestamp2="862571564">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="81533" _type="InsertStringCommand" date="Tue Aug 25 15:50:42 EDT 2020" starttimestamp="1597522471057" timestamp="862571682" timestamp2="862571682">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="81535" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862571950" />
  <Command __id="81537" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572088" />
  <Command __id="81539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572231" />
  <Command __id="81541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572385" />
  <Command __id="81543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572526" />
  <Command __id="81545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572671" />
  <Command __id="81547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:43 EDT 2020" starttimestamp="1597522471057" timestamp="862572819" />
  <Command __id="81549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:44 EDT 2020" starttimestamp="1597522471057" timestamp="862573176" />
  <Command __id="81551" _type="InsertStringCommand" date="Tue Aug 25 15:50:44 EDT 2020" starttimestamp="1597522471057" timestamp="862573482" timestamp2="862573482">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="81553" _type="InsertStringCommand" date="Tue Aug 25 15:50:44 EDT 2020" starttimestamp="1597522471057" timestamp="862573711" timestamp2="862573711">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81555" _type="InsertStringCommand" date="Tue Aug 25 15:50:44 EDT 2020" starttimestamp="1597522471057" timestamp="862573888" timestamp2="862573888">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81557" _type="InsertStringCommand" date="Tue Aug 25 15:50:45 EDT 2020" starttimestamp="1597522471057" timestamp="862574084" timestamp2="862574084">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81518" _type="Insert" date="Tue Aug 25 15:50:41 EDT 2020" docASTNodeCount="23" docActiveCodeLength="118" docExpressionCount="10" docLength="118" length="1" offset="108" starttimestamp="1597522471057" timestamp="862570451">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81520" _type="Insert" date="Tue Aug 25 15:50:41 EDT 2020" docASTNodeCount="23" docActiveCodeLength="119" docExpressionCount="10" docLength="119" length="1" offset="109" starttimestamp="1597522471057" timestamp="862570669">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81522" _type="Insert" date="Tue Aug 25 15:50:41 EDT 2020" docASTNodeCount="23" docActiveCodeLength="120" docExpressionCount="10" docLength="120" length="1" offset="110" starttimestamp="1597522471057" timestamp="862570819">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81524" _type="Insert" date="Tue Aug 25 15:50:41 EDT 2020" docASTNodeCount="23" docActiveCodeLength="121" docExpressionCount="10" docLength="121" length="1" offset="111" starttimestamp="1597522471057" timestamp="862570901">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81526" _type="Insert" date="Tue Aug 25 15:50:42 EDT 2020" docASTNodeCount="23" docActiveCodeLength="122" docExpressionCount="10" docLength="122" length="1" offset="112" starttimestamp="1597522471057" timestamp="862571116">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81528" _type="Insert" date="Tue Aug 25 15:50:42 EDT 2020" docASTNodeCount="23" docActiveCodeLength="123" docExpressionCount="10" docLength="123" length="1" offset="113" starttimestamp="1597522471057" timestamp="862571314">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81530" _type="Insert" date="Tue Aug 25 15:50:42 EDT 2020" docASTNodeCount="23" docActiveCodeLength="124" docExpressionCount="10" docLength="124" length="1" offset="114" starttimestamp="1597522471057" timestamp="862571561">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="81532" _type="Insert" date="Tue Aug 25 15:50:42 EDT 2020" docASTNodeCount="23" docActiveCodeLength="125" docExpressionCount="10" docLength="125" length="1" offset="115" starttimestamp="1597522471057" timestamp="862571680">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="81534" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="124" docExpressionCount="10" docLength="124" endLine="4" length="1" offset="115" startLine="4" starttimestamp="1597522471057" timestamp="862571948">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="81536" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="123" docExpressionCount="10" docLength="123" endLine="4" length="1" offset="114" startLine="4" starttimestamp="1597522471057" timestamp="862572085">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="81538" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="122" docExpressionCount="10" docLength="122" endLine="4" length="1" offset="113" startLine="4" starttimestamp="1597522471057" timestamp="862572230">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81540" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="121" docExpressionCount="10" docLength="121" endLine="4" length="1" offset="112" startLine="4" starttimestamp="1597522471057" timestamp="862572383">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81542" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="120" docExpressionCount="10" docLength="120" endLine="4" length="1" offset="111" startLine="4" starttimestamp="1597522471057" timestamp="862572524">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81544" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="119" docExpressionCount="10" docLength="119" endLine="4" length="1" offset="110" startLine="4" starttimestamp="1597522471057" timestamp="862572669">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81546" _type="Delete" date="Tue Aug 25 15:50:43 EDT 2020" docASTNodeCount="23" docActiveCodeLength="118" docExpressionCount="10" docLength="118" endLine="4" length="1" offset="109" startLine="4" starttimestamp="1597522471057" timestamp="862572817">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81548" _type="Delete" date="Tue Aug 25 15:50:44 EDT 2020" docASTNodeCount="21" docActiveCodeLength="117" docExpressionCount="9" docLength="117" endLine="4" length="1" offset="108" startLine="4" starttimestamp="1597522471057" timestamp="862573174">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81550" _type="Insert" date="Tue Aug 25 15:50:44 EDT 2020" docASTNodeCount="23" docActiveCodeLength="118" docExpressionCount="10" docLength="118" length="1" offset="108" starttimestamp="1597522471057" timestamp="862573477">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="81552" _type="Insert" date="Tue Aug 25 15:50:44 EDT 2020" docASTNodeCount="23" docActiveCodeLength="119" docExpressionCount="10" docLength="119" length="1" offset="109" starttimestamp="1597522471057" timestamp="862573709">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81554" _type="Insert" date="Tue Aug 25 15:50:44 EDT 2020" docASTNodeCount="23" docActiveCodeLength="120" docExpressionCount="10" docLength="120" length="1" offset="110" starttimestamp="1597522471057" timestamp="862573885">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81556" _type="Insert" date="Tue Aug 25 15:50:45 EDT 2020" docASTNodeCount="23" docActiveCodeLength="121" docExpressionCount="10" docLength="121" length="1" offset="111" starttimestamp="1597522471057" timestamp="862574081">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81558" _type="Insert" date="Tue Aug 25 15:50:45 EDT 2020" docASTNodeCount="23" docActiveCodeLength="122" docExpressionCount="10" docLength="122" length="1" offset="112" starttimestamp="1597522471057" timestamp="862574316">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81560" _type="Insert" date="Tue Aug 25 15:50:45 EDT 2020" docASTNodeCount="23" docActiveCodeLength="123" docExpressionCount="10" docLength="123" length="1" offset="113" starttimestamp="1597522471057" timestamp="862574526">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81562" _type="Insert" date="Tue Aug 25 15:50:45 EDT 2020" docASTNodeCount="23" docActiveCodeLength="124" docExpressionCount="10" docLength="124" length="1" offset="114" starttimestamp="1597522471057" timestamp="862574872">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="81564" _type="Insert" date="Tue Aug 25 15:50:46 EDT 2020" docASTNodeCount="23" docActiveCodeLength="125" docExpressionCount="10" docLength="125" length="1" offset="115" starttimestamp="1597522471057" timestamp="862574951">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="81566" _type="Insert" date="Tue Aug 25 15:50:46 EDT 2020" docASTNodeCount="23" docActiveCodeLength="126" docExpressionCount="10" docLength="126" length="1" offset="116" starttimestamp="1597522471057" timestamp="862575105">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81568" _type="Insert" date="Tue Aug 25 15:50:46 EDT 2020" docASTNodeCount="23" docActiveCodeLength="127" docExpressionCount="10" docLength="127" length="1" offset="117" starttimestamp="1597522471057" timestamp="862575332">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81559" _type="InsertStringCommand" date="Tue Aug 25 15:50:45 EDT 2020" starttimestamp="1597522471057" timestamp="862574320" timestamp2="862574320">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81561" _type="InsertStringCommand" date="Tue Aug 25 15:50:45 EDT 2020" starttimestamp="1597522471057" timestamp="862574529" timestamp2="862574529">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81563" _type="InsertStringCommand" date="Tue Aug 25 15:50:45 EDT 2020" starttimestamp="1597522471057" timestamp="862574876" timestamp2="862574876">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="81565" _type="InsertStringCommand" date="Tue Aug 25 15:50:46 EDT 2020" starttimestamp="1597522471057" timestamp="862574953" timestamp2="862574953">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="81567" _type="InsertStringCommand" date="Tue Aug 25 15:50:46 EDT 2020" starttimestamp="1597522471057" timestamp="862575107" timestamp2="862575107">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81569" _type="InsertStringCommand" date="Tue Aug 25 15:50:46 EDT 2020" starttimestamp="1597522471057" timestamp="862575336" timestamp2="862575336">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81571" _type="InsertStringCommand" date="Tue Aug 25 15:50:47 EDT 2020" starttimestamp="1597522471057" timestamp="862576360" timestamp2="862576360">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81573" _type="InsertStringCommand" date="Tue Aug 25 15:50:47 EDT 2020" starttimestamp="1597522471057" timestamp="862576593" timestamp2="862576593">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="81575" _type="InsertStringCommand" date="Tue Aug 25 15:50:47 EDT 2020" starttimestamp="1597522471057" timestamp="862576714" timestamp2="862576714">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81577" _type="InsertStringCommand" date="Tue Aug 25 15:50:48 EDT 2020" starttimestamp="1597522471057" timestamp="862577367" timestamp2="862577367">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="81579" _type="InsertStringCommand" date="Tue Aug 25 15:50:48 EDT 2020" starttimestamp="1597522471057" timestamp="862577622" timestamp2="862577622">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="81581" _type="InsertStringCommand" date="Tue Aug 25 15:50:49 EDT 2020" starttimestamp="1597522471057" timestamp="862578315" timestamp2="862578315">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="81582" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Aug 25 15:50:49 EDT 2020" start_end="START" starttimestamp="1597522471057" timestamp="862578323" />
  <Command __id="81583" _type="ShellCommand" date="Tue Aug 25 15:50:51 EDT 2020" starttimestamp="1597522471057" timestamp="862580023" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81584" _type="ShellCommand" date="Tue Aug 25 15:50:51 EDT 2020" starttimestamp="1597522471057" timestamp="862580231" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81585" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Aug 25 15:50:51 EDT 2020" start_end="END" starttimestamp="1597522471057" timestamp="862580249" />
  <Command __id="81587" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Aug 25 15:50:52 EDT 2020" start_end="END" starttimestamp="1597522471057" timestamp="862581300" />
  <Command __id="81588" _type="MoveCaretCommand" caretOffset="104" date="Tue Aug 25 15:50:52 EDT 2020" docOffset="104" starttimestamp="1597522471057" timestamp="862581413" />
  <Command __id="81590" _type="InsertStringCommand" date="Tue Aug 25 15:50:53 EDT 2020" starttimestamp="1597522471057" timestamp="862581986" timestamp2="862581986">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="81570" _type="Insert" date="Tue Aug 25 15:50:47 EDT 2020" docASTNodeCount="23" docActiveCodeLength="128" docExpressionCount="10" docLength="128" length="1" offset="118" starttimestamp="1597522471057" timestamp="862576358">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="81572" _type="Insert" date="Tue Aug 25 15:50:47 EDT 2020" docASTNodeCount="23" docActiveCodeLength="129" docExpressionCount="10" docLength="129" length="1" offset="119" starttimestamp="1597522471057" timestamp="862576589">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="81574" _type="Insert" date="Tue Aug 25 15:50:47 EDT 2020" docASTNodeCount="23" docActiveCodeLength="130" docExpressionCount="10" docLength="130" length="1" offset="120" starttimestamp="1597522471057" timestamp="862576709">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81576" _type="Insert" date="Tue Aug 25 15:50:48 EDT 2020" docASTNodeCount="23" docActiveCodeLength="131" docExpressionCount="10" docLength="131" length="1" offset="121" starttimestamp="1597522471057" timestamp="862577365">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="81578" _type="Insert" date="Tue Aug 25 15:50:48 EDT 2020" docASTNodeCount="23" docActiveCodeLength="132" docExpressionCount="10" docLength="132" length="1" offset="122" starttimestamp="1597522471057" timestamp="862577619">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="81580" _type="Insert" date="Tue Aug 25 15:50:49 EDT 2020" docASTNodeCount="23" docActiveCodeLength="133" docExpressionCount="10" docLength="133" length="1" offset="123" starttimestamp="1597522471057" timestamp="862578313">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="81586" _type="Insert" date="Tue Aug 25 15:50:51 EDT 2020" docASTNodeCount="26" docActiveCodeLength="144" docExpressionCount="13" docLength="144" length="11" offset="124" starttimestamp="1597522471057" timestamp="862580256">
    <text><![CDATA[main(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="81589" _type="Insert" date="Tue Aug 25 15:50:53 EDT 2020" docASTNodeCount="26" docActiveCodeLength="148" docExpressionCount="13" docLength="148" length="4" offset="104" starttimestamp="1597522471057" timestamp="862581983">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="81592" _type="Insert" date="Tue Aug 25 15:50:55 EDT 2020" docASTNodeCount="26" docActiveCodeLength="151" docExpressionCount="13" docLength="151" length="3" offset="60" starttimestamp="1597522471057" timestamp="862584081">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="81591" _type="MoveCaretCommand" caretOffset="60" date="Tue Aug 25 15:50:54 EDT 2020" docOffset="60" starttimestamp="1597522471057" timestamp="862583766" />
  <Command __id="81593" _type="InsertStringCommand" date="Tue Aug 25 15:50:55 EDT 2020" starttimestamp="1597522471057" timestamp="862584085" timestamp2="862584085">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81595" _type="InsertStringCommand" date="Tue Aug 25 15:50:56 EDT 2020" starttimestamp="1597522471057" timestamp="862585637" timestamp2="862585637">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="81597" _type="InsertStringCommand" date="Tue Aug 25 15:50:56 EDT 2020" starttimestamp="1597522471057" timestamp="862585926" timestamp2="862585926">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81599" _type="InsertStringCommand" date="Tue Aug 25 15:50:57 EDT 2020" starttimestamp="1597522471057" timestamp="862586132" timestamp2="862586132">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:50:57 EDT 2020" starttimestamp="1597522471057" timestamp="862586598" />
  <Command __id="81603" _type="InsertStringCommand" date="Tue Aug 25 15:50:58 EDT 2020" starttimestamp="1597522471057" timestamp="862587045" timestamp2="862587045">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="81605" _type="InsertStringCommand" date="Tue Aug 25 15:50:58 EDT 2020" starttimestamp="1597522471057" timestamp="862587130" timestamp2="862587130">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81607" _type="InsertStringCommand" date="Tue Aug 25 15:50:58 EDT 2020" starttimestamp="1597522471057" timestamp="862587321" timestamp2="862587321">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="81609" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862587943" timestamp2="862587943">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81611" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588108" timestamp2="862588108">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81613" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588262" timestamp2="862588262">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81615" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588337" timestamp2="862588337">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81617" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588406" timestamp2="862588406">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81619" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588629" timestamp2="862588629">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81621" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588744" timestamp2="862588744">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="81623" _type="InsertStringCommand" date="Tue Aug 25 15:50:59 EDT 2020" starttimestamp="1597522471057" timestamp="862588818" timestamp2="862588818">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81625" _type="InsertStringCommand" date="Tue Aug 25 15:51:00 EDT 2020" starttimestamp="1597522471057" timestamp="862589565" timestamp2="862589565">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="81627" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:01 EDT 2020" starttimestamp="1597522471057" timestamp="862590147" />
  <Command __id="81629" _type="InsertStringCommand" date="Tue Aug 25 15:51:01 EDT 2020" starttimestamp="1597522471057" timestamp="862590376" timestamp2="862590376">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81631" _type="InsertStringCommand" date="Tue Aug 25 15:51:01 EDT 2020" starttimestamp="1597522471057" timestamp="862590611" timestamp2="862590611">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="81633" _type="InsertStringCommand" date="Tue Aug 25 15:51:01 EDT 2020" starttimestamp="1597522471057" timestamp="862590699" timestamp2="862590699">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="81635" _type="InsertStringCommand" date="Tue Aug 25 15:51:01 EDT 2020" starttimestamp="1597522471057" timestamp="862590858" timestamp2="862590858">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="81637" _type="InsertStringCommand" date="Tue Aug 25 15:51:02 EDT 2020" starttimestamp="1597522471057" timestamp="862591037" timestamp2="862591037">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="81594" _type="Insert" date="Tue Aug 25 15:50:56 EDT 2020" docASTNodeCount="26" docActiveCodeLength="152" docExpressionCount="13" docLength="152" length="1" offset="63" starttimestamp="1597522471057" timestamp="862585634">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="81596" _type="Insert" date="Tue Aug 25 15:50:56 EDT 2020" docASTNodeCount="26" docActiveCodeLength="153" docExpressionCount="13" docLength="153" length="1" offset="64" starttimestamp="1597522471057" timestamp="862585924">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81598" _type="Insert" date="Tue Aug 25 15:50:57 EDT 2020" docASTNodeCount="26" docActiveCodeLength="154" docExpressionCount="13" docLength="154" length="1" offset="65" starttimestamp="1597522471057" timestamp="862586129">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81600" _type="Delete" date="Tue Aug 25 15:50:57 EDT 2020" docASTNodeCount="26" docActiveCodeLength="153" docExpressionCount="13" docLength="153" endLine="3" length="1" offset="65" startLine="3" starttimestamp="1597522471057" timestamp="862586597">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81602" _type="Insert" date="Tue Aug 25 15:50:58 EDT 2020" docASTNodeCount="26" docActiveCodeLength="154" docExpressionCount="13" docLength="154" length="1" offset="65" starttimestamp="1597522471057" timestamp="862587041">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81604" _type="Insert" date="Tue Aug 25 15:50:58 EDT 2020" docASTNodeCount="26" docActiveCodeLength="155" docExpressionCount="13" docLength="155" length="1" offset="66" starttimestamp="1597522471057" timestamp="862587127">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81606" _type="Insert" date="Tue Aug 25 15:50:58 EDT 2020" docASTNodeCount="27" docActiveCodeLength="156" docExpressionCount="13" docLength="156" length="1" offset="67" starttimestamp="1597522471057" timestamp="862587318">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="81608" _type="Insert" date="Tue Aug 25 15:50:58 EDT 2020" docASTNodeCount="27" docActiveCodeLength="157" docExpressionCount="13" docLength="157" length="1" offset="68" starttimestamp="1597522471057" timestamp="862587941">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81610" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="27" docActiveCodeLength="158" docExpressionCount="13" docLength="158" length="1" offset="69" starttimestamp="1597522471057" timestamp="862588105">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81612" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="27" docActiveCodeLength="159" docExpressionCount="13" docLength="159" length="1" offset="70" starttimestamp="1597522471057" timestamp="862588261">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81614" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="27" docActiveCodeLength="160" docExpressionCount="13" docLength="160" length="1" offset="71" starttimestamp="1597522471057" timestamp="862588334">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="81616" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="27" docActiveCodeLength="161" docExpressionCount="13" docLength="161" length="1" offset="72" starttimestamp="1597522471057" timestamp="862588404">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81618" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="27" docActiveCodeLength="162" docExpressionCount="13" docLength="162" length="1" offset="73" starttimestamp="1597522471057" timestamp="862588625">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81620" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="28" docActiveCodeLength="163" docExpressionCount="13" docLength="163" length="1" offset="74" starttimestamp="1597522471057" timestamp="862588742">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="81622" _type="Insert" date="Tue Aug 25 15:50:59 EDT 2020" docASTNodeCount="28" docActiveCodeLength="164" docExpressionCount="13" docLength="164" length="1" offset="75" starttimestamp="1597522471057" timestamp="862588814">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81624" _type="Insert" date="Tue Aug 25 15:51:00 EDT 2020" docASTNodeCount="28" docActiveCodeLength="165" docExpressionCount="13" docLength="165" length="1" offset="76" starttimestamp="1597522471057" timestamp="862589564">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81626" _type="Delete" date="Tue Aug 25 15:51:01 EDT 2020" docASTNodeCount="28" docActiveCodeLength="164" docExpressionCount="13" docLength="164" endLine="3" length="1" offset="76" startLine="3" starttimestamp="1597522471057" timestamp="862590146">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="81628" _type="Insert" date="Tue Aug 25 15:51:01 EDT 2020" docASTNodeCount="28" docActiveCodeLength="165" docExpressionCount="13" docLength="165" length="1" offset="76" starttimestamp="1597522471057" timestamp="862590373">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="81630" _type="Insert" date="Tue Aug 25 15:51:01 EDT 2020" docASTNodeCount="28" docActiveCodeLength="166" docExpressionCount="13" docLength="166" length="1" offset="77" starttimestamp="1597522471057" timestamp="862590608">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81632" _type="Insert" date="Tue Aug 25 15:51:01 EDT 2020" docASTNodeCount="28" docActiveCodeLength="167" docExpressionCount="13" docLength="167" length="1" offset="78" starttimestamp="1597522471057" timestamp="862590698">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="81634" _type="Insert" date="Tue Aug 25 15:51:01 EDT 2020" docASTNodeCount="28" docActiveCodeLength="168" docExpressionCount="13" docLength="168" length="1" offset="79" starttimestamp="1597522471057" timestamp="862590855">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="81636" _type="Insert" date="Tue Aug 25 15:51:02 EDT 2020" docASTNodeCount="28" docActiveCodeLength="169" docExpressionCount="13" docLength="169" length="1" offset="80" starttimestamp="1597522471057" timestamp="862591034">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="81638" _type="Insert" date="Tue Aug 25 15:51:02 EDT 2020" docASTNodeCount="28" docActiveCodeLength="170" docExpressionCount="13" docLength="170" length="1" offset="81" starttimestamp="1597522471057" timestamp="862591254">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="81640" _type="Insert" date="Tue Aug 25 15:51:02 EDT 2020" docASTNodeCount="28" docActiveCodeLength="172" docExpressionCount="13" docLength="172" length="2" offset="82" starttimestamp="1597522471057" timestamp="862591826">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="81643" _type="Insert" date="Tue Aug 25 15:51:03 EDT 2020" docASTNodeCount="28" docActiveCodeLength="173" docExpressionCount="13" docLength="173" length="1" offset="84" starttimestamp="1597522471057" timestamp="862592279">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81645" _type="Insert" date="Tue Aug 25 15:51:04 EDT 2020" docASTNodeCount="34" docActiveCodeLength="174" docExpressionCount="15" docLength="174" length="1" offset="85" starttimestamp="1597522471057" timestamp="862593862">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="81647" _type="Insert" date="Tue Aug 25 15:51:05 EDT 2020" docASTNodeCount="34" docActiveCodeLength="175" docExpressionCount="15" docLength="175" length="1" offset="86" starttimestamp="1597522471057" timestamp="862594166">
    <text><![CDATA[Y]]></text>
  </DocumentChange>
  <DocumentChange __id="81649" _type="Insert" date="Tue Aug 25 15:51:05 EDT 2020" docASTNodeCount="34" docActiveCodeLength="176" docExpressionCount="15" docLength="176" length="1" offset="87" starttimestamp="1597522471057" timestamp="862594772">
    <text><![CDATA[_]]></text>
  </DocumentChange>
  <DocumentChange __id="81651" _type="Insert" date="Tue Aug 25 15:51:05 EDT 2020" docASTNodeCount="34" docActiveCodeLength="177" docExpressionCount="15" docLength="177" length="1" offset="88" starttimestamp="1597522471057" timestamp="862594926">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="81653" _type="Insert" date="Tue Aug 25 15:51:06 EDT 2020" docASTNodeCount="34" docActiveCodeLength="178" docExpressionCount="15" docLength="178" length="1" offset="89" starttimestamp="1597522471057" timestamp="862595303">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="81655" _type="Insert" date="Tue Aug 25 15:51:06 EDT 2020" docASTNodeCount="34" docActiveCodeLength="179" docExpressionCount="15" docLength="179" length="1" offset="90" starttimestamp="1597522471057" timestamp="862595572">
    <text><![CDATA[G]]></text>
  </DocumentChange>
  <DocumentChange __id="81657" _type="Insert" date="Tue Aug 25 15:51:06 EDT 2020" docASTNodeCount="34" docActiveCodeLength="180" docExpressionCount="15" docLength="180" length="1" offset="91" starttimestamp="1597522471057" timestamp="862595609">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="81659" _type="Insert" date="Tue Aug 25 15:51:07 EDT 2020" docASTNodeCount="34" docActiveCodeLength="181" docExpressionCount="15" docLength="181" length="1" offset="92" starttimestamp="1597522471057" timestamp="862596032">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81661" _type="Insert" date="Tue Aug 25 15:51:07 EDT 2020" docASTNodeCount="34" docActiveCodeLength="182" docExpressionCount="15" docLength="182" length="1" offset="93" starttimestamp="1597522471057" timestamp="862596523">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="81663" _type="Insert" date="Tue Aug 25 15:51:07 EDT 2020" docASTNodeCount="34" docActiveCodeLength="183" docExpressionCount="15" docLength="183" length="1" offset="94" starttimestamp="1597522471057" timestamp="862596815">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="81665" _type="Insert" date="Tue Aug 25 15:51:08 EDT 2020" docASTNodeCount="34" docActiveCodeLength="184" docExpressionCount="15" docLength="184" length="1" offset="95" starttimestamp="1597522471057" timestamp="862597376">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="81667" _type="Insert" date="Tue Aug 25 15:51:08 EDT 2020" docASTNodeCount="35" docActiveCodeLength="193" docExpressionCount="16" docLength="193" length="9" offset="96" starttimestamp="1597522471057" timestamp="862597676">
    <text><![CDATA[
			
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="81669" _type="Insert" date="Tue Aug 25 15:51:19 EDT 2020" docASTNodeCount="36" docActiveCodeLength="195" docExpressionCount="17" docLength="195" length="2" offset="101" starttimestamp="1597522471057" timestamp="862608421">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="81671" _type="Insert" date="Tue Aug 25 15:51:20 EDT 2020" docASTNodeCount="36" docActiveCodeLength="196" docExpressionCount="17" docLength="196" length="1" offset="102" starttimestamp="1597522471057" timestamp="862609000">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <DocumentChange __id="81673" _type="Insert" date="Tue Aug 25 15:51:20 EDT 2020" docASTNodeCount="36" docActiveCodeLength="197" docExpressionCount="17" docLength="197" length="1" offset="103" starttimestamp="1597522471057" timestamp="862609332">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="81675" _type="Insert" date="Tue Aug 25 15:51:20 EDT 2020" docASTNodeCount="36" docActiveCodeLength="198" docExpressionCount="17" docLength="198" length="1" offset="104" starttimestamp="1597522471057" timestamp="862609527">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="81677" _type="Insert" date="Tue Aug 25 15:51:20 EDT 2020" docASTNodeCount="36" docActiveCodeLength="199" docExpressionCount="17" docLength="199" length="1" offset="105" starttimestamp="1597522471057" timestamp="862609760">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="81639" _type="InsertStringCommand" date="Tue Aug 25 15:51:02 EDT 2020" starttimestamp="1597522471057" timestamp="862591256" timestamp2="862591256">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="81641" _type="InsertStringCommand" date="Tue Aug 25 15:51:02 EDT 2020" starttimestamp="1597522471057" timestamp="862591834" timestamp2="862591834">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="81642" _type="InsertStringCommand" date="Tue Aug 25 15:51:03 EDT 2020" starttimestamp="1597522471057" timestamp="862591996" timestamp2="862591996">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="81644" _type="InsertStringCommand" date="Tue Aug 25 15:51:03 EDT 2020" starttimestamp="1597522471057" timestamp="862592282" timestamp2="862592282">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81646" _type="InsertStringCommand" date="Tue Aug 25 15:51:04 EDT 2020" starttimestamp="1597522471057" timestamp="862593865" timestamp2="862593865">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="81648" _type="InsertStringCommand" date="Tue Aug 25 15:51:05 EDT 2020" starttimestamp="1597522471057" timestamp="862594169" timestamp2="862594169">
    <data><![CDATA[Y]]></data>
  </Command>
  <Command __id="81650" _type="InsertStringCommand" date="Tue Aug 25 15:51:05 EDT 2020" starttimestamp="1597522471057" timestamp="862594776" timestamp2="862594776">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="81652" _type="InsertStringCommand" date="Tue Aug 25 15:51:05 EDT 2020" starttimestamp="1597522471057" timestamp="862594929" timestamp2="862594929">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="81654" _type="InsertStringCommand" date="Tue Aug 25 15:51:06 EDT 2020" starttimestamp="1597522471057" timestamp="862595306" timestamp2="862595306">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="81656" _type="InsertStringCommand" date="Tue Aug 25 15:51:06 EDT 2020" starttimestamp="1597522471057" timestamp="862595575" timestamp2="862595575">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="81658" _type="InsertStringCommand" date="Tue Aug 25 15:51:06 EDT 2020" starttimestamp="1597522471057" timestamp="862595612" timestamp2="862595612">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81660" _type="InsertStringCommand" date="Tue Aug 25 15:51:07 EDT 2020" starttimestamp="1597522471057" timestamp="862596035" timestamp2="862596035">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81662" _type="InsertStringCommand" date="Tue Aug 25 15:51:07 EDT 2020" starttimestamp="1597522471057" timestamp="862596527" timestamp2="862596527">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="81664" _type="InsertStringCommand" date="Tue Aug 25 15:51:07 EDT 2020" starttimestamp="1597522471057" timestamp="862596819" timestamp2="862596819">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="81666" _type="InsertStringCommand" date="Tue Aug 25 15:51:08 EDT 2020" starttimestamp="1597522471057" timestamp="862597380" timestamp2="862597380">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="81668" _type="InsertStringCommand" date="Tue Aug 25 15:51:08 EDT 2020" starttimestamp="1597522471057" timestamp="862597679" timestamp2="862597679">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81670" _type="InsertStringCommand" date="Tue Aug 25 15:51:19 EDT 2020" starttimestamp="1597522471057" timestamp="862608432" timestamp2="862608432">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="81672" _type="InsertStringCommand" date="Tue Aug 25 15:51:20 EDT 2020" starttimestamp="1597522471057" timestamp="862609003" timestamp2="862609003">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="81674" _type="InsertStringCommand" date="Tue Aug 25 15:51:20 EDT 2020" starttimestamp="1597522471057" timestamp="862609337" timestamp2="862609337">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="81676" _type="InsertStringCommand" date="Tue Aug 25 15:51:20 EDT 2020" starttimestamp="1597522471057" timestamp="862609532" timestamp2="862609532">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="81678" _type="InsertStringCommand" date="Tue Aug 25 15:51:20 EDT 2020" starttimestamp="1597522471057" timestamp="862609764" timestamp2="862609764">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="81680" _type="InsertStringCommand" date="Tue Aug 25 15:51:21 EDT 2020" starttimestamp="1597522471057" timestamp="862610882" timestamp2="862610882">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="81682" _type="InsertStringCommand" date="Tue Aug 25 15:51:22 EDT 2020" starttimestamp="1597522471057" timestamp="862611743" timestamp2="862611743">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="81684" _type="InsertStringCommand" date="Tue Aug 25 15:51:23 EDT 2020" starttimestamp="1597522471057" timestamp="862612009" timestamp2="862612009">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="81686" _type="InsertStringCommand" date="Tue Aug 25 15:51:23 EDT 2020" starttimestamp="1597522471057" timestamp="862612466" timestamp2="862612466">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="81688" _type="InsertStringCommand" date="Tue Aug 25 15:51:23 EDT 2020" starttimestamp="1597522471057" timestamp="862612895" timestamp2="862612895">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="81690" _type="InsertStringCommand" date="Tue Aug 25 15:51:24 EDT 2020" starttimestamp="1597522471057" timestamp="862613279" timestamp2="862613279">
    <data><![CDATA[0]]></data>
  </Command>
  <DocumentChange __id="81679" _type="Insert" date="Tue Aug 25 15:51:21 EDT 2020" docASTNodeCount="36" docActiveCodeLength="200" docExpressionCount="17" docLength="200" length="1" offset="106" starttimestamp="1597522471057" timestamp="862610876">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="81681" _type="Insert" date="Tue Aug 25 15:51:22 EDT 2020" docASTNodeCount="36" docActiveCodeLength="201" docExpressionCount="17" docLength="201" length="1" offset="107" starttimestamp="1597522471057" timestamp="862611737">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="81683" _type="Insert" date="Tue Aug 25 15:51:23 EDT 2020" docASTNodeCount="36" docActiveCodeLength="202" docExpressionCount="17" docLength="202" length="1" offset="108" starttimestamp="1597522471057" timestamp="862611997">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <DocumentChange __id="81685" _type="Insert" date="Tue Aug 25 15:51:23 EDT 2020" docASTNodeCount="36" docActiveCodeLength="203" docExpressionCount="17" docLength="203" length="1" offset="109" starttimestamp="1597522471057" timestamp="862612456">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="81687" _type="Insert" date="Tue Aug 25 15:51:23 EDT 2020" docASTNodeCount="36" docActiveCodeLength="204" docExpressionCount="17" docLength="204" length="1" offset="110" starttimestamp="1597522471057" timestamp="862612882">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="81689" _type="Insert" date="Tue Aug 25 15:51:24 EDT 2020" docASTNodeCount="36" docActiveCodeLength="205" docExpressionCount="17" docLength="205" length="1" offset="111" starttimestamp="1597522471057" timestamp="862613268">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="81692" _type="Insert" date="Tue Aug 25 15:51:26 EDT 2020" docASTNodeCount="36" docActiveCodeLength="206" docExpressionCount="17" docLength="206" length="1" offset="113" starttimestamp="1597522471057" timestamp="862615056">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="81694" _type="Insert" date="Tue Aug 25 15:51:26 EDT 2020" docASTNodeCount="36" docActiveCodeLength="211" docExpressionCount="17" docLength="211" length="5" offset="114" starttimestamp="1597522471057" timestamp="862615499">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="81696" _type="Insert" date="Tue Aug 25 15:51:27 EDT 2020" docASTNodeCount="37" docActiveCodeLength="213" docExpressionCount="18" docLength="213" length="2" offset="119" starttimestamp="1597522471057" timestamp="862616268">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="81698" _type="Insert" date="Tue Aug 25 15:51:27 EDT 2020" docASTNodeCount="37" docActiveCodeLength="214" docExpressionCount="18" docLength="214" length="1" offset="120" starttimestamp="1597522471057" timestamp="862616780">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="81700" _type="Insert" date="Tue Aug 25 15:51:28 EDT 2020" docASTNodeCount="37" docActiveCodeLength="215" docExpressionCount="18" docLength="215" length="1" offset="121" starttimestamp="1597522471057" timestamp="862617042">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="81702" _type="Delete" date="Tue Aug 25 15:51:28 EDT 2020" docASTNodeCount="37" docActiveCodeLength="214" docExpressionCount="18" docLength="214" endLine="5" length="1" offset="121" startLine="5" starttimestamp="1597522471057" timestamp="862617668">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="81704" _type="Delete" date="Tue Aug 25 15:51:28 EDT 2020" docASTNodeCount="37" docActiveCodeLength="213" docExpressionCount="18" docLength="213" endLine="5" length="1" offset="120" startLine="5" starttimestamp="1597522471057" timestamp="862617792">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="81706" _type="Insert" date="Tue Aug 25 15:51:29 EDT 2020" docASTNodeCount="37" docActiveCodeLength="214" docExpressionCount="18" docLength="214" length="1" offset="120" starttimestamp="1597522471057" timestamp="862618373">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="81708" _type="Insert" date="Tue Aug 25 15:51:29 EDT 2020" docASTNodeCount="37" docActiveCodeLength="215" docExpressionCount="18" docLength="215" length="1" offset="121" starttimestamp="1597522471057" timestamp="862618545">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="81691" _type="InsertStringCommand" date="Tue Aug 25 15:51:25 EDT 2020" starttimestamp="1597522471057" timestamp="862614386" timestamp2="862614386">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="81693" _type="InsertStringCommand" date="Tue Aug 25 15:51:26 EDT 2020" starttimestamp="1597522471057" timestamp="862615062" timestamp2="862615062">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="81695" _type="InsertStringCommand" date="Tue Aug 25 15:51:26 EDT 2020" starttimestamp="1597522471057" timestamp="862615505" timestamp2="862615505">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81697" _type="InsertStringCommand" date="Tue Aug 25 15:51:27 EDT 2020" starttimestamp="1597522471057" timestamp="862616280" timestamp2="862616280">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="81699" _type="InsertStringCommand" date="Tue Aug 25 15:51:27 EDT 2020" starttimestamp="1597522471057" timestamp="862616784" timestamp2="862616784">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="81701" _type="InsertStringCommand" date="Tue Aug 25 15:51:28 EDT 2020" starttimestamp="1597522471057" timestamp="862617047" timestamp2="862617047">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="81703" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:28 EDT 2020" starttimestamp="1597522471057" timestamp="862617670" />
  <Command __id="81705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:28 EDT 2020" starttimestamp="1597522471057" timestamp="862617794" />
  <Command __id="81707" _type="InsertStringCommand" date="Tue Aug 25 15:51:29 EDT 2020" starttimestamp="1597522471057" timestamp="862618377" timestamp2="862618377">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="81709" _type="InsertStringCommand" date="Tue Aug 25 15:51:29 EDT 2020" starttimestamp="1597522471057" timestamp="862618549" timestamp2="862618549">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="81710" _type="InsertStringCommand" date="Tue Aug 25 15:51:30 EDT 2020" starttimestamp="1597522471057" timestamp="862619531" timestamp2="862619531">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="81712" _type="InsertStringCommand" date="Tue Aug 25 15:51:34 EDT 2020" starttimestamp="1597522471057" timestamp="862623163" timestamp2="862623163">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81714" _type="InsertStringCommand" date="Tue Aug 25 15:51:35 EDT 2020" starttimestamp="1597522471057" timestamp="862624035" timestamp2="862624035">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="81715" _type="MoveCaretCommand" caretOffset="127" date="Tue Aug 25 15:51:36 EDT 2020" docOffset="127" starttimestamp="1597522471057" timestamp="862625812" />
  <Command __id="81717" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:37 EDT 2020" starttimestamp="1597522471057" timestamp="862626158" />
  <Command __id="81719" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:37 EDT 2020" starttimestamp="1597522471057" timestamp="862626285" />
  <Command __id="81720" _type="MoveCaretCommand" caretOffset="205" date="Tue Aug 25 15:51:39 EDT 2020" docOffset="205" starttimestamp="1597522471057" timestamp="862628749" />
  <Command __id="81721" _type="SelectTextCommand" caretOffset="206" date="Tue Aug 25 15:51:40 EDT 2020" end="206" start="202" starttimestamp="1597522471057" timestamp="862628943" />
  <Command __id="81723" _type="InsertStringCommand" date="Tue Aug 25 15:51:40 EDT 2020" starttimestamp="1597522471057" timestamp="862629444" timestamp2="862629444">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="81725" _type="InsertStringCommand" date="Tue Aug 25 15:51:40 EDT 2020" starttimestamp="1597522471057" timestamp="862629692" timestamp2="862629692">
    <data><![CDATA[Y]]></data>
  </Command>
  <Command __id="81727" _type="InsertStringCommand" date="Tue Aug 25 15:51:41 EDT 2020" starttimestamp="1597522471057" timestamp="862630341" timestamp2="862630341">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="81729" _type="InsertStringCommand" date="Tue Aug 25 15:51:41 EDT 2020" starttimestamp="1597522471057" timestamp="862630496" timestamp2="862630496">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="81731" _type="InsertStringCommand" date="Tue Aug 25 15:51:41 EDT 2020" starttimestamp="1597522471057" timestamp="862630839" timestamp2="862630839">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="81733" _type="InsertStringCommand" date="Tue Aug 25 15:51:42 EDT 2020" starttimestamp="1597522471057" timestamp="862631141" timestamp2="862631141">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81735" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 15:51:42 EDT 2020" starttimestamp="1597522471057" timestamp="862631822" />
  <Command __id="81737" _type="InsertStringCommand" date="Tue Aug 25 15:51:43 EDT 2020" starttimestamp="1597522471057" timestamp="862632200" timestamp2="862632200">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="81739" _type="InsertStringCommand" date="Tue Aug 25 15:51:43 EDT 2020" starttimestamp="1597522471057" timestamp="862632248" timestamp2="862632248">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="81740" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:51:45 EDT 2020" starttimestamp="1597522471057" timestamp="862634238" />
  <Command __id="81741" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:51:45 EDT 2020" starttimestamp="1597522471057" timestamp="862634320" />
  <Command __id="81742" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:51:45 EDT 2020" starttimestamp="1597522471057" timestamp="862634341" />
  <Command __id="81743" _type="MoveCaretCommand" caretOffset="123" date="Tue Aug 25 15:51:47 EDT 2020" docOffset="123" starttimestamp="1597522471057" timestamp="862636489" />
  <Command __id="81744" _type="MoveCaretCommand" caretOffset="129" date="Tue Aug 25 15:51:48 EDT 2020" docOffset="129" starttimestamp="1597522471057" timestamp="862637625" />
  <Command __id="81746" _type="InsertStringCommand" date="Tue Aug 25 15:51:49 EDT 2020" starttimestamp="1597522471057" timestamp="862638263" timestamp2="862638263">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="81747" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 15:51:49 EDT 2020" starttimestamp="1597522471057" timestamp="862638861" />
  <Command __id="81748" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:51:50 EDT 2020" starttimestamp="1597522471057" timestamp="862638990" />
  <Command __id="81749" _type="EclipseCommand" commandID="" date="Tue Aug 25 15:51:50 EDT 2020" starttimestamp="1597522471057" timestamp="862639019" />
  <Command __id="81750" _type="MoveCaretCommand" caretOffset="182" date="Tue Aug 25 15:51:52 EDT 2020" docOffset="182" starttimestamp="1597522471057" timestamp="862640964" />
  <Command __id="81752" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:52:20 EDT 2020" docASTNodeCount="203" docActiveCodeLength="1063" docExpressionCount="148" docLength="1063" projectName="GradescopeRunner" starttimestamp="1597522471057" timestamp="862669164">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeRunner\src\edu\unc\cs\GradescopeRunner.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;

import edu.unc.cs.json.GradescopeVisibility;
import edu.unc.cs.json.Grading;
import edu.unc.cs.json.JsonGradingManager;


public class GradescopeRunner {

	public static void main(String[] args) {
		if (args.length < 2) {
			System.err.println("Please provide source and destination json files");
			System.exit(-1);
		}
		Path source = Paths.get(args[0]);
		Path dest = Paths.get(args[1]);
		
		try {
			Files.createDirectories(dest.subpath(0, dest.getNameCount() - 1));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		try {
			Optional<Grading> grading = JsonGradingManager.parse(source);
			if (grading.isPresent()) {
				JsonGradingManager.write(grading.get(), 0, GradescopeVisibility.VISIBLE, dest);
			} else {
				System.err.println("source grading json file not found");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="81753" _type="MoveCaretCommand" caretOffset="0" date="Tue Aug 25 15:52:20 EDT 2020" docOffset="0" starttimestamp="1597522471057" timestamp="862669472" />
  <Command __id="81755" _type="MoveCaretCommand" caretOffset="182" date="Tue Aug 25 15:52:39 EDT 2020" docOffset="182" starttimestamp="1597522471057" timestamp="862688303" />
  <Command __id="81756" _type="MoveCaretCommand" caretOffset="114" date="Tue Aug 25 15:52:40 EDT 2020" docOffset="114" starttimestamp="1597522471057" timestamp="862689246" />
  <Command __id="81757" _type="MoveCaretCommand" caretOffset="114" date="Tue Aug 25 15:52:41 EDT 2020" docOffset="114" starttimestamp="1597522471057" timestamp="862690592" />
  <Command __id="81758" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Tue Aug 25 15:52:45 EDT 2020" starttimestamp="1597522471057" timestamp="862694413" />
  <Command __id="81759" _type="RunCommand" date="Tue Aug 25 15:52:45 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="862694656" type="Run" />
  <Command __id="81760" _type="RunCommand" date="Tue Aug 25 15:52:45 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="862694656" type="Run" />
  <Command __id="81761" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="862694963" type="Run" />
  <Command __id="81762" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="862695149" type="Run" />
  <Command __id="81763" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="862695482" type="Run" />
  <Command __id="81764" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="862695838" type="Debug" />
  <Command __id="81765" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="862695838" type="Debug" />
  <Command __id="81766" _type="RunCommand" date="Tue Aug 25 15:52:46 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="862695838" type="Run" />
  <Command __id="81767" _type="ExceptionCommand" date="Tue Aug 25 15:52:46 EDT 2020" starttimestamp="1597522471057" timestamp="862695865" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: D:\autograder\submission_metadata.json
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:79)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:230)
	at java.nio.file.Files.newByteChannel(Files.java:361)
	at java.nio.file.Files.newByteChannel(Files.java:407)
	at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)
	at java.nio.file.Files.newInputStream(Files.java:152)
	at java.nio.file.Files.newBufferedReader(Files.java:2784)
	at java.nio.file.Files.readAllLines(Files.java:3202)
	at java.nio.file.Files.readAllLines(Files.java:3242)
	at edu.unc.cs.AssignmentSetup.getRawTimestamp(AssignmentSetup.java:214)
	at edu.unc.cs.AssignmentSetup.createTimestamp(AssignmentSetup.java:204)
	at edu.unc.cs.AssignmentSetup.buildFiles(AssignmentSetup.java:190)
	at edu.unc.cs.AssignmentSetup.main(AssignmentSetup.java:109)
	at edu.unc.cs.Comp524AssignmentSetup.main(Comp524AssignmentSetup.java:11)
]]></exceptionString>
  </Command>
  <Command __id="81768" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Aug 25 15:52:48 EDT 2020" starttimestamp="1597522471057" timestamp="862697414" />
  <Command __id="81769" _type="BreakPointCommand" date="Tue Aug 25 15:52:48 EDT 2020" lineNumber="11" starttimestamp="1597522471057" timestamp="862697415" type="BreakPointAdded" />
  <Command __id="81770" _type="ShellCommand" date="Tue Aug 25 15:54:07 EDT 2020" starttimestamp="1597522471057" timestamp="862776211" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81771" _type="ShellCommand" date="Tue Aug 25 15:54:23 EDT 2020" starttimestamp="1597522471057" timestamp="862792465" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81772" _type="EclipseCommand" commandID="org.eclipse.ui.file.properties" date="Tue Aug 25 15:54:23 EDT 2020" starttimestamp="1597522471057" timestamp="862792512" />
  <Command __id="81773" _type="ShellCommand" date="Tue Aug 25 15:55:12 EDT 2020" starttimestamp="1597522471057" timestamp="862841566" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81774" _type="ShellCommand" date="Tue Aug 25 16:00:34 EDT 2020" starttimestamp="1597522471057" timestamp="863162973" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81775" _type="MoveCaretCommand" caretOffset="125" date="Tue Aug 25 16:00:34 EDT 2020" docOffset="125" starttimestamp="1597522471057" timestamp="863163066" />
  <Command __id="81777" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:00:58 EDT 2020" starttimestamp="1597522471057" timestamp="863187710" />
  <Command __id="81778" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:00:58 EDT 2020" starttimestamp="1597522471057" timestamp="863187712" />
  <Command __id="81779" _type="ShellCommand" date="Tue Aug 25 16:00:58 EDT 2020" starttimestamp="1597522471057" timestamp="863187757" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81754" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 15:52:39 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="862688035">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶"), Diff(INSERT,"	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}"), Diff(EQUAL,"¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

public class Comp524AssignmentSetup {
	final static String[] MY_ARGS = {
			"Comp524F20",
			"01"

	};
	public static void main (String[] args) {
		
		AssignmentSetup.main(MY_ARGS);
	}
}
]]></snapshot>
  </Command>
  <Command __id="81783" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:01:31 EDT 2020" docASTNodeCount="1" docActiveCodeLength="0" docExpressionCount="0" docLength="0" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863220737">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\timestamp\submission_metadata.json]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[]]></snapshot>
  </Command>
  <Command __id="81785" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:01:37 EDT 2020" starttimestamp="1597522471057" timestamp="863226762" />
  <Command __id="81786" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:01:37 EDT 2020" starttimestamp="1597522471057" timestamp="863226769" />
  <Command __id="81788" _type="MoveCaretCommand" caretOffset="4151" date="Tue Aug 25 16:02:02 EDT 2020" docOffset="4598" starttimestamp="1597522471057" timestamp="863251537" />
  <Command __id="81790" _type="ShellCommand" date="Tue Aug 25 16:02:04 EDT 2020" starttimestamp="1597522471057" timestamp="863253688" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81791" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:02:11 EDT 2020" forward="true" matchWord="false" offset="4598" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="863260823" wrapSearch="true">
    <searchString><![CDATA[submission_]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81792" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:02:15 EDT 2020" forward="true" matchWord="false" offset="7367" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="863264633" wrapSearch="true">
    <searchString><![CDATA[submission_]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81793" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:02:16 EDT 2020" forward="true" matchWord="false" offset="8714" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="863265376" wrapSearch="true">
    <searchString><![CDATA[submission_]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81794" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:02:25 EDT 2020" forward="true" matchWord="false" offset="9197" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="863274475" wrapSearch="true">
    <searchString><![CDATA[submission_meta]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="81787" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:02:02 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13136" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863251319">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final "), Diff(DELETE,"int DEFAULT_ASSINGMENT_NUMBER = 1;"), Diff(INSERT,"String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶"), Diff(EQUAL,"¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶"), Diff(INSERT,"//"), Diff(EQUAL,"        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶"), Diff(INSERT,"        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶"), Diff(EQUAL,"    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶                int assignmentNum = Integer.parseInt(args[1]);¶"), Diff(INSERT,"//"), Diff(EQUAL,"                setAssignment(args[0], assignmentNum);¶"), Diff(INSERT,"                setAssignment(args[0], args[1]);¶¶"), Diff(EQUAL,"            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶"), Diff(DELETE,""), Diff(EQUAL,"    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }"), Diff(INSERT,"¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }"), Diff(EQUAL,"¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();

    private static final String GRADER_SOURCE_DIRECTORY = "source";

    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <Command __id="81795" _type="ShellCommand" date="Tue Aug 25 16:02:30 EDT 2020" starttimestamp="1597522471057" timestamp="863279288" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81796" _type="MoveCaretCommand" caretOffset="3114" date="Tue Aug 25 16:02:30 EDT 2020" docOffset="3561" starttimestamp="1597522471057" timestamp="863279401" />
  <DocumentChange __id="81797" _type="Insert" date="Tue Aug 25 16:02:33 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12507" docExpressionCount="1038" docLength="13137" length="1" offset="3561" starttimestamp="1597522471057" timestamp="863281976">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81798" _type="InsertStringCommand" date="Tue Aug 25 16:02:33 EDT 2020" starttimestamp="1597522471057" timestamp="863281981" timestamp2="863281981">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81799" _type="Insert" date="Tue Aug 25 16:02:33 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12508" docExpressionCount="1038" docLength="13138" length="1" offset="3562" starttimestamp="1597522471057" timestamp="863282253">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="81800" _type="InsertStringCommand" date="Tue Aug 25 16:02:33 EDT 2020" starttimestamp="1597522471057" timestamp="863282258" timestamp2="863282258">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="81801" _type="Insert" date="Tue Aug 25 16:02:33 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12509" docExpressionCount="1038" docLength="13139" length="1" offset="3563" starttimestamp="1597522471057" timestamp="863282493">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81802" _type="InsertStringCommand" date="Tue Aug 25 16:02:33 EDT 2020" starttimestamp="1597522471057" timestamp="863282499" timestamp2="863282499">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="81803" _type="Insert" date="Tue Aug 25 16:02:33 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12510" docExpressionCount="1038" docLength="13140" length="1" offset="3564" starttimestamp="1597522471057" timestamp="863282573">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="81804" _type="InsertStringCommand" date="Tue Aug 25 16:02:33 EDT 2020" starttimestamp="1597522471057" timestamp="863282578" timestamp2="863282578">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="81805" _type="Insert" date="Tue Aug 25 16:02:33 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12511" docExpressionCount="1038" docLength="13141" length="1" offset="3565" starttimestamp="1597522471057" timestamp="863282808">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="81806" _type="InsertStringCommand" date="Tue Aug 25 16:02:33 EDT 2020" starttimestamp="1597522471057" timestamp="863282813" timestamp2="863282813">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="81807" _type="Insert" date="Tue Aug 25 16:02:34 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12512" docExpressionCount="1038" docLength="13142" length="1" offset="3566" starttimestamp="1597522471057" timestamp="863283001">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81808" _type="InsertStringCommand" date="Tue Aug 25 16:02:34 EDT 2020" starttimestamp="1597522471057" timestamp="863283006" timestamp2="863283006">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81809" _type="Insert" date="Tue Aug 25 16:02:34 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12513" docExpressionCount="1038" docLength="13143" length="1" offset="3567" starttimestamp="1597522471057" timestamp="863283819">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81810" _type="InsertStringCommand" date="Tue Aug 25 16:02:34 EDT 2020" starttimestamp="1597522471057" timestamp="863283824" timestamp2="863283824">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="81811" _type="Insert" date="Tue Aug 25 16:02:34 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12514" docExpressionCount="1038" docLength="13144" length="1" offset="3568" starttimestamp="1597522471057" timestamp="863283938">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81812" _type="InsertStringCommand" date="Tue Aug 25 16:02:35 EDT 2020" starttimestamp="1597522471057" timestamp="863283943" timestamp2="863283943">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81813" _type="Insert" date="Tue Aug 25 16:02:35 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12515" docExpressionCount="1038" docLength="13145" length="1" offset="3569" starttimestamp="1597522471057" timestamp="863284175">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="81814" _type="InsertStringCommand" date="Tue Aug 25 16:02:35 EDT 2020" starttimestamp="1597522471057" timestamp="863284179" timestamp2="863284179">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="81815" _type="Delete" date="Tue Aug 25 16:02:35 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12514" docExpressionCount="1038" docLength="13144" endLine="75" length="1" offset="3569" startLine="75" starttimestamp="1597522471057" timestamp="863284691">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="81816" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:02:35 EDT 2020" starttimestamp="1597522471057" timestamp="863284694" />
  <DocumentChange __id="81817" _type="Delete" date="Tue Aug 25 16:02:35 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12513" docExpressionCount="1038" docLength="13143" endLine="75" length="1" offset="3568" startLine="75" starttimestamp="1597522471057" timestamp="863284835">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81818" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:02:35 EDT 2020" starttimestamp="1597522471057" timestamp="863284837" />
  <DocumentChange __id="81819" _type="Delete" date="Tue Aug 25 16:02:36 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12512" docExpressionCount="1038" docLength="13142" endLine="75" length="1" offset="3567" startLine="75" starttimestamp="1597522471057" timestamp="863285789">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81820" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:02:36 EDT 2020" starttimestamp="1597522471057" timestamp="863285791" />
  <DocumentChange __id="81821" _type="Insert" date="Tue Aug 25 16:02:37 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12513" docExpressionCount="1038" docLength="13143" length="1" offset="3567" starttimestamp="1597522471057" timestamp="863286292">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81822" _type="InsertStringCommand" date="Tue Aug 25 16:02:37 EDT 2020" starttimestamp="1597522471057" timestamp="863286296" timestamp2="863286296">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81823" _type="Insert" date="Tue Aug 25 16:02:37 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12514" docExpressionCount="1038" docLength="13144" length="1" offset="3568" starttimestamp="1597522471057" timestamp="863286561">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81824" _type="InsertStringCommand" date="Tue Aug 25 16:02:37 EDT 2020" starttimestamp="1597522471057" timestamp="863286564" timestamp2="863286564">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="81825" _type="Insert" date="Tue Aug 25 16:02:37 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12515" docExpressionCount="1038" docLength="13145" length="1" offset="3569" starttimestamp="1597522471057" timestamp="863286894">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="81826" _type="InsertStringCommand" date="Tue Aug 25 16:02:37 EDT 2020" starttimestamp="1597522471057" timestamp="863286899" timestamp2="863286899">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="81827" _type="Delete" date="Tue Aug 25 16:02:39 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12512" docExpressionCount="1038" docLength="13142" endLine="75" length="3" offset="3567" startLine="75" starttimestamp="1597522471057" timestamp="863288379">
    <text><![CDATA[amp]]></text>
  </DocumentChange>
  <Command __id="81828" _type="UndoCommand" date="Tue Aug 25 16:02:39 EDT 2020" starttimestamp="1597522471057" timestamp="863288398" />
  <DocumentChange __id="81829" _type="Insert" date="Tue Aug 25 16:02:39 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12515" docExpressionCount="1038" docLength="13145" length="3" offset="3567" starttimestamp="1597522471057" timestamp="863288917">
    <text><![CDATA[map]]></text>
  </DocumentChange>
  <Command __id="81830" _type="UndoCommand" date="Tue Aug 25 16:02:39 EDT 2020" starttimestamp="1597522471057" timestamp="863288934" />
  <Command __id="81832" _type="UndoCommand" date="Tue Aug 25 16:02:40 EDT 2020" starttimestamp="1597522471057" timestamp="863289461" />
  <Command __id="81833" _type="MoveCaretCommand" caretOffset="3114" date="Tue Aug 25 16:02:41 EDT 2020" docOffset="3561" starttimestamp="1597522471057" timestamp="863290743" />
  <Command __id="81834" _type="SelectTextCommand" caretOffset="3138" date="Tue Aug 25 16:02:41 EDT 2020" end="3138" start="3114" starttimestamp="1597522471057" timestamp="863290937" />
  <Command __id="81835" _type="SelectTextCommand" caretOffset="3142" date="Tue Aug 25 16:02:42 EDT 2020" end="3142" start="3065" starttimestamp="1597522471057" timestamp="863291201" />
  <Command __id="81836" _type="MoveCaretCommand" caretOffset="2989" date="Tue Aug 25 16:02:50 EDT 2020" docOffset="3436" starttimestamp="1597522471057" timestamp="863299547" />
  <Command __id="81837" _type="SelectTextCommand" caretOffset="3054" date="Tue Aug 25 16:02:53 EDT 2020" end="3054" start="3048" starttimestamp="1597522471057" timestamp="863302398" />
  <Command __id="81838" _type="MoveCaretCommand" caretOffset="3050" date="Tue Aug 25 16:02:54 EDT 2020" docOffset="3497" starttimestamp="1597522471057" timestamp="863303082" />
  <Command __id="81839" _type="MoveCaretCommand" caretOffset="3048" date="Tue Aug 25 16:02:55 EDT 2020" docOffset="3495" starttimestamp="1597522471057" timestamp="863304082" />
  <Command __id="81840" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Tue Aug 25 16:02:55 EDT 2020" starttimestamp="1597522471057" timestamp="863304766" />
  <Command __id="81841" _type="ShellCommand" date="Tue Aug 25 16:03:17 EDT 2020" starttimestamp="1597522471057" timestamp="863326420" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81842" _type="ShellCommand" date="Tue Aug 25 16:03:17 EDT 2020" starttimestamp="1597522471057" timestamp="863326684" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81843" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Tue Aug 25 16:03:20 EDT 2020" starttimestamp="1597522471057" timestamp="863329616" />
  <Command __id="81844" _type="SelectTextCommand" caretOffset="3062" date="Tue Aug 25 16:03:26 EDT 2020" end="3062" start="3048" starttimestamp="1597522471057" timestamp="863335221" />
  <Command __id="81845" _type="MoveCaretCommand" caretOffset="3062" date="Tue Aug 25 16:03:26 EDT 2020" docOffset="3509" starttimestamp="1597522471057" timestamp="863335719" />
  <Command __id="81846" _type="MoveCaretCommand" caretOffset="3062" date="Tue Aug 25 16:03:26 EDT 2020" docOffset="3509" starttimestamp="1597522471057" timestamp="863335894" />
  <Command __id="81847" _type="SelectTextCommand" caretOffset="3065" date="Tue Aug 25 16:03:27 EDT 2020" end="3065" start="2991" starttimestamp="1597522471057" timestamp="863336136" />
  <Command __id="81848" _type="CopyCommand" date="Tue Aug 25 16:03:28 EDT 2020" starttimestamp="1597522471057" timestamp="863336988" />
  <Command __id="81849" _type="MoveCaretCommand" caretOffset="3063" date="Tue Aug 25 16:03:28 EDT 2020" docOffset="3510" starttimestamp="1597522471057" timestamp="863337788" />
  <Command __id="81851" _type="InsertStringCommand" date="Tue Aug 25 16:03:29 EDT 2020" starttimestamp="1597522471057" timestamp="863338239" timestamp2="863338239">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="81853" _type="PasteCommand" date="Tue Aug 25 16:03:29 EDT 2020" starttimestamp="1597522471057" timestamp="863338897" />
  <Command __id="81854" _type="SelectTextCommand" caretOffset="2993" date="Tue Aug 25 16:03:32 EDT 2020" end="2994" start="2993" starttimestamp="1597522471057" timestamp="863341145" />
  <Command __id="81856" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:03:32 EDT 2020" starttimestamp="1597522471057" timestamp="863341775" />
  <DocumentChange __id="81831" _type="Delete" date="Tue Aug 25 16:02:40 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13136" endLine="75" length="9" offset="3561" startLine="75" starttimestamp="1597522471057" timestamp="863289375">
    <text><![CDATA[timestmap]]></text>
  </DocumentChange>
  <DocumentChange __id="81850" _type="Insert" date="Tue Aug 25 16:03:29 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12512" docExpressionCount="1038" docLength="13142" length="6" offset="3510" starttimestamp="1597522471057" timestamp="863338228">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="81852" _type="Replace" date="Tue Aug 25 16:03:29 EDT 2020" docASTNodeCount="1635" docActiveCodeLength="12582" docExpressionCount="1041" docLength="13212" endLine="75" insertionLength="74" int_docASTNodeCount="1626" int_docActiveCodeLength="12508" int_docExpressionCount="1038" int_docLength="13138" length="4" offset="3512" startLine="75" starttimestamp="1597522471057" timestamp="863338869">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81855" _type="Insert" date="Tue Aug 25 16:03:32 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12510" docExpressionCount="1038" docLength="13214" length="2" offset="3438" starttimestamp="1597522471057" timestamp="863341738">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="81857" _type="MoveCaretCommand" caretOffset="3127" date="Tue Aug 25 16:03:35 EDT 2020" docOffset="3574" starttimestamp="1597522471057" timestamp="863344593" />
  <Command __id="81858" _type="SelectTextCommand" caretOffset="3138" date="Tue Aug 25 16:03:35 EDT 2020" end="3138" start="3124" starttimestamp="1597522471057" timestamp="863344800" />
  <DocumentChange __id="81859" _type="Replace" date="Tue Aug 25 16:03:40 EDT 2020" docASTNodeCount="1625" docActiveCodeLength="12497" docExpressionCount="1037" docLength="13201" endLine="75" insertionLength="1" int_docASTNodeCount="1625" int_docActiveCodeLength="12496" int_docExpressionCount="1037" int_docLength="13200" length="14" offset="3571" startLine="75" starttimestamp="1597522471057" timestamp="863349213">
    <deletedText><![CDATA[ROOT_DIRECOTRY]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="81860" _type="InsertStringCommand" date="Tue Aug 25 16:03:40 EDT 2020" starttimestamp="1597522471057" timestamp="863349225" timestamp2="863349225">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="81861" _type="Insert" date="Tue Aug 25 16:03:40 EDT 2020" docASTNodeCount="1625" docActiveCodeLength="12498" docExpressionCount="1037" docLength="13202" length="1" offset="3572" starttimestamp="1597522471057" timestamp="863349731">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="81862" _type="InsertStringCommand" date="Tue Aug 25 16:03:40 EDT 2020" starttimestamp="1597522471057" timestamp="863349735" timestamp2="863349735">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="81863" _type="Delete" date="Tue Aug 25 16:03:41 EDT 2020" docASTNodeCount="1625" docActiveCodeLength="12497" docExpressionCount="1037" docLength="13201" endLine="75" length="1" offset="3572" startLine="75" starttimestamp="1597522471057" timestamp="863350288">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="81864" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:03:41 EDT 2020" starttimestamp="1597522471057" timestamp="863350291" />
  <DocumentChange __id="81865" _type="Delete" date="Tue Aug 25 16:03:41 EDT 2020" docASTNodeCount="1625" docActiveCodeLength="12496" docExpressionCount="1037" docLength="13200" endLine="75" length="1" offset="3571" startLine="75" starttimestamp="1597522471057" timestamp="863350471">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="81866" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:03:41 EDT 2020" starttimestamp="1597522471057" timestamp="863350474" />
  <DocumentChange __id="81867" _type="Insert" date="Tue Aug 25 16:03:42 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12498" docExpressionCount="1038" docLength="13202" length="2" offset="3571" starttimestamp="1597522471057" timestamp="863351614">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="81868" _type="InsertStringCommand" date="Tue Aug 25 16:03:42 EDT 2020" starttimestamp="1597522471057" timestamp="863351620" timestamp2="863351620">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="81869" _type="Insert" date="Tue Aug 25 16:03:42 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12499" docExpressionCount="1038" docLength="13203" length="1" offset="3572" starttimestamp="1597522471057" timestamp="863351922">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="81870" _type="InsertStringCommand" date="Tue Aug 25 16:03:42 EDT 2020" starttimestamp="1597522471057" timestamp="863351925" timestamp2="863351925">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="81871" _type="Insert" date="Tue Aug 25 16:03:43 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12500" docExpressionCount="1038" docLength="13204" length="1" offset="3573" starttimestamp="1597522471057" timestamp="863352040">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="81872" _type="InsertStringCommand" date="Tue Aug 25 16:03:43 EDT 2020" starttimestamp="1597522471057" timestamp="863352042" timestamp2="863352042">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="81873" _type="Insert" date="Tue Aug 25 16:03:43 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12501" docExpressionCount="1038" docLength="13205" length="1" offset="3574" starttimestamp="1597522471057" timestamp="863352291">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81874" _type="InsertStringCommand" date="Tue Aug 25 16:03:43 EDT 2020" starttimestamp="1597522471057" timestamp="863352293" timestamp2="863352293">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81875" _type="Insert" date="Tue Aug 25 16:03:43 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12502" docExpressionCount="1038" docLength="13206" length="1" offset="3575" starttimestamp="1597522471057" timestamp="863352412">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81876" _type="InsertStringCommand" date="Tue Aug 25 16:03:43 EDT 2020" starttimestamp="1597522471057" timestamp="863352415" timestamp2="863352415">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81877" _type="Insert" date="Tue Aug 25 16:03:44 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12503" docExpressionCount="1038" docLength="13207" length="1" offset="3576" starttimestamp="1597522471057" timestamp="863353030">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="81878" _type="InsertStringCommand" date="Tue Aug 25 16:03:44 EDT 2020" starttimestamp="1597522471057" timestamp="863353032" timestamp2="863353032">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="81879" _type="Insert" date="Tue Aug 25 16:03:44 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12504" docExpressionCount="1038" docLength="13208" length="1" offset="3577" starttimestamp="1597522471057" timestamp="863353216">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81880" _type="InsertStringCommand" date="Tue Aug 25 16:03:44 EDT 2020" starttimestamp="1597522471057" timestamp="863353218" timestamp2="863353218">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="81881" _type="Insert" date="Tue Aug 25 16:03:44 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12505" docExpressionCount="1038" docLength="13209" length="1" offset="3578" starttimestamp="1597522471057" timestamp="863353484">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="81882" _type="InsertStringCommand" date="Tue Aug 25 16:03:44 EDT 2020" starttimestamp="1597522471057" timestamp="863353486" timestamp2="863353486">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="81883" _type="Insert" date="Tue Aug 25 16:03:44 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13210" length="1" offset="3579" starttimestamp="1597522471057" timestamp="863353601">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="81884" _type="InsertStringCommand" date="Tue Aug 25 16:03:44 EDT 2020" starttimestamp="1597522471057" timestamp="863353603" timestamp2="863353603">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="81885" _type="Delete" date="Tue Aug 25 16:03:45 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12505" docExpressionCount="1038" docLength="13209" endLine="75" length="1" offset="3579" startLine="75" starttimestamp="1597522471057" timestamp="863354660">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="81886" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Aug 25 16:03:45 EDT 2020" starttimestamp="1597522471057" timestamp="863354662" />
  <Command __id="81888" _type="InsertStringCommand" date="Tue Aug 25 16:03:45 EDT 2020" starttimestamp="1597522471057" timestamp="863354796" timestamp2="863354796">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="81889" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:03:47 EDT 2020" starttimestamp="1597522471057" timestamp="863356833" />
  <Command __id="81890" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:03:47 EDT 2020" starttimestamp="1597522471057" timestamp="863356915" />
  <Command __id="81891" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:03:48 EDT 2020" starttimestamp="1597522471057" timestamp="863357079" />
  <Command __id="81893" _type="ShellCommand" date="Tue Aug 25 16:03:58 EDT 2020" starttimestamp="1597522471057" timestamp="863367789" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="81894" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:03:58 EDT 2020" starttimestamp="1597522471057" timestamp="863367837" />
  <Command __id="81895" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:03:58 EDT 2020" starttimestamp="1597522471057" timestamp="863367840" />
  <Command __id="81896" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue Aug 25 16:03:58 EDT 2020" starttimestamp="1597522471057" timestamp="863367845" />
  <DocumentChange __id="81887" _type="Insert" date="Tue Aug 25 16:03:45 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13210" length="1" offset="3579" starttimestamp="1597522471057" timestamp="863354792">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="81897" _type="MoveCaretCommand" caretOffset="3258" date="Tue Aug 25 16:04:00 EDT 2020" docOffset="3705" starttimestamp="1597522471057" timestamp="863369634" />
  <Command __id="81899" _type="MoveCaretCommand" caretOffset="125" date="Tue Aug 25 16:04:09 EDT 2020" docOffset="125" starttimestamp="1597522471057" timestamp="863378555" />
  <Command __id="81900" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Tue Aug 25 16:04:14 EDT 2020" starttimestamp="1597522471057" timestamp="863383868" />
  <Command __id="81901" _type="RunCommand" date="Tue Aug 25 16:04:15 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863384239" type="Run" />
  <Command __id="81902" _type="RunCommand" date="Tue Aug 25 16:04:15 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863384239" type="Run" />
  <Command __id="81903" _type="RunCommand" date="Tue Aug 25 16:04:15 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863384446" type="Run" />
  <Command __id="81904" _type="RunCommand" date="Tue Aug 25 16:04:15 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863384629" type="Run" />
  <Command __id="81905" _type="RunCommand" date="Tue Aug 25 16:04:16 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863384965" type="Run" />
  <Command __id="81906" _type="RunCommand" date="Tue Aug 25 16:04:16 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863385786" type="Run" />
  <Command __id="81898" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:04:09 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863378360">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="81907" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:04:18 EDT 2020" starttimestamp="1597522471057" timestamp="863387612" />
  <Command __id="81908" _type="RunCommand" date="Tue Aug 25 16:04:18 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863387622" type="Run" />
  <Command __id="81910" _type="MoveCaretCommand" caretOffset="3970" date="Tue Aug 25 16:04:26 EDT 2020" docOffset="4417" starttimestamp="1597522471057" timestamp="863395767" />
  <Command __id="81911" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:28 EDT 2020" starttimestamp="1597522471057" timestamp="863397604" />
  <Command __id="81912" _type="RunCommand" date="Tue Aug 25 16:04:28 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863397608" type="Run" />
  <Command __id="81913" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:29 EDT 2020" starttimestamp="1597522471057" timestamp="863398467" />
  <Command __id="81914" _type="RunCommand" date="Tue Aug 25 16:04:29 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863398471" type="Run" />
  <Command __id="81915" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:33 EDT 2020" starttimestamp="1597522471057" timestamp="863402853" />
  <Command __id="81916" _type="RunCommand" date="Tue Aug 25 16:04:33 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863402856" type="Run" />
  <Command __id="81917" _type="MoveCaretCommand" caretOffset="4058" date="Tue Aug 25 16:04:46 EDT 2020" docOffset="4505" starttimestamp="1597522471057" timestamp="863415807" />
  <Command __id="81919" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:04:47 EDT 2020" starttimestamp="1597522471057" timestamp="863416721" />
  <Command __id="81920" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:04:49 EDT 2020" starttimestamp="1597522471057" timestamp="863418459" />
  <Command __id="81921" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:04:49 EDT 2020" starttimestamp="1597522471057" timestamp="863418540" />
  <Command __id="81922" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:04:49 EDT 2020" starttimestamp="1597522471057" timestamp="863418577" />
  <Command __id="81923" _type="RunCommand" date="Tue Aug 25 16:04:49 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863418642" type="Run" />
  <Command __id="81924" _type="RunCommand" date="Tue Aug 25 16:04:49 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863418642" type="Run" />
  <Command __id="81925" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:51 EDT 2020" starttimestamp="1597522471057" timestamp="863420606" />
  <Command __id="81926" _type="RunCommand" date="Tue Aug 25 16:04:51 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863420612" type="Run" />
  <Command __id="81927" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:53 EDT 2020" starttimestamp="1597522471057" timestamp="863422498" />
  <Command __id="81928" _type="RunCommand" date="Tue Aug 25 16:04:53 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863422501" type="Run" />
  <Command __id="81929" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:04:54 EDT 2020" starttimestamp="1597522471057" timestamp="863423621" />
  <Command __id="81930" _type="RunCommand" date="Tue Aug 25 16:04:54 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863423623" type="Run" />
  <Command __id="81931" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:55 EDT 2020" starttimestamp="1597522471057" timestamp="863424894" />
  <Command __id="81932" _type="RunCommand" date="Tue Aug 25 16:04:55 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863424897" type="Run" />
  <Command __id="81933" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:04:56 EDT 2020" starttimestamp="1597522471057" timestamp="863425803" />
  <Command __id="81934" _type="RunCommand" date="Tue Aug 25 16:04:56 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863425805" type="Run" />
  <Command __id="81935" _type="MoveCaretCommand" caretOffset="5355" date="Tue Aug 25 16:05:04 EDT 2020" docOffset="5802" starttimestamp="1597522471057" timestamp="863433170" />
  <Command __id="81936" _type="SelectTextCommand" caretOffset="5355" date="Tue Aug 25 16:05:10 EDT 2020" end="5355" start="5354" starttimestamp="1597522471057" timestamp="863439308" />
  <Command __id="81937" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:05:44 EDT 2020" starttimestamp="1597522471057" timestamp="863473188" />
  <Command __id="81938" _type="RunCommand" date="Tue Aug 25 16:05:44 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863473237" type="Run" />
  <Command __id="81939" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Aug 25 16:05:54 EDT 2020" starttimestamp="1597522471057" timestamp="863483746" />
  <Command __id="81940" _type="RunCommand" date="Tue Aug 25 16:05:54 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863483748" type="Run" />
  <Command __id="81941" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:05:56 EDT 2020" starttimestamp="1597522471057" timestamp="863485470" />
  <Command __id="81942" _type="RunCommand" date="Tue Aug 25 16:05:56 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863485472" type="Run" />
  <Command __id="81947" _type="RunCommand" date="Tue Aug 25 16:06:12 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863501380" type="Debug" />
  <Command __id="81948" _type="RunCommand" date="Tue Aug 25 16:06:12 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863501380" type="Debug" />
  <Command __id="81949" _type="RunCommand" date="Tue Aug 25 16:06:12 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863501380" type="Run" />
  <Command __id="81950" _type="MoveCaretCommand" caretOffset="685" date="Tue Aug 25 16:06:44 EDT 2020" docOffset="1132" starttimestamp="1597522471057" timestamp="863533435" />
  <Command __id="81951" _type="MoveCaretCommand" caretOffset="685" date="Tue Aug 25 16:06:59 EDT 2020" docOffset="1132" starttimestamp="1597522471057" timestamp="863548552" />
  <Command __id="81952" _type="SelectTextCommand" caretOffset="695" date="Tue Aug 25 16:06:59 EDT 2020" end="695" start="685" starttimestamp="1597522471057" timestamp="863548776" />
  <Command __id="81953" _type="SelectTextCommand" caretOffset="711" date="Tue Aug 25 16:07:00 EDT 2020" end="711" start="585" starttimestamp="1597522471057" timestamp="863549003" />
  <Command __id="81954" _type="CopyCommand" date="Tue Aug 25 16:07:02 EDT 2020" starttimestamp="1597522471057" timestamp="863551265" />
  <Command __id="81909" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:04:26 EDT 2020" docASTNodeCount="1626" docActiveCodeLength="12506" docExpressionCount="1038" docLength="13210" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863395083">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶"), Diff(INSERT,"    private static final String METADATA_FILE_LOCATION = "metadata";¶¶"), Diff(EQUAL,"    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();

    private static final String GRADER_SOURCE_DIRECTORY = "source";

    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE_LOCATION = "metadata";

    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="81918" _type="Insert" date="Tue Aug 25 16:04:47 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12444" docExpressionCount="1031" docLength="13212" length="2" offset="4505" starttimestamp="1597522471057" timestamp="863416695">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="81955" _type="MoveCaretCommand" caretOffset="711" date="Tue Aug 25 16:07:03 EDT 2020" docOffset="1158" starttimestamp="1597522471057" timestamp="863552556" />
  <Command __id="81957" _type="PasteCommand" date="Tue Aug 25 16:07:04 EDT 2020" starttimestamp="1597522471057" timestamp="863553612" />
  <Command __id="81958" _type="MoveCaretCommand" caretOffset="588" date="Tue Aug 25 16:07:06 EDT 2020" docOffset="1035" starttimestamp="1597522471057" timestamp="863554997" />
  <Command __id="81960" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:07:06 EDT 2020" starttimestamp="1597522471057" timestamp="863555624" />
  <DocumentChange __id="81956" _type="Insert" date="Tue Aug 25 16:07:04 EDT 2020" docASTNodeCount="1637" docActiveCodeLength="12570" docExpressionCount="1046" docLength="13338" length="126" offset="1158" starttimestamp="1597522471057" timestamp="863553587">
    <text><![CDATA[    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();
]]></text>
  </DocumentChange>
  <DocumentChange __id="81959" _type="Insert" date="Tue Aug 25 16:07:06 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12446" docExpressionCount="1031" docLength="13340" length="2" offset="1032" starttimestamp="1597522471057" timestamp="863555595">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="81962" _type="Replace" date="Tue Aug 25 16:07:11 EDT 2020" docASTNodeCount="1603" docActiveCodeLength="12373" docExpressionCount="1018" docLength="13267" endLine="33" insertionLength="1" int_docASTNodeCount="1603" int_docActiveCodeLength="12372" int_docExpressionCount="1018" int_docLength="13266" length="74" offset="1209" startLine="33" starttimestamp="1597522471057" timestamp="863560865">
    <deletedText><![CDATA[Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString()]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="81964" _type="Insert" date="Tue Aug 25 16:07:12 EDT 2020" docASTNodeCount="1603" docActiveCodeLength="12374" docExpressionCount="1018" docLength="13268" length="1" offset="1210" starttimestamp="1597522471057" timestamp="863561253">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="81961" _type="SelectTextCommand" caretOffset="836" date="Tue Aug 25 16:07:11 EDT 2020" end="836" start="762" starttimestamp="1597522471057" timestamp="863560367" />
  <Command __id="81963" _type="InsertStringCommand" date="Tue Aug 25 16:07:11 EDT 2020" starttimestamp="1597522471057" timestamp="863560874" timestamp2="863560874">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="81965" _type="InsertStringCommand" date="Tue Aug 25 16:07:12 EDT 2020" starttimestamp="1597522471057" timestamp="863561255" timestamp2="863561255">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="81967" _type="InsertStringCommand" date="Tue Aug 25 16:07:13 EDT 2020" starttimestamp="1597522471057" timestamp="863562752" timestamp2="863562752">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="81968" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:07:14 EDT 2020" starttimestamp="1597522471057" timestamp="863563556" />
  <Command __id="81969" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:07:14 EDT 2020" starttimestamp="1597522471057" timestamp="863563639" />
  <Command __id="81970" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:07:14 EDT 2020" starttimestamp="1597522471057" timestamp="863563696" />
  <Command __id="81971" _type="EclipseCommand" commandID="org.eclipse.ui.window.activateEditor" date="Tue Aug 25 16:07:18 EDT 2020" starttimestamp="1597522471057" timestamp="863567222" />
  <Command __id="81972" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Tue Aug 25 16:07:18 EDT 2020" starttimestamp="1597522471057" timestamp="863567227" />
  <Command __id="81973" _type="RunCommand" date="Tue Aug 25 16:07:18 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863567606" type="Run" />
  <Command __id="81974" _type="RunCommand" date="Tue Aug 25 16:07:18 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863567606" type="Run" />
  <Command __id="81975" _type="RunCommand" date="Tue Aug 25 16:07:18 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863567816" type="Run" />
  <Command __id="81976" _type="RunCommand" date="Tue Aug 25 16:07:18 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863567937" type="Run" />
  <Command __id="81977" _type="RunCommand" date="Tue Aug 25 16:07:19 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863568174" type="Run" />
  <Command __id="81978" _type="RunCommand" date="Tue Aug 25 16:07:19 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863568653" type="Run" />
  <Command __id="81980" _type="MoveCaretCommand" caretOffset="180" date="Tue Aug 25 16:07:19 EDT 2020" docOffset="180" starttimestamp="1597522471057" timestamp="863568940" />
  <DocumentChange __id="81966" _type="Insert" date="Tue Aug 25 16:07:13 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12375" docExpressionCount="1019" docLength="13269" length="1" offset="1211" starttimestamp="1597522471057" timestamp="863562746">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="81979" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:07:19 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863568755">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="81981" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:07:21 EDT 2020" starttimestamp="1597522471057" timestamp="863570171" />
  <Command __id="81982" _type="RunCommand" date="Tue Aug 25 16:07:21 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863570173" type="Run" />
  <Command __id="81984" _type="MoveCaretCommand" caretOffset="4027" date="Tue Aug 25 16:07:24 EDT 2020" docOffset="4474" starttimestamp="1597522471057" timestamp="863573533" />
  <Command __id="81985" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:07:25 EDT 2020" starttimestamp="1597522471057" timestamp="863574740" />
  <Command __id="81986" _type="RunCommand" date="Tue Aug 25 16:07:25 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863574742" type="Run" />
  <Command __id="81987" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:07:26 EDT 2020" starttimestamp="1597522471057" timestamp="863575325" />
  <Command __id="81988" _type="RunCommand" date="Tue Aug 25 16:07:26 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863575328" type="Run" />
  <Command __id="81995" _type="RunCommand" date="Tue Aug 25 16:07:30 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863579804" type="Run" />
  <Command __id="82000" _type="RunCommand" date="Tue Aug 25 16:07:42 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863591742" type="Run" />
  <Command __id="82001" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:07:46 EDT 2020" starttimestamp="1597522471057" timestamp="863594986" />
  <Command __id="82002" _type="RunCommand" date="Tue Aug 25 16:07:46 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863594999" type="Run" />
  <Command __id="82003" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:07:48 EDT 2020" starttimestamp="1597522471057" timestamp="863597301" />
  <Command __id="82004" _type="RunCommand" date="Tue Aug 25 16:07:48 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863597306" type="Run" />
  <Command __id="82005" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Aug 25 16:07:50 EDT 2020" starttimestamp="1597522471057" timestamp="863599284" />
  <Command __id="82006" _type="RunCommand" date="Tue Aug 25 16:07:50 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863599288" type="Run" />
  <Command __id="82007" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:07:54 EDT 2020" starttimestamp="1597522471057" timestamp="863603011" />
  <Command __id="82008" _type="RunCommand" date="Tue Aug 25 16:07:54 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863603016" type="Run" />
  <Command __id="82009" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:07:57 EDT 2020" starttimestamp="1597522471057" timestamp="863606654" />
  <Command __id="82010" _type="RunCommand" date="Tue Aug 25 16:07:57 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863606658" type="Run" />
  <Command __id="82011" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:02 EDT 2020" starttimestamp="1597522471057" timestamp="863611061" />
  <Command __id="82012" _type="RunCommand" date="Tue Aug 25 16:08:02 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863611064" type="Run" />
  <Command __id="82013" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:08:03 EDT 2020" starttimestamp="1597522471057" timestamp="863612073" />
  <Command __id="82014" _type="RunCommand" date="Tue Aug 25 16:08:03 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863612075" type="Run" />
  <Command __id="82026" _type="RunCommand" date="Tue Aug 25 16:08:17 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863626649" type="Run" />
  <Command __id="82027" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:20 EDT 2020" starttimestamp="1597522471057" timestamp="863629302" />
  <Command __id="82028" _type="RunCommand" date="Tue Aug 25 16:08:20 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863629305" type="Run" />
  <Command __id="82029" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Aug 25 16:08:22 EDT 2020" starttimestamp="1597522471057" timestamp="863630950" />
  <Command __id="82030" _type="RunCommand" date="Tue Aug 25 16:08:22 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863630951" type="Run" />
  <Command __id="82031" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Aug 25 16:08:23 EDT 2020" starttimestamp="1597522471057" timestamp="863632805" />
  <Command __id="82032" _type="RunCommand" date="Tue Aug 25 16:08:23 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863632807" type="Run" />
  <Command __id="82033" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:27 EDT 2020" starttimestamp="1597522471057" timestamp="863636305" />
  <Command __id="82034" _type="RunCommand" date="Tue Aug 25 16:08:27 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863636307" type="Run" />
  <Command __id="82035" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:27 EDT 2020" starttimestamp="1597522471057" timestamp="863636905" />
  <Command __id="82036" _type="RunCommand" date="Tue Aug 25 16:08:27 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863636908" type="Run" />
  <Command __id="82037" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:28 EDT 2020" starttimestamp="1597522471057" timestamp="863637479" />
  <Command __id="82038" _type="RunCommand" date="Tue Aug 25 16:08:28 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863637482" type="Run" />
  <Command __id="82039" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:28 EDT 2020" starttimestamp="1597522471057" timestamp="863637935" />
  <Command __id="82040" _type="RunCommand" date="Tue Aug 25 16:08:28 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863637937" type="Run" />
  <Command __id="82041" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:29 EDT 2020" starttimestamp="1597522471057" timestamp="863638387" />
  <Command __id="82042" _type="RunCommand" date="Tue Aug 25 16:08:29 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863638389" type="Run" />
  <Command __id="82043" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:29 EDT 2020" starttimestamp="1597522471057" timestamp="863638812" />
  <Command __id="82044" _type="RunCommand" date="Tue Aug 25 16:08:29 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863638815" type="Run" />
  <Command __id="82045" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:30 EDT 2020" starttimestamp="1597522471057" timestamp="863639208" />
  <Command __id="82046" _type="RunCommand" date="Tue Aug 25 16:08:30 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863639210" type="Run" />
  <Command __id="82047" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:30 EDT 2020" starttimestamp="1597522471057" timestamp="863639655" />
  <Command __id="82048" _type="RunCommand" date="Tue Aug 25 16:08:30 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863639656" type="Run" />
  <Command __id="82049" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:31 EDT 2020" starttimestamp="1597522471057" timestamp="863640106" />
  <Command __id="82050" _type="RunCommand" date="Tue Aug 25 16:08:31 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863640108" type="Run" />
  <Command __id="82051" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:32 EDT 2020" starttimestamp="1597522471057" timestamp="863641221" />
  <Command __id="82052" _type="RunCommand" date="Tue Aug 25 16:08:32 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863641223" type="Run" />
  <Command __id="82053" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:32 EDT 2020" starttimestamp="1597522471057" timestamp="863641692" />
  <Command __id="82054" _type="RunCommand" date="Tue Aug 25 16:08:32 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863641694" type="Run" />
  <Command __id="82055" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:33 EDT 2020" starttimestamp="1597522471057" timestamp="863642101" />
  <Command __id="82056" _type="RunCommand" date="Tue Aug 25 16:08:33 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863642103" type="Run" />
  <Command __id="82057" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:34 EDT 2020" starttimestamp="1597522471057" timestamp="863643320" />
  <Command __id="82058" _type="RunCommand" date="Tue Aug 25 16:08:34 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863643322" type="Run" />
  <Command __id="82059" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:34 EDT 2020" starttimestamp="1597522471057" timestamp="863643836" />
  <Command __id="82060" _type="RunCommand" date="Tue Aug 25 16:08:34 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863643840" type="Run" />
  <Command __id="82061" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:35 EDT 2020" starttimestamp="1597522471057" timestamp="863644663" />
  <Command __id="82062" _type="RunCommand" date="Tue Aug 25 16:08:35 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863644665" type="Run" />
  <Command __id="82063" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Aug 25 16:08:36 EDT 2020" starttimestamp="1597522471057" timestamp="863645423" />
  <Command __id="82064" _type="RunCommand" date="Tue Aug 25 16:08:36 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863645425" type="Run" />
  <Command __id="82065" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Aug 25 16:08:37 EDT 2020" starttimestamp="1597522471057" timestamp="863646669" />
  <Command __id="82066" _type="RunCommand" date="Tue Aug 25 16:08:37 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863646672" type="Run" />
  <Command __id="82067" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Aug 25 16:08:39 EDT 2020" starttimestamp="1597522471057" timestamp="863648244" />
  <Command __id="82068" _type="RunCommand" date="Tue Aug 25 16:08:39 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863648246" type="Run" />
  <Command __id="82070" _type="MoveCaretCommand" caretOffset="214" date="Tue Aug 25 16:08:39 EDT 2020" docOffset="214" starttimestamp="1597522471057" timestamp="863648578" />
  <Command __id="82071" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Aug 25 16:08:43 EDT 2020" starttimestamp="1597522471057" timestamp="863652265" />
  <Command __id="82072" _type="RunCommand" date="Tue Aug 25 16:08:43 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863652265" type="Run" />
  <Command __id="82073" _type="RunCommand" date="Tue Aug 25 16:08:43 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863652297" type="Debug" />
  <Command __id="82074" _type="RunCommand" date="Tue Aug 25 16:08:43 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="863652297" type="Debug" />
  <Command __id="82075" _type="RunCommand" date="Tue Aug 25 16:08:43 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863652298" type="Run" />
  <Command __id="82076" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:09:02 EDT 2020" starttimestamp="1597522471057" timestamp="863671488" />
  <Command __id="82077" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:09:02 EDT 2020" starttimestamp="1597522471057" timestamp="863671618" />
  <Command __id="82078" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:09:02 EDT 2020" starttimestamp="1597522471057" timestamp="863671624" />
  <Command __id="82079" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:09:52 EDT 2020" starttimestamp="1597522471057" timestamp="863721378" />
  <Command __id="82080" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:10:07 EDT 2020" starttimestamp="1597522471057" timestamp="863736827" />
  <Command __id="82081" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:10:08 EDT 2020" starttimestamp="1597522471057" timestamp="863737005" />
  <Command __id="82082" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:10:08 EDT 2020" starttimestamp="1597522471057" timestamp="863737012" />
  <Command __id="82083" _type="ShellCommand" date="Tue Aug 25 16:10:27 EDT 2020" starttimestamp="1597522471057" timestamp="863756931" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82084" _type="ShellCommand" date="Tue Aug 25 16:10:28 EDT 2020" starttimestamp="1597522471057" timestamp="863757372" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82085" _type="MoveCaretCommand" caretOffset="130" date="Tue Aug 25 16:11:11 EDT 2020" docOffset="130" starttimestamp="1597522471057" timestamp="863799991" />
  <Command __id="82086" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:11:28 EDT 2020" starttimestamp="1597522471057" timestamp="863817279" />
  <Command __id="82087" _type="ShellCommand" date="Tue Aug 25 16:12:48 EDT 2020" starttimestamp="1597522471057" timestamp="863897023" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82088" _type="ShellCommand" date="Tue Aug 25 16:13:42 EDT 2020" starttimestamp="1597522471057" timestamp="863951669" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82090" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:14:28 EDT 2020" starttimestamp="1597522471057" timestamp="863997345" />
  <Command __id="82091" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:14:28 EDT 2020" starttimestamp="1597522471057" timestamp="863997348" />
  <Command __id="82092" _type="ShellCommand" date="Tue Aug 25 16:14:28 EDT 2020" starttimestamp="1597522471057" timestamp="863997390" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82096" _type="RunCommand" date="Tue Aug 25 16:14:42 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864011815" type="Run" />
  <Command __id="82097" _type="RunCommand" date="Tue Aug 25 16:14:42 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864011815" type="Run" />
  <Command __id="82098" _type="RunCommand" date="Tue Aug 25 16:14:43 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864012023" type="Run" />
  <Command __id="82099" _type="RunCommand" date="Tue Aug 25 16:14:43 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864012164" type="Run" />
  <Command __id="82100" _type="RunCommand" date="Tue Aug 25 16:14:43 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864012396" type="Run" />
  <Command __id="82101" _type="RunCommand" date="Tue Aug 25 16:14:44 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864013240" type="Run" />
  <Command __id="82102" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Aug 25 16:14:48 EDT 2020" starttimestamp="1597522471057" timestamp="864017183" />
  <Command __id="82103" _type="RunCommand" date="Tue Aug 25 16:14:48 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864017183" type="Run" />
  <Command __id="82104" _type="RunCommand" date="Tue Aug 25 16:14:48 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864017499" type="Debug" />
  <Command __id="82105" _type="RunCommand" date="Tue Aug 25 16:14:48 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864017499" type="Debug" />
  <Command __id="82106" _type="RunCommand" date="Tue Aug 25 16:14:48 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864017499" type="Run" />
  <Command __id="82107" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:15:12 EDT 2020" starttimestamp="1597522471057" timestamp="864041640" />
  <Command __id="82108" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:15:12 EDT 2020" starttimestamp="1597522471057" timestamp="864041803" />
  <Command __id="82109" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:15:12 EDT 2020" starttimestamp="1597522471057" timestamp="864041807" />
  <Command __id="82110" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:16:07 EDT 2020" starttimestamp="1597522471057" timestamp="864095944" />
  <Command __id="82111" _type="ShellCommand" date="Tue Aug 25 16:16:22 EDT 2020" starttimestamp="1597522471057" timestamp="864111033" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82112" _type="ShellCommand" date="Tue Aug 25 16:16:24 EDT 2020" starttimestamp="1597522471057" timestamp="864113680" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82113" _type="ShellCommand" date="Tue Aug 25 16:16:58 EDT 2020" starttimestamp="1597522471057" timestamp="864147055" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82114" _type="ShellCommand" date="Tue Aug 25 16:17:15 EDT 2020" starttimestamp="1597522471057" timestamp="864164255" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82115" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue Aug 25 16:17:15 EDT 2020" starttimestamp="1597522471057" timestamp="864164295" />
  <Command __id="81983" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:07:24 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12375" docExpressionCount="1019" docLength="13269" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863573342">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();"), Diff(INSERT,"¶    private static final String ROOT_DIRECOTRY = ".";"), Diff(EQUAL,"¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶"), Diff(INSERT,"//"), Diff(EQUAL,"                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();
    private static final String ROOT_DIRECOTRY = ".";

    private static final String GRADER_SOURCE_DIRECTORY = "source";

    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE_LOCATION = "metadata";

    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
//                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <Command __id="82069" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:08:39 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="863648440">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="82116" _type="MoveCaretCommand" caretOffset="198" date="Tue Aug 25 16:17:17 EDT 2020" docOffset="198" starttimestamp="1597522471057" timestamp="864166099" />
  <Command __id="82118" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Tue Aug 25 16:17:18 EDT 2020" starttimestamp="1597522471057" timestamp="864167859" />
  <Command __id="82119" _type="SelectTextCommand" caretOffset="3791" date="Tue Aug 25 16:17:19 EDT 2020" end="3791" start="3787" starttimestamp="1597522471057" timestamp="864167957" />
  <Command __id="82120" _type="ShellCommand" date="Tue Aug 25 16:17:38 EDT 2020" starttimestamp="1597522471057" timestamp="864187249" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82121" _type="ShellCommand" date="Tue Aug 25 16:17:43 EDT 2020" starttimestamp="1597522471057" timestamp="864191955" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82122" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue Aug 25 16:17:43 EDT 2020" starttimestamp="1597522471057" timestamp="864191995" />
  <Command __id="82128" _type="RunCommand" date="Tue Aug 25 16:18:03 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864212857" type="Run" />
  <Command __id="82129" _type="RunCommand" date="Tue Aug 25 16:18:03 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864212857" type="Run" />
  <Command __id="82130" _type="RunCommand" date="Tue Aug 25 16:18:04 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864213068" type="Run" />
  <Command __id="82131" _type="RunCommand" date="Tue Aug 25 16:18:04 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864213238" type="Run" />
  <Command __id="82132" _type="RunCommand" date="Tue Aug 25 16:18:04 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864213520" type="Run" />
  <Command __id="82133" _type="RunCommand" date="Tue Aug 25 16:18:05 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864214459" type="Run" />
  <Command __id="82135" _type="MoveCaretCommand" caretOffset="180" date="Tue Aug 25 16:18:06 EDT 2020" docOffset="180" starttimestamp="1597522471057" timestamp="864215529" />
  <Command __id="82136" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Aug 25 16:18:07 EDT 2020" starttimestamp="1597522471057" timestamp="864216738" />
  <Command __id="82137" _type="RunCommand" date="Tue Aug 25 16:18:07 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864216739" type="Run" />
  <Command __id="82138" _type="RunCommand" date="Tue Aug 25 16:18:08 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864217013" type="Debug" />
  <Command __id="82139" _type="RunCommand" date="Tue Aug 25 16:18:08 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="864217013" type="Debug" />
  <Command __id="82140" _type="RunCommand" date="Tue Aug 25 16:18:08 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864217013" type="Run" />
  <Command __id="82141" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:18:17 EDT 2020" starttimestamp="1597522471057" timestamp="864226919" />
  <Command __id="82142" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:18:31 EDT 2020" starttimestamp="1597522471057" timestamp="864240034" />
  <Command __id="82143" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:18:31 EDT 2020" starttimestamp="1597522471057" timestamp="864240150" />
  <Command __id="82144" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:18:31 EDT 2020" starttimestamp="1597522471057" timestamp="864240153" />
  <Command __id="82145" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:18:38 EDT 2020" starttimestamp="1597522471057" timestamp="864247326" />
  <Command __id="82117" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:17:18 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12375" docExpressionCount="1019" docLength="13269" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864167696">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="82134" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:18:06 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864215265">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="82146" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Aug 25 16:18:43 EDT 2020" starttimestamp="1597522471057" timestamp="864252404" />
  <Command __id="82148" _type="SelectTextCommand" caretOffset="3791" date="Tue Aug 25 16:18:51 EDT 2020" end="3791" start="3787" starttimestamp="1597522471057" timestamp="864259966" />
  <Command __id="82149" _type="MoveCaretCommand" caretOffset="4094" date="Tue Aug 25 16:18:52 EDT 2020" docOffset="4541" starttimestamp="1597522471057" timestamp="864261619" />
  <Command __id="82151" _type="ShellCommand" date="Tue Aug 25 16:18:53 EDT 2020" starttimestamp="1597522471057" timestamp="864262816" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82152" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:18:58 EDT 2020" forward="true" matchWord="false" offset="4541" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="864267584" wrapSearch="true">
    <searchString><![CDATA[zip]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="82147" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:18:50 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12375" docExpressionCount="1019" docLength="13269" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864259631">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="82154" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:20:51 EDT 2020" docASTNodeCount="1" docActiveCodeLength="1976" docExpressionCount="0" docLength="1976" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864380451">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[#! /bin/bash
zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"
cd .\source
java -cp .;.\source\comp401-grader-11.12-jar-with-dependencies.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar;C:\Users\dewan\eclipse\committers-photon\eclipse\configuration\org.eclipse.osgi\252\0\.cp\lib\javaagent-shaded.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student
java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"]]></snapshot>
  </Command>
  <Command __id="82155" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:22:56 EDT 2020" docASTNodeCount="1" docActiveCodeLength="1976" docExpressionCount="0" docLength="1976" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864505233">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\comp401-grader-11.12-jar-with-dependencies.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar;C:\Users\dewan\eclipse\committers-photon\eclipse\configuration\org.eclipse.osgi\252\0\.cp\lib\javaagent-shaded.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
  </Command>
  <Command __id="82163" _type="ShellCommand" date="Tue Aug 25 16:25:02 EDT 2020" starttimestamp="1597522471057" timestamp="864631144" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82164" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Tue Aug 25 16:25:02 EDT 2020" starttimestamp="1597522471057" timestamp="864631186" />
  <Command __id="82165" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Tue Aug 25 16:25:02 EDT 2020" starttimestamp="1597522471057" timestamp="864631187" />
  <Command __id="82173" _type="ShellCommand" date="Tue Aug 25 16:27:27 EDT 2020" starttimestamp="1597522471057" timestamp="864776888" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82174" _type="ShellCommand" date="Tue Aug 25 16:28:06 EDT 2020" starttimestamp="1597522471057" timestamp="864815036" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82175" _type="MoveCaretCommand" caretOffset="491" date="Tue Aug 25 16:28:06 EDT 2020" docOffset="938" starttimestamp="1597522471057" timestamp="864815320" />
  <Command __id="82177" _type="ShellCommand" date="Tue Aug 25 16:28:09 EDT 2020" starttimestamp="1597522471057" timestamp="864818437" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82178" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:28:10 EDT 2020" forward="true" matchWord="false" offset="938" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="864819898" wrapSearch="true">
    <searchString><![CDATA[jar]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="82179" _type="ShellCommand" date="Tue Aug 25 16:28:14 EDT 2020" starttimestamp="1597522471057" timestamp="864823491" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82180" _type="MoveCaretCommand" caretOffset="984" date="Tue Aug 25 16:28:16 EDT 2020" docOffset="1431" starttimestamp="1597522471057" timestamp="864825092" />
  <Command __id="82181" _type="SelectTextCommand" caretOffset="989" date="Tue Aug 25 16:28:16 EDT 2020" end="989" start="983" starttimestamp="1597522471057" timestamp="864825278" />
  <Command __id="82182" _type="SelectTextCommand" caretOffset="1025" date="Tue Aug 25 16:28:16 EDT 2020" end="1025" start="924" starttimestamp="1597522471057" timestamp="864825535" />
  <Command __id="82183" _type="CopyCommand" date="Tue Aug 25 16:28:17 EDT 2020" starttimestamp="1597522471057" timestamp="864826575" />
  <Command __id="82184" _type="MoveCaretCommand" caretOffset="1029" date="Tue Aug 25 16:28:19 EDT 2020" docOffset="1476" starttimestamp="1597522471057" timestamp="864828552" />
  <Command __id="82186" _type="InsertStringCommand" date="Tue Aug 25 16:28:20 EDT 2020" starttimestamp="1597522471057" timestamp="864828953" timestamp2="864828953">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="82187" _type="MoveCaretCommand" caretOffset="1029" date="Tue Aug 25 16:28:21 EDT 2020" docOffset="1476" starttimestamp="1597522471057" timestamp="864830140" />
  <Command __id="82189" _type="PasteCommand" date="Tue Aug 25 16:28:21 EDT 2020" starttimestamp="1597522471057" timestamp="864830791" />
  <Command __id="82190" _type="MoveCaretCommand" caretOffset="927" date="Tue Aug 25 16:28:22 EDT 2020" docOffset="1374" starttimestamp="1597522471057" timestamp="864831783" />
  <Command __id="82192" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:28:23 EDT 2020" starttimestamp="1597522471057" timestamp="864832606" />
  <Command __id="82193" _type="ShellCommand" date="Tue Aug 25 16:28:25 EDT 2020" starttimestamp="1597522471057" timestamp="864834612" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82194" _type="ShellCommand" date="Tue Aug 25 16:28:31 EDT 2020" starttimestamp="1597522471057" timestamp="864840639" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82195" _type="MoveCaretCommand" caretOffset="1103" date="Tue Aug 25 16:28:31 EDT 2020" docOffset="1550" starttimestamp="1597522471057" timestamp="864840682" />
  <Command __id="82196" _type="ShellCommand" date="Tue Aug 25 16:28:44 EDT 2020" starttimestamp="1597522471057" timestamp="864853769" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82197" _type="ShellCommand" date="Tue Aug 25 16:28:53 EDT 2020" starttimestamp="1597522471057" timestamp="864862556" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82198" _type="MoveCaretCommand" caretOffset="1202" date="Tue Aug 25 16:28:53 EDT 2020" docOffset="1649" starttimestamp="1597522471057" timestamp="864862590" />
  <Command __id="82202" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:29:03 EDT 2020" starttimestamp="1597522471057" timestamp="864872131" />
  <Command __id="82203" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:29:03 EDT 2020" starttimestamp="1597522471057" timestamp="864872271" />
  <Command __id="82204" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:29:03 EDT 2020" starttimestamp="1597522471057" timestamp="864872300" />
  <Command __id="82205" _type="MoveCaretCommand" caretOffset="1154" date="Tue Aug 25 16:29:08 EDT 2020" docOffset="1601" starttimestamp="1597522471057" timestamp="864877198" />
  <Command __id="82206" _type="SelectTextCommand" caretOffset="1159" date="Tue Aug 25 16:29:08 EDT 2020" end="1159" start="1154" starttimestamp="1597522471057" timestamp="864877379" />
  <Command __id="82207" _type="SelectTextCommand" caretOffset="1235" date="Tue Aug 25 16:29:08 EDT 2020" end="1235" start="1104" starttimestamp="1597522471057" timestamp="864877593" />
  <Command __id="82208" _type="CopyCommand" date="Tue Aug 25 16:29:09 EDT 2020" starttimestamp="1597522471057" timestamp="864878648" />
  <Command __id="82209" _type="MoveCaretCommand" caretOffset="1239" date="Tue Aug 25 16:29:11 EDT 2020" docOffset="1686" starttimestamp="1597522471057" timestamp="864880635" />
  <Command __id="82210" _type="MoveCaretCommand" caretOffset="1239" date="Tue Aug 25 16:29:11 EDT 2020" docOffset="1686" starttimestamp="1597522471057" timestamp="864880846" />
  <Command __id="82212" _type="InsertStringCommand" date="Tue Aug 25 16:29:12 EDT 2020" starttimestamp="1597522471057" timestamp="864881333" timestamp2="864881333">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="82213" _type="MoveCaretCommand" caretOffset="1239" date="Tue Aug 25 16:29:13 EDT 2020" docOffset="1686" starttimestamp="1597522471057" timestamp="864882585" />
  <Command __id="82215" _type="PasteCommand" date="Tue Aug 25 16:29:14 EDT 2020" starttimestamp="1597522471057" timestamp="864883267" />
  <Command __id="82216" _type="MoveCaretCommand" caretOffset="1106" date="Tue Aug 25 16:29:15 EDT 2020" docOffset="1553" starttimestamp="1597522471057" timestamp="864884417" />
  <Command __id="82218" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:29:16 EDT 2020" starttimestamp="1597522471057" timestamp="864885240" />
  <Command __id="82219" _type="SelectTextCommand" caretOffset="1366" date="Tue Aug 25 16:29:20 EDT 2020" end="1366" start="1287" starttimestamp="1597522471057" timestamp="864889312" />
  <Command __id="82220" _type="ShellCommand" date="Tue Aug 25 16:29:21 EDT 2020" starttimestamp="1597522471057" timestamp="864890566" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82221" _type="ShellCommand" date="Tue Aug 25 16:29:31 EDT 2020" starttimestamp="1597522471057" timestamp="864900139" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82222" _type="MoveCaretCommand" caretOffset="1344" date="Tue Aug 25 16:29:31 EDT 2020" docOffset="1791" starttimestamp="1597522471057" timestamp="864900174" />
  <Command __id="82223" _type="ShellCommand" date="Tue Aug 25 16:29:33 EDT 2020" starttimestamp="1597522471057" timestamp="864902072" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82224" _type="ShellCommand" date="Tue Aug 25 16:29:39 EDT 2020" starttimestamp="1597522471057" timestamp="864908291" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82225" _type="MoveCaretCommand" caretOffset="1345" date="Tue Aug 25 16:29:39 EDT 2020" docOffset="1792" starttimestamp="1597522471057" timestamp="864908312" />
  <Command __id="82226" _type="SelectTextCommand" caretOffset="1325" date="Tue Aug 25 16:29:52 EDT 2020" end="1325" start="1287" starttimestamp="1597522471057" timestamp="864921613" />
  <Command __id="82227" _type="MoveCaretCommand" caretOffset="1368" date="Tue Aug 25 16:29:54 EDT 2020" docOffset="1815" starttimestamp="1597522471057" timestamp="864923139" />
  <Command __id="82228" _type="SelectTextCommand" caretOffset="1329" date="Tue Aug 25 16:29:56 EDT 2020" end="1329" start="1287" starttimestamp="1597522471057" timestamp="864925304" />
  <Command __id="82234" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:30:33 EDT 2020" starttimestamp="1597522471057" timestamp="864962298" />
  <Command __id="82235" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:30:33 EDT 2020" starttimestamp="1597522471057" timestamp="864962493" />
  <Command __id="82236" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:30:33 EDT 2020" starttimestamp="1597522471057" timestamp="864962554" />
  <Command __id="82156" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:23:29 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12375" docExpressionCount="1019" docLength="13269" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="864538328">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="82185" _type="Insert" date="Tue Aug 25 16:28:19 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12381" docExpressionCount="1019" docLength="13275" length="6" offset="1476" starttimestamp="1597522471057" timestamp="864828938">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="82188" _type="Replace" date="Tue Aug 25 16:28:21 EDT 2020" docASTNodeCount="1613" docActiveCodeLength="12478" docExpressionCount="1022" docLength="13372" endLine="39" insertionLength="101" int_docASTNodeCount="1604" int_docActiveCodeLength="12377" int_docExpressionCount="1019" int_docLength="13271" length="4" offset="1472" startLine="39" starttimestamp="1597522471057" timestamp="864830731">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="82191" _type="Insert" date="Tue Aug 25 16:28:23 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12379" docExpressionCount="1019" docLength="13374" length="2" offset="1371" starttimestamp="1597522471057" timestamp="864832526">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="82200" _type="Replace" date="Tue Aug 25 16:29:01 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12353" docExpressionCount="1019" docLength="13348" endLine="39" insertionLength="20" int_docASTNodeCount="1604" int_docActiveCodeLength="12333" int_docExpressionCount="1019" int_docLength="13328" length="46" offset="1525" startLine="39" starttimestamp="1597522471057" timestamp="864870126">
    <deletedText><![CDATA[comp401-grader-11.12-jar-with-dependencies.jar]]></deletedText>
    <insertedText><![CDATA[Comp524GraderAll.jar]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="82211" _type="Insert" date="Tue Aug 25 16:29:12 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12359" docExpressionCount="1019" docLength="13354" length="6" offset="1686" starttimestamp="1597522471057" timestamp="864881318">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="82214" _type="Replace" date="Tue Aug 25 16:29:14 EDT 2020" docASTNodeCount="1620" docActiveCodeLength="12486" docExpressionCount="1029" docLength="13481" endLine="42" insertionLength="131" int_docASTNodeCount="1604" int_docActiveCodeLength="12355" int_docExpressionCount="1019" int_docLength="13350" length="4" offset="1682" startLine="42" starttimestamp="1597522471057" timestamp="864883211">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="82217" _type="Insert" date="Tue Aug 25 16:29:16 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12357" docExpressionCount="1019" docLength="13483" length="2" offset="1551" starttimestamp="1597522471057" timestamp="864885179">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="82243" _type="RunCommand" date="Tue Aug 25 16:31:32 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865021535" type="Run" />
  <Command __id="82245" _type="MoveCaretCommand" caretOffset="180" date="Tue Aug 25 16:31:34 EDT 2020" docOffset="180" starttimestamp="1597522471057" timestamp="865023470" />
  <Command __id="82244" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:31:34 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865022982">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="82253" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:31:53 EDT 2020" starttimestamp="1597522471057" timestamp="865042108" />
  <Command __id="82254" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:31:53 EDT 2020" starttimestamp="1597522471057" timestamp="865042116" />
  <Command __id="82256" _type="ShellCommand" date="Tue Aug 25 16:32:58 EDT 2020" starttimestamp="1597522471057" timestamp="865107455" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82255" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:31:56 EDT 2020" docASTNodeCount="1" docActiveCodeLength="1950" docExpressionCount="0" docLength="1950" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865045760">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"omp"), Diff(DELETE,"401-grader-11.12-jar-with-dependencies"), Diff(INSERT,"524GraderAll"), Diff(EQUAL,".jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar;C:\Users\dewan\eclipse\committers-photon\eclipse\configuration\org.eclipse.osgi\252\0\.cp\lib\javaagent-shaded.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
    <snapshot><![CDATA[#! /bin/bash
zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"
cd .\source
java -cp .;.\source\Comp524GraderAll.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar;C:\Users\dewan\eclipse\committers-photon\eclipse\configuration\org.eclipse.osgi\252\0\.cp\lib\javaagent-shaded.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student
java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"]]></snapshot>
  </Command>
  <Command __id="82266" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:33:28 EDT 2020" docASTNodeCount="1" docActiveCodeLength="260" docExpressionCount="0" docLength="260" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865137359">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\metadata\submission_metadata.json]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[{
        "id": 1,
        "created_at": "2017-06-01T14:22:32.365935-07:00",
  "assignment_id": 1,
  "previous_submissions": [
    {
      "submission_time": "2017-04-06T14:24:48.087023-07:00",
      "score": 0.0,
      "results": {  }
    }
  ]
}
]]></snapshot>
  </Command>
  <Command __id="82267" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:33:29 EDT 2020" starttimestamp="1597522471057" timestamp="865138842" />
  <Command __id="82268" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:33:29 EDT 2020" starttimestamp="1597522471057" timestamp="865138845" />
  <Command __id="82270" _type="ShellCommand" date="Tue Aug 25 16:35:14 EDT 2020" starttimestamp="1597522471057" timestamp="865243842" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82271" _type="ShellCommand" date="Tue Aug 25 16:35:21 EDT 2020" starttimestamp="1597522471057" timestamp="865250594" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82272" _type="ShellCommand" date="Tue Aug 25 16:36:01 EDT 2020" starttimestamp="1597522471057" timestamp="865290866" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82269" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:33:36 EDT 2020" docASTNodeCount="1" docActiveCodeLength="793" docExpressionCount="0" docLength="793" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865145145">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\Comp524GraderAll.jar;"), Diff(DELETE,"C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;"), Diff(EQUAL,"D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar"), Diff(DELETE,";C:\Users\dewan\eclipse\committers-photon\eclipse\configuration\org.eclipse.osgi\252\0\.cp\lib\javaagent-shaded.jar"), Diff(EQUAL," gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
    <snapshot><![CDATA[#! /bin/bash
zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"
cd .\source
java -cp .;.\source\Comp524GraderAll.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student
java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"]]></snapshot>
  </Command>
  <Command __id="82274" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:36:44 EDT 2020" docASTNodeCount="1" docActiveCodeLength="793" docExpressionCount="0" docLength="793" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865333576">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\Comp524GraderAll.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
  </Command>
  <Command __id="82273" _type="ShellCommand" date="Tue Aug 25 16:36:44 EDT 2020" starttimestamp="1597522471057" timestamp="865333397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82277" _type="SelectTextCommand" caretOffset="1329" date="Tue Aug 25 16:38:59 EDT 2020" end="1329" start="1287" starttimestamp="1597522471057" timestamp="865468919" />
  <Command __id="82279" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Tue Aug 25 16:39:08 EDT 2020" starttimestamp="1597522471057" timestamp="865477111" />
  <Command __id="82280" _type="MoveCaretCommand" caretOffset="1292" date="Tue Aug 25 16:39:24 EDT 2020" docOffset="1739" starttimestamp="1597522471057" timestamp="865493755" />
  <Command __id="82281" _type="SelectTextCommand" caretOffset="1292" date="Tue Aug 25 16:39:24 EDT 2020" end="1292" start="1287" starttimestamp="1597522471057" timestamp="865493942" />
  <Command __id="82282" _type="SelectTextCommand" caretOffset="1368" date="Tue Aug 25 16:39:25 EDT 2020" end="1368" start="1237" starttimestamp="1597522471057" timestamp="865494206" />
  <Command __id="82283" _type="CopyCommand" date="Tue Aug 25 16:39:26 EDT 2020" starttimestamp="1597522471057" timestamp="865495614" />
  <Command __id="82284" _type="MoveCaretCommand" caretOffset="1368" date="Tue Aug 25 16:39:27 EDT 2020" docOffset="1815" starttimestamp="1597522471057" timestamp="865496550" />
  <Command __id="82275" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:38:59 EDT 2020" docASTNodeCount="1" docActiveCodeLength="793" docExpressionCount="0" docLength="793" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865468044">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\Comp524GraderAll.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
  </Command>
  <Command __id="82276" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:38:59 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12357" docExpressionCount="1019" docLength="13483" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865468392">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶"), Diff(INSERT,"    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";¶¶//"), Diff(EQUAL,"    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶"), Diff(INSERT,"    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶¶"), Diff(EQUAL,"    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();
    private static final String ROOT_DIRECOTRY = ".";

    private static final String GRADER_SOURCE_DIRECTORY = "source";

    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
//    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";

//    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();

    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE_LOCATION = "metadata";

    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
//                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="82286" _type="Insert" date="Tue Aug 25 16:39:29 EDT 2020" docASTNodeCount="1620" docActiveCodeLength="12488" docExpressionCount="1029" docLength="13614" length="131" offset="1815" starttimestamp="1597522471057" timestamp="865498344">
    <text><![CDATA[    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
]]></text>
  </DocumentChange>
  <DocumentChange __id="82288" _type="Delete" date="Tue Aug 25 16:39:31 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12357" docExpressionCount="1019" docLength="13483" endLine="44" length="131" offset="1815" startLine="43" starttimestamp="1597522471057" timestamp="865500495">
    <text><![CDATA[    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
]]></text>
  </DocumentChange>
  <Command __id="82290" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:39:34 EDT 2020" docASTNodeCount="1" docActiveCodeLength="793" docExpressionCount="0" docLength="793" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865503516">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\Comp524GraderAll.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
  </Command>
  <Command __id="82285" _type="MoveCaretCommand" caretOffset="1368" date="Tue Aug 25 16:39:28 EDT 2020" docOffset="1815" starttimestamp="1597522471057" timestamp="865497728" />
  <Command __id="82287" _type="PasteCommand" date="Tue Aug 25 16:39:29 EDT 2020" starttimestamp="1597522471057" timestamp="865498401" />
  <Command __id="82289" _type="UndoCommand" date="Tue Aug 25 16:39:31 EDT 2020" starttimestamp="1597522471057" timestamp="865500554" />
  <Command __id="82292" _type="MoveCaretCommand" caretOffset="1368" date="Tue Aug 25 16:40:10 EDT 2020" docOffset="1815" starttimestamp="1597522471057" timestamp="865539940" />
  <Command __id="82293" _type="MoveCaretCommand" caretOffset="50" date="Tue Aug 25 16:40:20 EDT 2020" docOffset="50" starttimestamp="1597522471057" timestamp="865549738" />
  <Command __id="82295" _type="ShellCommand" date="Tue Aug 25 16:40:21 EDT 2020" starttimestamp="1597522471057" timestamp="865550833" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82296" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:40:28 EDT 2020" forward="true" matchWord="false" offset="50" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="865557936" wrapSearch="true">
    <searchString><![CDATA[ROOT]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="82297" _type="ShellCommand" date="Tue Aug 25 16:40:32 EDT 2020" starttimestamp="1597522471057" timestamp="865561310" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82298" _type="MoveCaretCommand" caretOffset="715" date="Tue Aug 25 16:40:34 EDT 2020" docOffset="1162" starttimestamp="1597522471057" timestamp="865563488" />
  <Command __id="82300" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:40:35 EDT 2020" starttimestamp="1597522471057" timestamp="865564367" />
  <Command __id="82301" _type="MoveCaretCommand" caretOffset="585" date="Tue Aug 25 16:40:37 EDT 2020" docOffset="1032" starttimestamp="1597522471057" timestamp="865566004" />
  <Command __id="82303" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:40:37 EDT 2020" starttimestamp="1597522471057" timestamp="865566751" />
  <Command __id="82304" _type="MoveCaretCommand" caretOffset="913" date="Tue Aug 25 16:40:51 EDT 2020" docOffset="1360" starttimestamp="1597522471057" timestamp="865580906" />
  <Command __id="82305" _type="SelectTextCommand" caretOffset="920" date="Tue Aug 25 16:40:52 EDT 2020" end="920" start="907" starttimestamp="1597522471057" timestamp="865581079" />
  <Command __id="82306" _type="SelectTextCommand" caretOffset="924" date="Tue Aug 25 16:40:52 EDT 2020" end="924" start="841" starttimestamp="1597522471057" timestamp="865581273" />
  <Command __id="82307" _type="CopyCommand" date="Tue Aug 25 16:40:53 EDT 2020" starttimestamp="1597522471057" timestamp="865582477" />
  <Command __id="82308" _type="MoveCaretCommand" caretOffset="922" date="Tue Aug 25 16:40:54 EDT 2020" docOffset="1369" starttimestamp="1597522471057" timestamp="865583679" />
  <Command __id="82310" _type="InsertStringCommand" date="Tue Aug 25 16:40:55 EDT 2020" starttimestamp="1597522471057" timestamp="865584304" timestamp2="865584304">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="82312" _type="PasteCommand" date="Tue Aug 25 16:40:56 EDT 2020" starttimestamp="1597522471057" timestamp="865585129" />
  <Command __id="82313" _type="MoveCaretCommand" caretOffset="845" date="Tue Aug 25 16:40:58 EDT 2020" docOffset="1292" starttimestamp="1597522471057" timestamp="865587936" />
  <Command __id="82315" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:40:59 EDT 2020" starttimestamp="1597522471057" timestamp="865588732" />
  <Command __id="82332" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:41:08 EDT 2020" starttimestamp="1597522471057" timestamp="865597654" />
  <Command __id="82333" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:41:08 EDT 2020" starttimestamp="1597522471057" timestamp="865597657" />
  <Command __id="82334" _type="MoveCaretCommand" caretOffset="839" date="Tue Aug 25 16:41:09 EDT 2020" docOffset="1286" starttimestamp="1597522471057" timestamp="865598182" />
  <Command __id="82291" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:40:10 EDT 2020" docASTNodeCount="1604" docActiveCodeLength="12357" docExpressionCount="1019" docLength="13483" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865539733">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶//    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶//    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";¶¶//    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="82299" _type="Insert" date="Tue Aug 25 16:40:35 EDT 2020" docASTNodeCount="1595" docActiveCodeLength="12304" docExpressionCount="1016" docLength="13485" length="2" offset="1160" starttimestamp="1597522471057" timestamp="865564297">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="82302" _type="Delete" date="Tue Aug 25 16:40:37 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12428" docExpressionCount="1031" docLength="13483" endLine="32" length="2" offset="1032" startLine="32" starttimestamp="1597522471057" timestamp="865566680">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="82309" _type="Insert" date="Tue Aug 25 16:40:55 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12434" docExpressionCount="1031" docLength="13489" length="6" offset="1369" starttimestamp="1597522471057" timestamp="865584290">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="82311" _type="Replace" date="Tue Aug 25 16:40:56 EDT 2020" docASTNodeCount="1625" docActiveCodeLength="12513" docExpressionCount="1034" docLength="13568" endLine="38" insertionLength="83" int_docASTNodeCount="1616" int_docActiveCodeLength="12430" int_docExpressionCount="1031" int_docLength="13485" length="4" offset="1371" startLine="38" starttimestamp="1597522471057" timestamp="865585067">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="82314" _type="Insert" date="Tue Aug 25 16:40:59 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12432" docExpressionCount="1031" docLength="13570" length="2" offset="1288" starttimestamp="1597522471057" timestamp="865588623">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="82317" _type="Delete" date="Tue Aug 25 16:41:03 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12431" docExpressionCount="1031" docLength="13569" endLine="38" length="1" offset="1445" startLine="38" starttimestamp="1597522471057" timestamp="865592671">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="82319" _type="Delete" date="Tue Aug 25 16:41:03 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12430" docExpressionCount="1031" docLength="13568" endLine="38" length="1" offset="1444" startLine="38" starttimestamp="1597522471057" timestamp="865592860">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="82321" _type="Delete" date="Tue Aug 25 16:41:04 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12429" docExpressionCount="1031" docLength="13567" endLine="38" length="1" offset="1443" startLine="38" starttimestamp="1597522471057" timestamp="865593297">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <DocumentChange __id="82323" _type="Insert" date="Tue Aug 25 16:41:05 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12430" docExpressionCount="1031" docLength="13568" length="1" offset="1443" starttimestamp="1597522471057" timestamp="865594247">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="82325" _type="Insert" date="Tue Aug 25 16:41:05 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12431" docExpressionCount="1031" docLength="13569" length="1" offset="1444" starttimestamp="1597522471057" timestamp="865594830">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="82327" _type="Insert" date="Tue Aug 25 16:41:06 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12432" docExpressionCount="1031" docLength="13570" length="1" offset="1445" starttimestamp="1597522471057" timestamp="865595069">
    <text><![CDATA[4]]></text>
  </DocumentChange>
  <Command __id="82342" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:42:29 EDT 2020" docASTNodeCount="1" docActiveCodeLength="793" docExpressionCount="0" docLength="793" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865678217">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\source\run-grader]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#! /bin/bash¶zip -r ".\source\Assignment01\grade, me(student)\Submission attachment(s)\submission.zip" ".\submission"¶cd .\source¶java -cp .;.\source\Comp524GraderAll.jar;D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\target\classes;C:\Users\dewan\.m2\repository\org\json\json\20171018\json-20171018.jar gradingTools.Comp401Driver --project-requirements  --project-name  Assignment01 --grader-controller AHeadlessGradingManager --headless-path .\source\Assignment01 --headless-start student --headless-end student --course-name Comp524F20 --logger feedback-txt+feedback-json+local-txt+local-json --no-framework-gui --clean-slate student¶java -jar GradescopeRunner.jar ".\source\Assignment01\grade, me(student)\Feedback Attachment(s)\results.json" ".\results\results.json"")]]]></diff>
  </Command>
  <Command __id="82338" _type="RunCommand" date="Tue Aug 25 16:41:37 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865626030" type="Debug" />
  <Command __id="82339" _type="RunCommand" date="Tue Aug 25 16:41:37 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865626030" type="Run" />
  <Command __id="82340" _type="RunCommand" date="Tue Aug 25 16:41:37 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865626030" type="Debug" />
  <Command __id="82341" _type="RunCommand" date="Tue Aug 25 16:41:37 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865626030" type="Run" />
  <Command __id="82344" _type="MoveCaretCommand" caretOffset="839" date="Tue Aug 25 16:42:58 EDT 2020" docOffset="1286" starttimestamp="1597522471057" timestamp="865707245" />
  <Command __id="82345" _type="MoveCaretCommand" caretOffset="631" date="Tue Aug 25 16:43:05 EDT 2020" docOffset="1078" starttimestamp="1597522471057" timestamp="865714127" />
  <Command __id="82349" _type="RunCommand" date="Tue Aug 25 16:43:15 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865724524" type="Debug" />
  <Command __id="82350" _type="RunCommand" date="Tue Aug 25 16:43:15 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865724525" type="Run" />
  <Command __id="82351" _type="RunCommand" date="Tue Aug 25 16:43:15 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865724525" type="Debug" />
  <Command __id="82352" _type="RunCommand" date="Tue Aug 25 16:43:15 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865724525" type="Run" />
  <Command __id="82359" _type="RunCommand" date="Tue Aug 25 16:43:25 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865734728" type="Run" />
  <Command __id="82410" _type="RunCommand" date="Tue Aug 25 16:44:27 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865796646" type="Debug" />
  <Command __id="82411" _type="RunCommand" date="Tue Aug 25 16:44:27 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865796648" type="Debug" />
  <Command __id="82412" _type="RunCommand" date="Tue Aug 25 16:44:27 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865796649" type="Run" />
  <Command __id="82413" _type="ShellCommand" date="Tue Aug 25 16:45:01 EDT 2020" starttimestamp="1597522471057" timestamp="865830206" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82419" _type="RunCommand" date="Tue Aug 25 16:45:16 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865845884" type="Debug" />
  <Command __id="82420" _type="RunCommand" date="Tue Aug 25 16:45:16 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865845885" type="Run" />
  <Command __id="82421" _type="RunCommand" date="Tue Aug 25 16:45:16 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="865845885" type="Debug" />
  <Command __id="82422" _type="RunCommand" date="Tue Aug 25 16:45:16 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865845885" type="Run" />
  <Command __id="82423" _type="ShellCommand" date="Tue Aug 25 16:45:19 EDT 2020" starttimestamp="1597522471057" timestamp="865848378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82424" _type="ShellCommand" date="Tue Aug 25 16:46:55 EDT 2020" starttimestamp="1597522471057" timestamp="865944322" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82425" _type="MoveCaretCommand" caretOffset="1455" date="Tue Aug 25 16:46:55 EDT 2020" docOffset="1902" starttimestamp="1597522471057" timestamp="865944377" />
  <Command __id="82426" _type="CopyCommand" date="Tue Aug 25 16:47:13 EDT 2020" starttimestamp="1597522471057" timestamp="865962395" />
  <Command __id="82427" _type="ShellCommand" date="Tue Aug 25 16:47:17 EDT 2020" starttimestamp="1597522471057" timestamp="865966747" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82428" _type="ShellCommand" date="Tue Aug 25 16:49:02 EDT 2020" starttimestamp="1597522471057" timestamp="866071049" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82429" _type="MoveCaretCommand" caretOffset="904" date="Tue Aug 25 16:49:15 EDT 2020" docOffset="1351" starttimestamp="1597522471057" timestamp="866084093" />
  <Command __id="82431" _type="ShellCommand" date="Tue Aug 25 16:49:15 EDT 2020" starttimestamp="1597522471057" timestamp="866084813" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82432" _type="FindCommand" caseSensitive="false" date="Tue Aug 25 16:49:20 EDT 2020" forward="true" matchWord="false" offset="1351" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1597522471057" timestamp="866089894" wrapSearch="true">
    <searchString><![CDATA[META]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="82433" _type="ShellCommand" date="Tue Aug 25 16:49:22 EDT 2020" starttimestamp="1597522471057" timestamp="866091887" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82434" _type="MoveCaretCommand" caretOffset="3425" date="Tue Aug 25 16:49:25 EDT 2020" docOffset="3872" starttimestamp="1597522471057" timestamp="866094638" />
  <Command __id="82436" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:49:26 EDT 2020" starttimestamp="1597522471057" timestamp="866095553" />
  <Command __id="82437" _type="MoveCaretCommand" caretOffset="3349" date="Tue Aug 25 16:49:28 EDT 2020" docOffset="3796" starttimestamp="1597522471057" timestamp="866096968" />
  <Command __id="82343" _type="DiffBasedFileOpenCommand" date="Tue Aug 25 16:42:57 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12432" docExpressionCount="1031" docLength="13570" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="865706887">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶import java.io.IOException;¶import java.nio.file.FileSystems;¶import java.nio.file.FileVisitResult;¶import java.nio.file.FileVisitor;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.nio.file.attribute.BasicFileAttributes;¶import java.time.format.DateTimeFormatter;¶import java.time.temporal.TemporalAccessor;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import org.json.JSONObject;¶¶public class AssignmentSetup {¶¶//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";¶    private static final String DEFAULT_COURSE_NAME = "COMP524F20";¶¶    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;¶    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";¶¶    private static String COURSE_NAME;¶    private static String ASSIGNMENT;¶    private static String ASSIGNMENT_NO_SPACE;¶¶    private static final String PATH_SEPARATOR = System.getProperty("path.separator");¶¶"), Diff(DELETE,"//"), Diff(EQUAL,"    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String ROOT_DIRECOTRY = ".";¶¶    private static final String GRADER_SOURCE_DIRECTORY = "source";¶¶"), Diff(INSERT,"//"), Diff(EQUAL,"    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";¶"), Diff(INSERT,"    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp524Driver";¶¶"), Diff(EQUAL,"//    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";¶    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";¶¶//    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();¶¶    private static final String CLASSPATH_EXTRA = "";¶//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);¶    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH¶            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)¶            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶¶    private static final String GRADER_SCRIPT_NAME = "run-grader";¶¶    private static String ONYEN = "student";¶    private static String FIRST_NAME = "me";¶    private static String LAST_NAME = "grade";¶    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";¶¶    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";¶    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";¶¶    private static final String GRADE_SPREADSHEET = "grades.csv";¶    private static final String TIMESTAMP_FILE = "timestamp.txt";¶¶    private static final String GRADER_DIRECTORY = "graderProgram";¶    private static final String GRADER_CONFIG_FOLDER = "config";¶    private static final String GRADER_CONFIG_NAME = "config.properties";¶¶    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";¶¶    private static final String SUBMISSION_LOCATION = "submission";¶    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";¶¶    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";¶    private static final String GRADESCOPE_RESULT_DIR = "results";¶    private static final String GRADESCOPE_JSON_FILE = "results.json";¶¶    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;¶    private static final String GRADER_JSON_FILE = "results.json";¶¶//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;¶    private static final String METADATA_FILE_LOCATION = "metadata";¶¶    private static final String METADATA_FILE = "submission_metadata.json";¶¶    private static final String EXECUTION_SHELL = "/bin/bash";¶¶    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;¶    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter¶            .ofPattern("yyyyMMddHHmmssSSS");¶¶    static {¶//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);¶        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);¶¶    }¶¶    public static void main(String[] args) {¶//    	System.out.println("classpath: " + System.getProperty("java.class.path"));¶//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));¶        if (args.length == 2) {¶            COURSE_NAME = args[0];¶            try {¶//                int assignmentNum = Integer.parseInt(args[1]);¶//                setAssignment(args[0], assignmentNum);¶                setAssignment(args[0], args[1]);¶¶            } catch (NumberFormatException e) {¶                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);¶            }¶        }¶        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);¶        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);¶        try {¶            purge(testBase);¶            buildDirectories(testBase);¶            buildFiles(testBase);¶¶            IGraderConfigWriter configWriter = buildConfigWriter(testBase);¶            setupGrader(graderBase, configWriter);¶            buildRunScript(graderBase, configWriter);¶        } catch (IOException e) {¶            e.printStackTrace();¶        }¶    }¶¶    private static void setAssignment(String name, int number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶    private static void setAssignment(String name, String number) {¶        COURSE_NAME = name;¶        ASSIGNMENT = "Assignment " + number;¶        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");¶    }¶¶    private static IGraderConfigWriter buildConfigWriter(Path base) {¶        IGraderConfigWriter configWriter = new GraderConfigWriter();¶        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);¶        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);¶        configWriter.setPath(base.toString());¶        configWriter.setStartOnyen(ONYEN);¶        configWriter.setEndOnyen(ONYEN);¶        configWriter.setCourseName(COURSE_NAME);¶        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,¶                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);¶¶        return configWriter;¶    }¶¶    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {¶        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));¶        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);¶        Files.createDirectories(configDir);¶        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);¶        if (Files.notExists(configFilePath)) {¶        	configWriter.write(configFilePath);¶        }¶    }¶¶    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {¶        StringBuilder sb = new StringBuilder();¶        sb.append("#! ").append(EXECUTION_SHELL).append("\n");¶        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);¶        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));¶        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");¶        sb.append("cd ").append(base).append("\n");¶        sb.append("java ").append("-cp ").append(CLASSPATH);¶        sb.append(" ").append(GRADER_MAIN_CLASS);¶        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));¶        sb.append("\n");¶¶        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);¶        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);¶¶        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)¶                .append(" \"").append(graderResultFile.toString())¶                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");¶¶        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());¶    }¶¶    private static void buildDirectories(Path base) throws IOException {¶        Files.createDirectories(base);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        Files.createDirectories(userDir);¶        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));¶        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void buildFiles(Path base) throws IOException {¶        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);¶        Files.deleteIfExists(gradeSpreadsheet);¶        Files.createFile(gradeSpreadsheet);¶        writeGradeSpreadsheet(gradeSpreadsheet);¶        Path userDir = base.resolve(USER_DIRECTORY);¶        createTimestamp(userDir);¶//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));¶    }¶¶    private static void writeGradeSpreadsheet(Path file) throws IOException {¶        List<String> lines = new ArrayList<>();¶        lines.add(ASSIGNMENT + ",Points,,,");¶        lines.add(",,,,");¶        lines.add("Display ID,ID,Last Name,First Name,grade");¶        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");¶        Files.write(file, lines);¶    }¶¶    private static void createTimestamp(Path userDir) throws IOException {¶        String rawTimestamp = getRawTimestamp();¶        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);¶        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);¶        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());¶    }¶¶    private static String getRawTimestamp() throws IOException {¶        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);¶¶        StringBuilder sb = new StringBuilder();¶        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));¶¶        JSONObject metadata = new JSONObject(sb.toString());¶        return metadata.getString("created_at");¶    }¶¶    private static void purge(Path root) throws IOException {¶        Files.walkFileTree(root, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶                Files.deleteIfExists(file);¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶                Files.deleteIfExists(dir);¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶¶    private static void copyAll(Path source, Path dest) throws IOException {¶    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());¶        Files.walkFileTree(source, new FileVisitor<Path>() {¶¶            @Override¶            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {¶                System.out.println("DIR START: " + dir.toString());¶            	Path relative = source.relativize(dir);¶                Files.createDirectories(dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {¶            	System.out.println("FILE: " + file.toString());¶                Path relative = source.relativize(file);¶                Files.copy(file, dest.resolve(relative));¶                System.out.println("    save as " + dest.resolve(relative));¶                return FileVisitResult.CONTINUE;¶            }¶¶            @Override¶            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {¶            	System.out.println("FILE ERR: " + file.toString());¶                return FileVisitResult.TERMINATE;¶            }¶¶            @Override¶            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {¶            	System.out.println("DIR END: " + dir.toString());¶                return FileVisitResult.CONTINUE;¶            }¶¶        });¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();
//    private static final String ROOT_DIRECOTRY = ".";

    private static final String GRADER_SOURCE_DIRECTORY = "source";

//    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp524Driver";

//    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";

//    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();

    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

//    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
    private static final String METADATA_FILE_LOCATION = "metadata";

    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS");

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
//                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="82435" _type="Insert" date="Tue Aug 25 16:49:26 EDT 2020" docASTNodeCount="1607" docActiveCodeLength="12364" docExpressionCount="1028" docLength="13572" length="2" offset="3872" starttimestamp="1597522471057" timestamp="866095462">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="82439" _type="Delete" date="Tue Aug 25 16:49:31 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12432" docExpressionCount="1031" docLength="13570" endLine="82" length="2" offset="3872" startLine="82" starttimestamp="1597522471057" timestamp="866100184">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="82441" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:49:33 EDT 2020" starttimestamp="1597522471057" timestamp="866102092" />
  <Command __id="82442" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:49:33 EDT 2020" starttimestamp="1597522471057" timestamp="866102247" />
  <Command __id="82443" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:49:33 EDT 2020" starttimestamp="1597522471057" timestamp="866102329" />
  <DocumentChange __id="82444" _type="Insert" date="Tue Aug 25 16:50:17 EDT 2020" docASTNodeCount="1607" docActiveCodeLength="12364" docExpressionCount="1028" docLength="13572" length="2" offset="3872" starttimestamp="1597522471057" timestamp="866146360">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="82445" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:50:17 EDT 2020" starttimestamp="1597522471057" timestamp="866146567" />
  <Command __id="82446" _type="MoveCaretCommand" caretOffset="3427" date="Tue Aug 25 16:50:17 EDT 2020" docOffset="3874" starttimestamp="1597522471057" timestamp="866146617" />
  <Command __id="82448" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Aug 25 16:50:17 EDT 2020" starttimestamp="1597522471057" timestamp="866146882" />
  <Command __id="82449" _type="MoveCaretCommand" caretOffset="3427" date="Tue Aug 25 16:50:17 EDT 2020" docOffset="3874" starttimestamp="1597522471057" timestamp="866146901" />
  <DocumentChange __id="82447" _type="Delete" date="Tue Aug 25 16:50:17 EDT 2020" docASTNodeCount="1616" docActiveCodeLength="12432" docExpressionCount="1031" docLength="13570" endLine="82" length="2" offset="3872" startLine="82" starttimestamp="1597522471057" timestamp="866146721">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="82450" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.next" date="Tue Aug 25 16:50:20 EDT 2020" starttimestamp="1597522471057" timestamp="866149744" />
  <Command __id="82452" _type="UndoCommand" date="Tue Aug 25 16:50:22 EDT 2020" starttimestamp="1597522471057" timestamp="866151873" />
  <Command __id="82456" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:50:28 EDT 2020" starttimestamp="1597522471057" timestamp="866157878" />
  <Command __id="82457" _type="EclipseCommand" commandID="" date="Tue Aug 25 16:50:29 EDT 2020" starttimestamp="1597522471057" timestamp="866158073" />
  <Command __id="82458" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Aug 25 16:50:29 EDT 2020" starttimestamp="1597522471057" timestamp="866158542" />
  <Command __id="82459" _type="CopyCommand" date="Tue Aug 25 16:51:23 EDT 2020" starttimestamp="1597522471057" timestamp="866212030" />
  <Command __id="82460" _type="ShellCommand" date="Tue Aug 25 16:51:31 EDT 2020" starttimestamp="1597522471057" timestamp="866220134" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82461" _type="ShellCommand" date="Tue Aug 25 16:51:42 EDT 2020" starttimestamp="1597522471057" timestamp="866231808" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82462" _type="CopyCommand" date="Tue Aug 25 16:51:51 EDT 2020" starttimestamp="1597522471057" timestamp="866240125" />
  <Command __id="82463" _type="ShellCommand" date="Tue Aug 25 16:51:54 EDT 2020" starttimestamp="1597522471057" timestamp="866243894" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82464" _type="ShellCommand" date="Tue Aug 25 16:52:27 EDT 2020" starttimestamp="1597522471057" timestamp="866276331" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82465" _type="MoveCaretCommand" caretOffset="3640" date="Tue Aug 25 16:52:36 EDT 2020" docOffset="4087" starttimestamp="1597522471057" timestamp="866285555" />
  <Command __id="82466" _type="MoveCaretCommand" caretOffset="2211" date="Tue Aug 25 16:52:47 EDT 2020" docOffset="2658" starttimestamp="1597522471057" timestamp="866296873" />
  <Command __id="82470" _type="RunCommand" date="Tue Aug 25 16:52:51 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="866300275" type="Debug" />
  <Command __id="82471" _type="RunCommand" date="Tue Aug 25 16:52:51 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="866300275" type="Run" />
  <Command __id="82472" _type="RunCommand" date="Tue Aug 25 16:52:51 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1597522471057" timestamp="866300275" type="Debug" />
  <Command __id="82473" _type="RunCommand" date="Tue Aug 25 16:52:51 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1597522471057" timestamp="866300275" type="Run" />
  <Command __id="82474" _type="ShellCommand" date="Tue Aug 25 16:52:57 EDT 2020" starttimestamp="1597522471057" timestamp="866306563" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82475" _type="ShellCommand" date="Tue Aug 25 16:53:45 EDT 2020" starttimestamp="1597522471057" timestamp="866354530" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82476" _type="ShellCommand" date="Tue Aug 25 16:53:51 EDT 2020" starttimestamp="1597522471057" timestamp="866360539" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82477" _type="ShellCommand" date="Tue Aug 25 16:55:33 EDT 2020" starttimestamp="1597522471057" timestamp="866462696" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82478" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Tue Aug 25 16:55:33 EDT 2020" starttimestamp="1597522471057" timestamp="866462936" />
  <Command __id="82479" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Tue Aug 25 16:55:33 EDT 2020" starttimestamp="1597522471057" timestamp="866462936" />
  <Command __id="82480" _type="ShellCommand" date="Tue Aug 25 16:55:44 EDT 2020" starttimestamp="1597522471057" timestamp="866473753" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82485" _type="EclipseCommand" commandID="" date="Tue Aug 25 17:21:23 EDT 2020" starttimestamp="1597522471057" timestamp="868012473" />
  <Command __id="82486" _type="EclipseCommand" commandID="" date="Tue Aug 25 17:21:23 EDT 2020" starttimestamp="1597522471057" timestamp="868012545" />
</Events>

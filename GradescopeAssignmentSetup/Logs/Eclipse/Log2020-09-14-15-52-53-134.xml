<Events startTimestamp="1600113173134" logVersion="1.0.0.202009141527">
  <DocumentChange __id="30605" _type="Insert" date="Sat Sep 19 09:49:16 EDT 2020" docASTNodeCount="892" docActiveCodeLength="7233" docExpressionCount="605" docLength="11666" length="1" offset="11604" starttimestamp="1600113173134" timestamp="410183250">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="30611" _type="Insert" date="Sat Sep 19 09:49:20 EDT 2020" docASTNodeCount="894" docActiveCodeLength="7265" docExpressionCount="607" docLength="11698" length="32" offset="11605" starttimestamp="1600113173134" timestamp="410187151">
    <text><![CDATA[getCurrentSakaiProjectDatabase()]]></text>
  </DocumentChange>
  <Command __id="30674" _type="ShellCommand" date="Sat Sep 19 14:30:46 EDT 2020" starttimestamp="1600113173134" timestamp="427072935" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="30675" _type="DiffBasedFileOpenCommand" date="Sat Sep 19 14:31:32 EDT 2020" docASTNodeCount="1686" docActiveCodeLength="12973" docExpressionCount="1094" docLength="14941" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="427119204">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\AssignmentSetup.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;

public class AssignmentSetup {

//    private static final String DEFAULT_COURSE_NAME = "COMP401F18";
    private static final String DEFAULT_COURSE_NAME = "COMP524F20";

    private static final int DEFAULT_ASSINGMENT_NUMBER = 1;
    private static final String DEFAULT_ASSINGMENT_NUMBER_STRING = "1";

    private static String COURSE_NAME;
    private static String ASSIGNMENT;
    private static String ASSIGNMENT_NO_SPACE;

    private static final String PATH_SEPARATOR = System.getProperty("path.separator");

    private static final String ROOT_DIRECOTRY = Paths.get(".").toAbsolutePath().getRoot().resolve("autograder").toString();
//    private static final String ROOT_DIRECOTRY = ".";

    private static final String GRADER_SOURCE_DIRECTORY = "source";

//    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp401Driver";
    private static final String GRADER_MAIN_CLASS = "gradingTools.Comp524Driver";

//    private static final String GRADER_JAR_FILE = "comp401-grader-11.12-jar-with-dependencies.jar";
    private static final String GRADER_JAR_FILE = "Comp524GraderAll.jar";

//    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();
    private static final String GRADER_JAR_PATH = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, GRADER_JAR_FILE).toString();

    private static final String CLASSPATH_EXTRA = "";
//    private static String CLASSPATH = "." + (CLASSPATH_EXTRA.isEmpty() ?? "" : PATH_SEPARATOR + CLASSPATH_EXTRA);
    private static final String CLASSPATH = "." + PATH_SEPARATOR + GRADER_JAR_PATH
            + (CLASSPATH_EXTRA.isEmpty() ? "" : PATH_SEPARATOR + CLASSPATH_EXTRA)
            + (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));

    private static final String GRADER_SCRIPT_NAME = "run-grader";

    private static String ONYEN = "student";
    private static String FIRST_NAME = "me";
    private static String LAST_NAME = "grade";
    private static final String USER_DIRECTORY = LAST_NAME + ", " + FIRST_NAME + "(" + ONYEN + ")";

    private static final String FEEDBACK_DIRECOTRY = "Feedback Attachment(s)";
    private static final String SUBMISSION_DIRECOTRY = "Submission attachment(s)";

    private static final String GRADE_SPREADSHEET = "grades.csv";
    private static final String TIMESTAMP_FILE = "timestamp.txt";

    private static final String GRADER_DIRECTORY = "graderProgram";
    private static final String GRADER_CONFIG_FOLDER = "config";
    private static final String GRADER_CONFIG_NAME = "config.properties";

    private static final String ASSIGNMENT_DATA_FOLDER = "log/AssignmentData";

    private static final String SUBMISSION_LOCATION = "submission";
    private static final String SUBMISSION_ARCHIVE_NAME = "submission.zip";

    private static final String RESULT_FILE_PROCESSOR = "GradescopeRunner.jar";
    private static final String GRADESCOPE_RESULT_DIR = "results";
    private static final String GRADESCOPE_JSON_FILE = "results.json";

    private static final String GRADER_RESULT_DIR = FEEDBACK_DIRECOTRY;
    private static final String GRADER_JSON_FILE = "results.json";

    private static final String METADATA_FILE_LOCATION = ROOT_DIRECOTRY;
//    private static final String METADATA_FILE_LOCATION = "metadata";

    private static final String METADATA_FILE = "submission_metadata.json";

    private static final String EXECUTION_SHELL = "/bin/bash";

    private static final DateTimeFormatter SOURCE_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
//    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
//            .ofPattern("yyyyMMddHHmmssSSS");
    private static final DateTimeFormatter TARGET_DATE_TIME_FORMATTER = DateTimeFormatter
            .ofPattern("yyyyMMddHHmmssSSS").withZone(ZoneId.of("America/New_York"));

    static {
//        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER);
        setAssignment(DEFAULT_COURSE_NAME, DEFAULT_ASSINGMENT_NUMBER_STRING);

    }

    public static void main(String[] args) {
//    	System.out.println("classpath: " + System.getProperty("java.class.path"));
//    	CLASSPATH += (System.getProperty("java.class.path").isEmpty() ? "" : PATH_SEPARATOR + System.getProperty("java.class.path"));
        if (args.length == 2) {
            COURSE_NAME = args[0];
            try {
//                int assignmentNum = Integer.parseInt(args[1]);
//                setAssignment(args[0], assignmentNum);
                setAssignment(args[0], args[1]);

            } catch (NumberFormatException e) {
                System.err.println("Argument 2 is not a number, defaulting to " + COURSE_NAME + " " + DEFAULT_ASSINGMENT_NUMBER);
            }
        }
        Path testBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY, ASSIGNMENT_NO_SPACE);
        Path graderBase = Paths.get(ROOT_DIRECOTRY, GRADER_SOURCE_DIRECTORY);
        try {
            purge(testBase);
            buildDirectories(testBase);
            buildFiles(testBase);

            IGraderConfigWriter configWriter = buildConfigWriter(testBase);
            setupGrader(graderBase, configWriter);
            buildRunScript(graderBase, configWriter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setAssignment(String name, int number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }
    private static void setAssignment(String name, String number) {
        COURSE_NAME = name;
        ASSIGNMENT = "Assignment " + number;
        ASSIGNMENT_NO_SPACE = ASSIGNMENT.replaceAll(" ", "");
    }

    private static IGraderConfigWriter buildConfigWriter(Path base) {
        IGraderConfigWriter configWriter = new GraderConfigWriter();
        configWriter.setAssignmentName(ASSIGNMENT_NO_SPACE);
        configWriter.setController(IGraderConfigWriter.HEADLESS_GRADING_MANAGER);
        configWriter.setPath(base.toString());
        configWriter.setStartOnyen(ONYEN);
        configWriter.setEndOnyen(ONYEN);
        configWriter.setCourseName(COURSE_NAME);
        configWriter.setLogging(IGraderConfigWriter.FEEDBACK_JSON, IGraderConfigWriter.FEEDBACK_TXT,
                IGraderConfigWriter.LOCAL_JSON, IGraderConfigWriter.LOCAL_TXT);

        return configWriter;
    }

    private static void setupGrader(Path base, IGraderConfigWriter configWriter) throws IOException {
        Files.createDirectories(base.resolve(ASSIGNMENT_DATA_FOLDER).resolve(ASSIGNMENT_NO_SPACE));
        Path configDir = base.resolve(GRADER_CONFIG_FOLDER);
        Files.createDirectories(configDir);
        Path configFilePath = configDir.resolve(GRADER_CONFIG_NAME);
        if (Files.notExists(configFilePath)) {
        	configWriter.write(configFilePath);
        }
    }

    private static void buildRunScript(Path base, IGraderConfigWriter configWriter) throws IOException {
//        StringBuilder sb = new StringBuilder();
//        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
//        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
//        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
//        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
//        sb.append("cd ").append(base).append("\n");
//        sb.append("java ").append("-cp ").append(CLASSPATH);
//        sb.append(" ").append(GRADER_MAIN_CLASS);
//        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
//        sb.append("\n");
    	StringBuilder sb = new StringBuilder();
        sb.append("#! ").append(EXECUTION_SHELL).append("\n");
        Path userDir = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY);
        sb.append("echo \"submission attachments dir\"\n");
        sb.append("ls \"").append(userDir.resolve(SUBMISSION_DIRECOTRY)).append("\"\n");
        sb.append("echo \"submission dir\"\n");
        sb.append("ls \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("zip -r \"").append(userDir.resolve(SUBMISSION_DIRECOTRY).resolve(SUBMISSION_ARCHIVE_NAME));
        sb.append("\" \"").append(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION)).append("\"\n");
        sb.append("echo \"submission attachments dir\"\n");
        sb.append("ls \"").append(userDir.resolve(SUBMISSION_DIRECOTRY)).append("\"\n");
        sb.append("cd ").append(base).append("\n");
        sb.append("java ").append("-cp ").append(CLASSPATH);
        sb.append(" ").append(GRADER_MAIN_CLASS);
        Arrays.stream(configWriter.getCommandArgs()).forEach(arg -> sb.append(' ').append(arg));
        sb.append("\n");

        Path graderResultFile = base.resolve(ASSIGNMENT_NO_SPACE).resolve(USER_DIRECTORY).resolve(GRADER_RESULT_DIR).resolve(GRADER_JSON_FILE);
        Path gradescopeResultFile = Paths.get(ROOT_DIRECOTRY, GRADESCOPE_RESULT_DIR, GRADESCOPE_JSON_FILE);

        sb.append("java -jar ").append(RESULT_FILE_PROCESSOR)
                .append(" \"").append(graderResultFile.toString())
                .append("\" \"").append(gradescopeResultFile.toString()).append("\"");

        Files.write(base.resolve(GRADER_SCRIPT_NAME), sb.toString().getBytes());
    }

    private static void buildDirectories(Path base) throws IOException {
        Files.createDirectories(base);
        Path userDir = base.resolve(USER_DIRECTORY);
        Files.createDirectories(userDir);
        Files.createDirectories(userDir.resolve(FEEDBACK_DIRECOTRY));
        Files.createDirectories(userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void buildFiles(Path base) throws IOException {
        Path gradeSpreadsheet = base.resolve(GRADE_SPREADSHEET);
        Files.deleteIfExists(gradeSpreadsheet);
        Files.createFile(gradeSpreadsheet);
        writeGradeSpreadsheet(gradeSpreadsheet);
        Path userDir = base.resolve(USER_DIRECTORY);
        createTimestamp(userDir);
//        copyAll(Paths.get(ROOT_DIRECOTRY, SUBMISSION_LOCATION), userDir.resolve(SUBMISSION_DIRECOTRY));
    }

    private static void writeGradeSpreadsheet(Path file) throws IOException {
        List<String> lines = new ArrayList<>();
        lines.add(ASSIGNMENT + ",Points,,,");
        lines.add(",,,,");
        lines.add("Display ID,ID,Last Name,First Name,grade");
        lines.add(ONYEN + "," + ONYEN + "," + LAST_NAME + "," + FIRST_NAME + ",0.0");
        Files.write(file, lines);
    }

    private static void createTimestamp(Path userDir) throws IOException {
        String rawTimestamp = getRawTimestamp();
        TemporalAccessor gradescopeTimestamp = SOURCE_DATE_TIME_FORMATTER.parse(rawTimestamp);
        String sakaiTimestamp = TARGET_DATE_TIME_FORMATTER.format(gradescopeTimestamp);
        Files.write(userDir.resolve(TIMESTAMP_FILE), sakaiTimestamp.getBytes());
    }

    private static String getRawTimestamp() throws IOException {
        Path metadataFile = Paths.get(METADATA_FILE_LOCATION, METADATA_FILE);

        StringBuilder sb = new StringBuilder();
        Files.readAllLines(metadataFile).forEach(line -> sb.append(line).append("\n"));

        JSONObject metadata = new JSONObject(sb.toString());
        return metadata.getString("created_at");
    }

    private static void purge(Path root) throws IOException {
        Files.walkFileTree(root, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.deleteIfExists(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.deleteIfExists(dir);
                return FileVisitResult.CONTINUE;
            }

        });
    }

    private static void copyAll(Path source, Path dest) throws IOException {
    	System.out.println("COPY FROM: " + source.toString() + " TO: " + dest.toString());
        Files.walkFileTree(source, new FileVisitor<Path>() {

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                System.out.println("DIR START: " + dir.toString());
            	Path relative = source.relativize(dir);
                Files.createDirectories(dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            	System.out.println("FILE: " + file.toString());
                Path relative = source.relativize(file);
                Files.copy(file, dest.resolve(relative));
                System.out.println("    save as " + dest.resolve(relative));
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
            	System.out.println("FILE ERR: " + file.toString());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
            	System.out.println("DIR END: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

        });
    }
}
]]></snapshot>
  </Command>
  <Command __id="30676" _type="MoveCaretCommand" caretOffset="0" date="Sat Sep 19 14:31:32 EDT 2020" docOffset="0" starttimestamp="1600113173134" timestamp="427119462" />
  <Command __id="30677" _type="DiffBasedFileOpenCommand" date="Sat Sep 19 14:31:37 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="427124043">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package edu.unc.cs;

public class Comp524AssignmentSetup {
	final static String[] MY_ARGS = {
			"Comp524F20",
			"01"

	};
	public static void main (String[] args) {
		
		AssignmentSetup.main(MY_ARGS);
	}
}
]]></snapshot>
  </Command>
  <Command __id="30678" _type="MoveCaretCommand" caretOffset="0" date="Sat Sep 19 14:31:37 EDT 2020" docOffset="0" starttimestamp="1600113173134" timestamp="427124259" />
  <Command __id="30680" _type="MoveCaretCommand" caretOffset="0" date="Sat Sep 19 14:32:15 EDT 2020" docOffset="0" starttimestamp="1600113173134" timestamp="427162749" />
  <Command __id="30681" _type="ShellCommand" date="Sat Sep 19 14:32:25 EDT 2020" starttimestamp="1600113173134" timestamp="427171914" type="ECLIPSE_MINIMIZED" />
  <Command __id="30682" _type="ShellCommand" date="Sat Sep 19 14:32:25 EDT 2020" starttimestamp="1600113173134" timestamp="427171926" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="30683" _type="ShellCommand" date="Sat Sep 19 14:32:55 EDT 2020" starttimestamp="1600113173134" timestamp="427202310" type="ECLIPSE_MAXIMIZED" />
  <Command __id="30684" _type="ShellCommand" date="Sat Sep 19 14:32:55 EDT 2020" starttimestamp="1600113173134" timestamp="427202443" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="30686" _type="ShellCommand" date="Sat Sep 19 14:33:15 EDT 2020" starttimestamp="1600113173134" timestamp="427222354" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="30687" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sat Sep 19 14:33:15 EDT 2020" starttimestamp="1600113173134" timestamp="427222449" />
  <Command __id="30689" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sat Sep 19 14:33:23 EDT 2020" starttimestamp="1600113173134" timestamp="427229923" />
  <Command __id="30690" _type="ShellCommand" date="Sat Sep 19 14:43:00 EDT 2020" starttimestamp="1600113173134" timestamp="427807799" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="30691" _type="ShellCommand" date="Sat Sep 19 14:44:37 EDT 2020" starttimestamp="1600113173134" timestamp="427904010" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="30693" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sat Sep 19 14:44:54 EDT 2020" starttimestamp="1600113173134" timestamp="427920940" />
  <Command __id="30695" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sat Sep 19 14:45:21 EDT 2020" starttimestamp="1600113173134" timestamp="427948825" />
  <Command __id="30696" _type="ShellCommand" date="Sat Sep 19 14:46:11 EDT 2020" starttimestamp="1600113173134" timestamp="427998064" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35265" _type="DiffBasedFileOpenCommand" date="Sun Sep 20 15:54:27 EDT 2020" docASTNodeCount="1289" docActiveCodeLength="9176" docExpressionCount="769" docLength="12111" projectName="GraderBasics" starttimestamp="1600113173134" timestamp="518494369">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\basics\sharedTestCase\checkstyle\CheckStyleTestCase.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package gradingTools.basics.sharedTestCase.checkstyle;¶¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶¶import grader.basics.junit.NotAutomatableException;¶import grader.basics.junit.TestCaseResult;¶import grader.basics.project.NotGradableException;¶import grader.basics.project.Project;¶import grader.basics.testcase.PassFailJUnitTestCase;¶¶¶public abstract class CheckStyleTestCase extends PassFailJUnitTestCase {¶	public static final String COMMENT_START = "//";¶¶	protected boolean foundType;¶	protected String typeTag;¶//	 protected String typeName;¶¶¶    public CheckStyleTestCase(String aTypeTag, String aName) {¶//        super(aName);¶        foundType = false;¶//        if (aTypeTag == null) {¶//        	System.out.println ("Null type tag");¶//        }¶        typeTag = aTypeTag;¶    }¶    ¶	protected String typeTag() {¶		return typeTag;¶	}¶	protected boolean foundType() {¶		return foundType;¶	}¶	// interface defined should also use similar syntax¶//	protected String typeRegex(String aTypeTag) {¶//		return "(.*)" + "Class" + "(.*)" + "matching" + "(.*)" + aTypeTag + "(.*)" + "defined" + "(.*)" ;¶//	}¶	¶	protected String typeRegex(String aTypeTag) {¶//        return "(.*)" + "Class" + "(.*)" + "matching" + "(.*)[@ ]" + aTypeTag + "[ /](.*)" + "defined" + "(.*)" ;¶        return "(.*)" + "Class" + "(.*)" + "matching" + "(.*)[@ ]" + aTypeTag + "(.*)" + "defined" + "(.*)" ;¶¶    }¶    ¶    protected boolean failOnMatch() {¶    	return true;¶    }¶    protected   String warningName() {¶    	return null;¶    }¶	 protected  String infoName() {¶		 return null;¶	 }¶    ¶	public String positiveRegexLineFilter() {¶		String anInfoName = infoName();¶		if (anInfoName == null) {¶			return null;¶		}¶		// TODO Auto-generated method stub¶		return ".*" + anInfoName + ".*";¶	}¶	¶	public String negativeRegexLineFilter() {¶		String aWarningName = warningName();¶		if (aWarningName == null) {¶			return null;¶		}¶		// TODO Auto-generated method stub¶		return ".*" + aWarningName + ".*";¶	}¶    protected String toLinesString(List<String> aLines) {¶    	StringBuilder aString = new StringBuilder();¶    	for (String aLine:aLines) {¶    		aString.append(aLine);¶    	}¶    	return aString.toString();¶    }¶  ¶	protected String beautify (String aCheckstyleString) {¶		return aCheckstyleString.substring(aCheckstyleString.indexOf(warningName())) + "\n";¶	}¶	protected String beautify (List<String> aList) {¶		StringBuffer sb = new StringBuffer();¶		for (String aString: aList) {¶			String beautifiedString = beautify(aString);¶			sb.append(beautifiedString);¶			¶		}¶		return sb.toString();¶	}¶    ¶    public static  List<String> matchedLines (String[] aLines, String aRegex) {¶    	List<String> result = new ArrayList();    ¶//    	int aCount = 0;¶    	for (String aLine:aLines) {¶    		if (aLine.contains("not make")) {¶    			System.out.println ("Found not make");¶    		}¶//    		if (aLine.contains("JavaDoc")) {¶//    			int i = 0;¶//    		}¶    		if (aLine.matches(aRegex))¶    			result.add(aLine);¶    	}¶    	return result;¶    }¶    public static  int numMatches (String[] aLines, String aRegex) {¶    	return matchedLines(aLines, aRegex).size();¶    }¶//    public abstract String negativeRegexLineFilter();¶//    public  String positiveRegexLineFilter() {¶//    	return null;¶//    }¶    public  String failMessageSpecifier(List<String> aMatchedLines) {¶    	return beautify(aMatchedLines);¶    }¶    protected String actualType = null;¶    public String getActualType() {¶    	return actualType;¶    }¶    public static String maybeStripComment(String aString) {	 ¶	 	int aCommentStart = aString.indexOf(COMMENT_START);¶	 	if (aCommentStart < 0)¶	 		return aString.trim();¶	 	return aString.substring(0, aCommentStart).trim();¶	 }¶    protected String getType(String aLine) {¶    	final String prefix = "Class ";¶    	int beginIndex = aLine.indexOf(prefix);¶    	String aSuffix = aLine.substring(beginIndex+prefix.length());¶    	int endIndex = aSuffix.indexOf(" ");¶    	¶    	return aSuffix.substring(0, endIndex);¶    }¶    protected TestCaseResult test(Project aProject, String[] aCheckStyleLines, boolean autoGrade) {¶  ¶//    	String aTypeTag = typeTag();¶//    	if (aTypeTag != null) {¶//    	List<String> aTypeDefinedLines = matchedLines(aCheckStyleLines, typeRegex(aTypeTag));¶//    	  this.foundType = aTypeDefinedLines.size() > 0;¶//    	  if (!foundType) {¶//    		  return fail (aTypeTag + " not found by checkstyle");¶//    	  }¶//    	  actualType = getType(aTypeDefinedLines.get(0));¶//    	}¶    	List<String> aFailedLines = null;¶    	String aNegativeFilter = negativeRegexLineFilter();¶    	if (aNegativeFilter != null) {¶    		aFailedLines =	matchedLines(aCheckStyleLines, aNegativeFilter);¶    	}¶    	List<String> aSucceededLines = null;¶    	String aPositiveFilter = positiveRegexLineFilter();¶    	if (aPositiveFilter != null) {¶    		aSucceededLines =	matchedLines(aCheckStyleLines, aPositiveFilter);¶    	}¶    	¶    	return test(aProject, aCheckStyleLines, aFailedLines, aSucceededLines, autoGrade);    	¶    }¶    ¶    protected TestCaseResult classFractionResult (Project aProject, String[] aCheckStyleLines, List<String> aMatchedLines, boolean autoGrade) {¶    	int aNumMatchedInstances = aMatchedLines.size();    	¶//        int aTotalClassCount = aProject.getClassesManager().getClassDescriptions().size();¶        int aTotalClassCount = aProject.getClassesManager().get().getClassDescriptions().size();¶¶        String aNotes = failMessageSpecifier(aMatchedLines) + " in " + aNumMatchedInstances + " out of " + aTotalClassCount + " classes ";¶        return partialPass((aTotalClassCount - aNumMatchedInstances)/aTotalClassCount, aNotes, autoGrade);    ¶    	¶    }¶    protected TestCaseResult numMatchesResult (Project aProject, String[] aCheckStyleLines, List<String> aFailedLines, List<String> aSucceededLines, boolean autoGrade) {¶    	int aNumFailedInstances = aFailedLines.size();   ¶    	double aScore = scoreForMatches(aNumFailedInstances);¶        String aNotes = failMessageSpecifier(aFailedLines) + " " + aNumFailedInstances + " number of times";¶        return partialPass((1 - aScore), aNotes, autoGrade);    ¶    	¶    }¶    ¶    protected TestCaseResult singleMatchScore (Project aProject, String[] aCheckStyleLines, List<String> aFailedLines, boolean autoGrade) {¶    	¶        String aNotes = failMessageSpecifier(aFailedLines); ¶        return fail(aNotes, autoGrade);    ¶    	¶    }¶    ¶    protected TestCaseResult computeResult (Project aProject, String[] aCheckStyleLines, List<String> aFailedLines, List<String> aSucceededLines, boolean autoGrade) {¶    	return numMatchesResult(aProject, aCheckStyleLines, aFailedLines, null, autoGrade);¶    	¶    }¶    protected boolean isPassed(int aNumMatchedInstances, int aNumSucceededInstances) {¶    	return aNumMatchedInstances == 0 && failOnMatch() || aNumMatchedInstances == 1 && !failOnMatch();¶    }¶    protected  TestCaseResult test (Project aProject, String[] aCheckStyleLines, List<String> aFailedMatchedLines, List<String> aSucceededMatchedLines, boolean autoGrade) {¶¶//    	int aNumMatchedInstances = 0;¶//    	if (aFailedMatchedLines != null) {¶//    		aNumMatchedInstances = aFailedMatchedLines.size();¶//    	}¶//    	int aNumSucceededInstances = (aSucceededMatchedLines == null)?0:aSucceededMatchedLines.size();¶////    	if (aNumMatchedInstances == 0 && failOnMatch() || aNumMatchedInstances == 1 && !failOnMatch())¶//        if (isPassed(aNumMatchedInstances, 0))¶//¶//    		return pass();¶    	return computeResult(aProject, aCheckStyleLines, aFailedMatchedLines, aSucceededMatchedLines, autoGrade);¶    	¶    }¶    protected double scoreForMatchNumber(int aMistakeNumber) {¶    	return 1.0/(Math.pow(2, aMistakeNumber+1)); // starting at 0¶    }¶    protected double scoreForMatches(int aNumMistakes) {¶    	double aScore = 0;¶    	for (int aMistakeNumber = 0; aMistakeNumber < aNumMistakes; aMistakeNumber++) {¶    		aScore += scoreForMatchNumber(aMistakeNumber);¶    	}¶    	return aScore;¶    }¶//    protected TestCaseResult test (SakaiProject aProject, String[] aCheckStyleLines, List<String> aFailedLines, boolean autoGrade) {¶//    	int aNumFailedInstances = aFailedLines.size();¶//    	double penaltyPerMistake = 0.2;¶//        int aTotalClassCount = aProject.getClassesManager().getClassDescriptions().size();¶//        String aNotes = failMessageSpecifier() + " in " + aNumFailedInstances + " out of " + aTotalClassCount + " classes ";¶//        return partialPass((aTotalClassCount - aNumFailedInstances)/aTotalClassCount, aNotes, autoGrade);    ¶//    	¶//    }¶    ¶    ¶¶//    @Override¶    public TestCaseResult test(Project aProject, boolean autoGrade) throws NotAutomatableException, NotGradableException {¶        if (aProject.getClassesManager().isEmpty())¶            throw new NotGradableException();¶        String aTypeTag = typeTag();¶//        if (aTypeTag != null) {¶//        Class aClass = IntrospectionUtil.getOrFindClass(project, this, typeTag); ¶        	// class exists check should have cached the class¶//        Class aClass = ProjectIntrospection.getClass(project, this, typeTag); ¶//¶//        if (aClass == null) {¶//	    	 return fail("Type " + aTypeTag + " not defined, cannot check");¶//	     }¶//	     typeName = aClass.getSimpleName();¶//        }¶//        SakaiProject aSakaiProject = ((ProjectWrapper) aProject).getProject();¶        String aCheckStyleText = aProject.getCheckstyleText();¶        if (aCheckStyleText == null) {¶//          System.err.println("No checkstyle output, check console error messages");¶          return fail ("No checkstyle output, check console error messages");¶        }¶//        String aCheckStyleFileName = aProject.getCheckStyleFileName(); // can read lines from this, maybe more efficient¶        String[] aCheckStyleLines = aCheckStyleText.split(System.getProperty("line.separator"));¶        return test(aProject, aCheckStyleLines, autoGrade);¶        ¶    }¶    public   String toClassName(String aCheckstyleMessage) {¶		 int anIndex1 = aCheckstyleMessage.indexOf("(");¶		 int anIndex2 = aCheckstyleMessage.indexOf (")");¶		 if (anIndex1 < 0 || anIndex2 < 0 || anIndex2 <= anIndex1)¶			 return "";¶		 return aCheckstyleMessage.substring(anIndex1 + 1, anIndex2);¶				¶	 }¶	static StringBuilder stringBuilder = new StringBuilder();¶¶    protected static String makeMethodAndTagRegex(String aBeforeMethod, String aBeforeTag, String anAfterTag, String[][] aTagAndMethods ) {¶		¶    	¶		stringBuilder.setLength(0);¶		stringBuilder.append(aBeforeMethod);¶¶		stringBuilder.append("(");¶		for (int anIndex = 0; anIndex < aTagAndMethods.length; anIndex++) {¶			String[] aTagAndMethod = aTagAndMethods[anIndex];¶			if (aTagAndMethod.length != 2) {¶				System.err.println(Arrays.toString(aTagAndMethod) + " should have exactly two elements ");¶				return null;¶			}¶			stringBuilder.append(aTagAndMethod[1]);¶			if (anIndex != aTagAndMethods.length - 1) {¶				stringBuilder.append("|");¶			}			¶		}¶		stringBuilder.append(")");¶		stringBuilder.append(aBeforeTag);¶		stringBuilder.append("(");¶		for (int anIndex = 0; anIndex < aTagAndMethods.length; anIndex++) {¶			String[] aTagAndMethod = aTagAndMethods[anIndex];¶			¶			stringBuilder.append(aTagAndMethod[0]);¶			if (anIndex != aTagAndMethods.length - 1) {¶				stringBuilder.append("|");¶			}			¶		}¶		stringBuilder.append(")");¶		stringBuilder.append(anAfterTag);¶		return stringBuilder.toString();¶		¶	}¶	protected int numFailedMatches (List<String> aFailedMatchedLines) {¶		return aFailedMatchedLines == null?0:aFailedMatchedLines.size();¶¶	}¶	protected int numSucceededMatches (List<String> aSucceededMatchedLines) {¶		return aSucceededMatchedLines == null?0:aSucceededMatchedLines.size();¶¶¶	}¶}¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="35268" _type="Insert" date="Sun Sep 20 15:54:29 EDT 2020" docASTNodeCount="1283" docActiveCodeLength="9137" docExpressionCount="764" docLength="12113" length="2" offset="2920" starttimestamp="1600113173134" timestamp="518496435">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="35269" _type="Insert" date="Sun Sep 20 15:54:29 EDT 2020" docASTNodeCount="1276" docActiveCodeLength="9092" docExpressionCount="758" docLength="12115" length="2" offset="2963" starttimestamp="1600113173134" timestamp="518496438">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="35270" _type="Insert" date="Sun Sep 20 15:54:29 EDT 2020" docASTNodeCount="1276" docActiveCodeLength="9085" docExpressionCount="759" docLength="12117" length="2" offset="3012" starttimestamp="1600113173134" timestamp="518496439">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="35386" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912160" />
  <Command __id="35387" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912168" />
  <Command __id="35388" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912197" />
  <Command __id="35389" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912367" />
  <Command __id="35390" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912488" />
  <Command __id="35391" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912500" />
  <Command __id="35392" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912507" />
  <Command __id="35393" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:25 EDT 2020" starttimestamp="1600113173134" timestamp="518912641" />
  <Command __id="35394" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Sun Sep 20 16:01:26 EDT 2020" starttimestamp="1600113173134" timestamp="518913461" />
  <Command __id="35395" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:26 EDT 2020" starttimestamp="1600113173134" timestamp="518913692" />
  <Command __id="35396" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:26 EDT 2020" starttimestamp="1600113173134" timestamp="518913705" />
  <Command __id="35397" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:26 EDT 2020" starttimestamp="1600113173134" timestamp="518913716" />
  <Command __id="35398" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:01:26 EDT 2020" starttimestamp="1600113173134" timestamp="518913821" />
  <Command __id="35400" _type="MoveCaretCommand" caretOffset="0" date="Sun Sep 20 16:05:18 EDT 2020" docOffset="0" starttimestamp="1600113173134" timestamp="519145749" />
  <Command __id="35401" _type="MoveCaretCommand" caretOffset="122" date="Sun Sep 20 16:05:22 EDT 2020" docOffset="122" starttimestamp="1600113173134" timestamp="519149698" />
  <Command __id="35402" _type="SelectTextCommand" caretOffset="119" date="Sun Sep 20 16:05:26 EDT 2020" end="123" start="119" starttimestamp="1600113173134" timestamp="519152879" />
  <Command __id="35403" _type="CopyCommand" date="Sun Sep 20 16:05:26 EDT 2020" starttimestamp="1600113173134" timestamp="519153604" />
  <Command __id="35399" _type="DiffBasedFileOpenCommand" date="Sun Sep 20 16:05:18 EDT 2020" docASTNodeCount="37" docActiveCodeLength="221" docExpressionCount="18" docLength="221" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="519145571">
    <filePath><![CDATA[D:\dewan_backup\Java\Gradescope-Autograder\GradescopeAssignmentSetup\src\edu\unc\cs\Comp524AssignmentSetup.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package edu.unc.cs;¶¶public class Comp524AssignmentSetup {¶	final static String[] MY_ARGS = {¶			"Comp524F20",¶			"01"¶¶	};¶	public static void main (String[] args) {¶		¶		AssignmentSetup.main(MY_ARGS);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="35404" _type="MoveCaretCommand" caretOffset="119" date="Sun Sep 20 16:05:30 EDT 2020" docOffset="119" starttimestamp="1600113173134" timestamp="519157297" />
  <Command __id="35406" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Sep 20 16:05:31 EDT 2020" starttimestamp="1600113173134" timestamp="519158312" />
  <Command __id="35407" _type="MoveCaretCommand" caretOffset="114" date="Sun Sep 20 16:05:32 EDT 2020" docOffset="114" starttimestamp="1600113173134" timestamp="519159847" />
  <Command __id="35409" _type="InsertStringCommand" date="Sun Sep 20 16:05:33 EDT 2020" starttimestamp="1600113173134" timestamp="519160231" timestamp2="519160231">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="35411" _type="PasteCommand" date="Sun Sep 20 16:05:34 EDT 2020" starttimestamp="1600113173134" timestamp="519161209" />
  <Command __id="35412" _type="MoveCaretCommand" caretOffset="121" date="Sun Sep 20 16:05:36 EDT 2020" docOffset="121" starttimestamp="1600113173134" timestamp="519162963" />
  <Command __id="35414" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Sep 20 16:05:36 EDT 2020" starttimestamp="1600113173134" timestamp="519163359" />
  <Command __id="35415" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Sep 20 16:05:37 EDT 2020" starttimestamp="1600113173134" timestamp="519164499" />
  <Command __id="35416" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:05:37 EDT 2020" starttimestamp="1600113173134" timestamp="519164641" />
  <Command __id="35417" _type="EclipseCommand" commandID="" date="Sun Sep 20 16:05:37 EDT 2020" starttimestamp="1600113173134" timestamp="519164686" />
  <Command __id="35418" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Sun Sep 20 16:05:44 EDT 2020" starttimestamp="1600113173134" timestamp="519171271" />
  <Command __id="35419" _type="RunCommand" date="Sun Sep 20 16:05:44 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="519171560" type="Run" />
  <Command __id="35420" _type="RunCommand" date="Sun Sep 20 16:05:44 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="519171561" type="Run" />
  <Command __id="35421" _type="RunCommand" date="Sun Sep 20 16:05:44 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1600113173134" timestamp="519171766" type="Run" />
  <Command __id="35422" _type="RunCommand" date="Sun Sep 20 16:05:44 EDT 2020" kind="StepInto" projectName="(Unknown)" starttimestamp="1600113173134" timestamp="519171818" type="Run" />
  <Command __id="35423" _type="RunCommand" date="Sun Sep 20 16:05:45 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1600113173134" timestamp="519171963" type="Run" />
  <Command __id="35424" _type="RunCommand" date="Sun Sep 20 16:05:45 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1600113173134" timestamp="519172235" type="Debug" />
  <Command __id="35425" _type="RunCommand" date="Sun Sep 20 16:05:45 EDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1600113173134" timestamp="519172236" type="Debug" />
  <Command __id="35426" _type="RunCommand" date="Sun Sep 20 16:05:45 EDT 2020" kind="HitBreakPoint" projectName="GradescopeAssignmentSetup" starttimestamp="1600113173134" timestamp="519172236" type="Run" />
  <Command __id="35427" _type="ShellCommand" date="Sun Sep 20 16:05:49 EDT 2020" starttimestamp="1600113173134" timestamp="519176465" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35428" _type="ShellCommand" date="Sun Sep 20 16:05:49 EDT 2020" starttimestamp="1600113173134" timestamp="519176846" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35429" _type="ShellCommand" date="Sun Sep 20 16:05:51 EDT 2020" starttimestamp="1600113173134" timestamp="519178152" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35430" _type="ShellCommand" date="Sun Sep 20 16:05:51 EDT 2020" starttimestamp="1600113173134" timestamp="519178613" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35431" _type="ShellCommand" date="Sun Sep 20 16:06:04 EDT 2020" starttimestamp="1600113173134" timestamp="519191428" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35448" _type="EHExceptionCommand" date="Sun Sep 20 16:15:13 EDT 2020" starttimestamp="1600113173134" timestamp="519740750" type="Exception">
    <outputString><![CDATA[I***(grader.settings.AGraderSettingsModel) Setting Current module to:Comp524f20
I***(grader.settings.AGraderSettingsModel) Time(1600632913832, 16:15:13) Module Changed:null
E***No stored download path. When the settings window comes up, please enter correct download path for a problem in module:Comp524f20 or change the module.
Null problem download path
]]></outputString>
  </Command>
  <Command __id="35449" _type="ShellCommand" date="Sun Sep 20 16:15:14 EDT 2020" starttimestamp="1600113173134" timestamp="519741441" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35450" _type="EHExceptionCommand" date="Sun Sep 20 16:15:14 EDT 2020" starttimestamp="1600113173134" timestamp="519741757" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="35451" _type="EHExceptionCommand" date="Sun Sep 20 16:15:15 EDT 2020" starttimestamp="1600113173134" timestamp="519742506" type="Exception">
    <outputString><![CDATA[I***(gradingTools.Driver) Time(1600632915535, 16:15:15) Grading Settings Displayed
I***(grader.settings.AGraderSettingsModel) Time(1600632915538, 16:15:15) Grading Settings Started
]]></outputString>
  </Command>
  <Command __id="35480" _type="EHExceptionCommand" date="Sun Sep 20 16:47:13 EDT 2020" starttimestamp="1600113173134" timestamp="521660564" type="Exception">
    <outputString><![CDATA[I***(grader.navigation.AlphabeticNavigationListManager) Time(1600634833697, 16:47:13) Student names sorted: [C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Mcgee, Austin(ajmcgee), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Shoffner, Bryton(bryton), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Davis, Chris(chris8), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Manchester, Coleman(cmanche), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Qiu, Cody(codyq), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Rubin, Dana(danarub), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Zhu, Daniel(danieldz), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Cmiel, Denny(dcmiel), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Handwerk, Eli(ekhand), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Le, Thomas(elsamoht), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Mcgrew, Grant(gdmcgrew), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Lewis, Alexander(giesting), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Kabra, Isha(ishaisha), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Taylor, Jacob(jacotayl), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Jahnke, Deven(jahnkedk), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Chen, Zhongrui(jcpwfloi), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Huang, Jed(jedhuang), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Moore, John(jmoore98), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Rende, Jerrett(jr48435), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Ryan, Kaki(kakiryan), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Hancock, Kila(kila), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Kim, Raphael(kim16r), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Lane, Kevin(kslane36), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Kim, Kyu(kyuyeon), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Chen, Jingyuan(leochanj), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Bezerra, Mattheus(mattbeze), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Mott, Megan(meganm18), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Sokol, Mitchell(msokol), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Patel, Vraj(patelvap), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Rudinsky, Paul(paulr728), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Le, Randy(randyle), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Rucho, Ross(rucho20), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Sharma, Rupin(rupshar), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Albers, Ryan(ryalbers), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\George, Samuel(sdgeorge), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Hoffman, Shane(shaneh22), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Dolikhani, Shayan(shayand), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Wang, Sicheng(sicheng), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Dridi, Sirine(sirine), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Newby, Mary(sisyphus), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Neza, Terry(tnez), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Yandrofski, Tyler(tylerdy), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Winslow, Robert(winslowr), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\Zeng, Qinghui(zengqh), C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\grades.csv]
]]></outputString>
  </Command>
  <Command __id="35481" _type="EHExceptionCommand" date="Sun Sep 20 16:47:13 EDT 2020" starttimestamp="1600113173134" timestamp="521660629" type="Exception">
    <outputString><![CDATA[I***(grader.navigation.AlphabeticNavigationListManager) Searching for onyens between:sdgeorge->sdgeorge
I***(grader.navigation.AlphabeticNavigationListManager) Found start onyen:George, Samuel(sdgeorge)
I***(grader.spreadsheet.csv.ASakaiCSVFinalGradeManager) Read spreadsheet table of size:47 from c:/users/dewan/downloads/comp524f20assignments/assignment 1/grades.csv
I***(grader.navigation.AlphabeticNavigationListManager) Found end onyen:George, Samuel(sdgeorge)
I***(grader.settings.AGraderSettingsModel) Clearing scores of student:sdgeorge
I***(grader.settings.AGraderSettingsModel) Saving PROBLEM_PATH:C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1
I***(grader.settings.AGraderSettingsManager) Problem name:Assignment1
I***(grader.sakai.ASakaiBulkAssignmentFolder)  Initializing root folderC:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1
]]></outputString>
  </Command>
  <Command __id="35482" _type="EHExceptionCommand" date="Sun Sep 20 16:47:14 EDT 2020" starttimestamp="1600113173134" timestamp="521660869" type="Exception">
    <outputString><![CDATA[I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833951, 16:47:13) Assignments root folder loaded: C:/Users/dewan/Downloads/Comp524F20Assignments/Assignment 1
I***(grader.sakai.ASakaiGradeSpreadsheetExtractor) Time(1600634833955, 16:47:13) Final grade file loaded: C:/Users/dewan/Downloads/Comp524F20Assignments/Assignment 1/grades.csv
I***(grader.sakai.ASakaiStudentFoldersExtractor) Time(1600634833963, 16:47:13) Student names sorted: []
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833965, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/mcgee, austin(ajmcgee)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833965, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/shoffner, bryton(bryton)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833965, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/davis, chris(chris8)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/manchester, coleman(cmanche)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/qiu, cody(codyq)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/rubin, dana(danarub)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/zhu, daniel(danieldz)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/cmiel, denny(dcmiel)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/handwerk, eli(ekhand)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/le, thomas(elsamoht)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/mcgrew, grant(gdmcgrew)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833966, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/lewis, alexander(giesting)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/kabra, isha(ishaisha)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/taylor, jacob(jacotayl)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/jahnke, deven(jahnkedk)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/chen, zhongrui(jcpwfloi)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/huang, jed(jedhuang)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833968, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/moore, john(jmoore98)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/rende, jerrett(jr48435)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/ryan, kaki(kakiryan)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/hancock, kila(kila)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/kim, raphael(kim16r)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/lane, kevin(kslane36)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833969, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/kim, kyu(kyuyeon)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833970, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/chen, jingyuan(leochanj)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833970, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/bezerra, mattheus(mattbeze)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833970, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/mott, megan(meganm18)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833970, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/sokol, mitchell(msokol)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833970, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/patel, vraj(patelvap)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833971, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/rudinsky, paul(paulr728)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833971, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/le, randy(randyle)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833971, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/rucho, ross(rucho20)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833971, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/sharma, rupin(rupshar)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/albers, ryan(ryalbers)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/hoffman, shane(shaneh22)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/dolikhani, shayan(shayand)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/wang, sicheng(sicheng)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/dridi, sirine(sirine)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/newby, mary(sisyphus)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/neza, terry(tnez)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/yandrofski, tyler(tylerdy)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833972, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/winslow, robert(winslowr)
I***(grader.sakai.ASakaiBulkAssignmentFolder) Time(1600634833975, 16:47:13) Student folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/zeng, qinghui(zengqh)
W***Checkstyle not enabled
I***(grader.sakai.ASakaiStudentCodingAssignmentsDatabase) Folder:c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834000, 16:47:14) Submission folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834001, 16:47:14) Feedback folder loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/feedback attachment(s)
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834002, 16:47:14) Comments file loaded: C:/Users/dewan/Downloads/Comp524F20Assignments/Assignment 1/George, Samuel(sdgeorge)/comments.txt
]]></outputString>
  </Command>
  <Command __id="35483" _type="EHExceptionCommand" date="Sun Sep 20 16:47:14 EDT 2020" starttimestamp="1600113173134" timestamp="521660982" type="Exception">
    <outputString><![CDATA[I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834034, 16:47:14) Timestamp file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/timestamp.txt
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/safesocialization.txt
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/interpolatingmainconsole.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/infermainconsole.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/basicmainconsole.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/logs/localchecks/unc_checks_524_a1_checks.txt
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/checkstylescreenshot.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/utilitymainconsole.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Time(1600634834037, 16:47:14) Document file loaded: c:/users/dewan/downloads/comp524f20assignments/assignment 1/george, samuel(sdgeorge)/submission attachment(s)/assignment1/assignment/derivingmainconsole.png
I***(grader.sakai.ASakaiStudentCodingAssignment) Found unzipped folder, processing zip folder:C:\Users\dewan\Downloads\Comp524F20Assignments\Assignment 1\George, Samuel(sdgeorge)\Submission attachment(s)\Assignment1
I***(grader.navigation.AlphabeticNavigationListManager) Making Selected Onyens as Raw Onyens
]]></outputString>
  </Command>
  <Command __id="35484" _type="EHExceptionCommand" date="Sun Sep 20 16:47:14 EDT 2020" starttimestamp="1600113173134" timestamp="521661095" type="Exception">
    <outputString><![CDATA[I***(grader.spreadsheet.csv.ASakaiCSVFeatureGradeManager) Read spreadsheet table of size:47 from d:/dewan_backup/java/comp524allchecks/./log/assignmentsdata/comp524f20/assignment 1/dewan_featuregrades.csv
I***(grader.sakai.ASakaiBulkAssignmentFolder) Clearing bulk assignment folder
]]></outputString>
  </Command>
  <Command __id="35485" _type="ShellCommand" date="Sun Sep 20 16:47:18 EDT 2020" starttimestamp="1600113173134" timestamp="521664901" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35486" _type="MoveCaretCommand" caretOffset="154" date="Sun Sep 20 16:47:18 EDT 2020" docOffset="154" starttimestamp="1600113173134" timestamp="521665036" />
  <Command __id="35487" _type="ShellCommand" date="Sun Sep 20 16:47:20 EDT 2020" starttimestamp="1600113173134" timestamp="521667398" type="ECLIPSE_LOST_FOCUS" />
